// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class NodeUsers
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public NodeUsers(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeUserPropertiesType UpdateNodeUser(string Userid, NSXTNodeUserPropertiesType NodeUserProperties)
        {
            if (Userid == null) { throw new System.ArgumentNullException("Userid cannot be null"); }
            if (NodeUserProperties == null) { throw new System.ArgumentNullException("NodeUserProperties cannot be null"); }
            NSXTNodeUserPropertiesType returnValue = default(NSXTNodeUserPropertiesType);
            StringBuilder UpdateNodeUserServiceURL = new StringBuilder("/node/users/{userid}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateNodeUserServiceURL.Replace("{userid}", System.Uri.EscapeDataString(Helpers.ConvertToString(Userid, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(NodeUserProperties, defaultSerializationSettings));
            request.Resource = UpdateNodeUserServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeUserPropertiesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeUserPropertiesType ReadNodeUser(string Userid)
        {
            if (Userid == null) { throw new System.ArgumentNullException("Userid cannot be null"); }
            NSXTNodeUserPropertiesType returnValue = default(NSXTNodeUserPropertiesType);
            StringBuilder ReadNodeUserServiceURL = new StringBuilder("/node/users/{userid}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNodeUserServiceURL.Replace("{userid}", System.Uri.EscapeDataString(Helpers.ConvertToString(Userid, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNodeUserServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeUserPropertiesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteNodeUserSshKeyRemoveSshKey(string Userid, NSXTSshKeyBasePropertiesType SshKeyBaseProperties)
        {
            if (Userid == null) { throw new System.ArgumentNullException("Userid cannot be null"); }
            if (SshKeyBaseProperties == null) { throw new System.ArgumentNullException("SshKeyBaseProperties cannot be null"); }
            
            StringBuilder DeleteNodeUserSshKeyRemoveSshKeyServiceURL = new StringBuilder("/node/users/{userid}/ssh-keys?action=remove_ssh_key");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            DeleteNodeUserSshKeyRemoveSshKeyServiceURL.Replace("{userid}", System.Uri.EscapeDataString(Helpers.ConvertToString(Userid, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SshKeyBaseProperties, defaultSerializationSettings));
            request.Resource = DeleteNodeUserSshKeyRemoveSshKeyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void AddNodeUserSshKeyAddSshKey(string Userid, NSXTSshKeyPropertiesType SshKeyProperties)
        {
            if (Userid == null) { throw new System.ArgumentNullException("Userid cannot be null"); }
            if (SshKeyProperties == null) { throw new System.ArgumentNullException("SshKeyProperties cannot be null"); }
            
            StringBuilder AddNodeUserSshKeyAddSshKeyServiceURL = new StringBuilder("/node/users/{userid}/ssh-keys?action=add_ssh_key");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            AddNodeUserSshKeyAddSshKeyServiceURL.Replace("{userid}", System.Uri.EscapeDataString(Helpers.ConvertToString(Userid, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SshKeyProperties, defaultSerializationSettings));
            request.Resource = AddNodeUserSshKeyAddSshKeyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeUserPropertiesListResultType ListNodeUsers()
        {
            NSXTNodeUserPropertiesListResultType returnValue = default(NSXTNodeUserPropertiesListResultType);
            StringBuilder ListNodeUsersServiceURL = new StringBuilder("/node/users");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListNodeUsersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeUserPropertiesListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSshKeyPropertiesListResultType ListNodeUserSshKeys(string Userid)
        {
            if (Userid == null) { throw new System.ArgumentNullException("Userid cannot be null"); }
            NSXTSshKeyPropertiesListResultType returnValue = default(NSXTSshKeyPropertiesListResultType);
            StringBuilder ListNodeUserSshKeysServiceURL = new StringBuilder("/node/users/{userid}/ssh-keys");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListNodeUserSshKeysServiceURL.Replace("{userid}", System.Uri.EscapeDataString(Helpers.ConvertToString(Userid, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ListNodeUserSshKeysServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTSshKeyPropertiesListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
