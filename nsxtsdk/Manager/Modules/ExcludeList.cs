// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class ExcludeList
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public ExcludeList(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTResourceReferenceType RemoveMember(string ObjectId, bool? DeepCheck = null, string? ObjectType = null)
        {
            if (ObjectId == null) { throw new System.ArgumentNullException("ObjectId cannot be null"); }
            NSXTResourceReferenceType returnValue = default(NSXTResourceReferenceType);
            StringBuilder RemoveMemberServiceURL = new StringBuilder("/firewall/excludelist?action=remove_member");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (DeepCheck != null) { request.AddQueryParameter("deep_check", DeepCheck.ToString()); }
            if (ObjectId != null) { request.AddQueryParameter("object_id", ObjectId.ToString()); }
            if (ObjectType != null) { request.AddQueryParameter("object_type", ObjectType.ToString()); }
            request.Resource = RemoveMemberServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + RemoveMemberServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTResourceReferenceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTResourceReferenceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTExcludeListType UpdateExcludeList(NSXTExcludeListType ExcludeList)
        {
            if (ExcludeList == null) { throw new System.ArgumentNullException("ExcludeList cannot be null"); }
            NSXTExcludeListType returnValue = default(NSXTExcludeListType);
            StringBuilder UpdateExcludeListServiceURL = new StringBuilder("/firewall/excludelist");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(ExcludeList, defaultSerializationSettings));
            request.Resource = UpdateExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateExcludeListServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTExcludeListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTExcludeListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTExcludeListType GetExcludeList()
        {
            NSXTExcludeListType returnValue = default(NSXTExcludeListType);
            StringBuilder GetExcludeListServiceURL = new StringBuilder("/firewall/excludelist");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetExcludeListServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTExcludeListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTExcludeListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTResourceReferenceType AddMember(NSXTResourceReferenceType ResourceReference)
        {
            if (ResourceReference == null) { throw new System.ArgumentNullException("ResourceReference cannot be null"); }
            NSXTResourceReferenceType returnValue = default(NSXTResourceReferenceType);
            StringBuilder AddMemberServiceURL = new StringBuilder("/firewall/excludelist?action=add_member");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(ResourceReference, defaultSerializationSettings));
            request.Resource = AddMemberServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + AddMemberServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTResourceReferenceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTResourceReferenceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTResourceReferenceType CheckMemberIfExists(string ObjectId, bool? DeepCheck = null, string? ObjectType = null)
        {
            if (ObjectId == null) { throw new System.ArgumentNullException("ObjectId cannot be null"); }
            NSXTResourceReferenceType returnValue = default(NSXTResourceReferenceType);
            StringBuilder CheckMemberIfExistsServiceURL = new StringBuilder("/firewall/excludelist?action=check_if_exists");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (DeepCheck != null) { request.AddQueryParameter("deep_check", DeepCheck.ToString()); }
            if (ObjectId != null) { request.AddQueryParameter("object_id", ObjectId.ToString()); }
            if (ObjectType != null) { request.AddQueryParameter("object_type", ObjectType.ToString()); }
            request.Resource = CheckMemberIfExistsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CheckMemberIfExistsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTResourceReferenceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTResourceReferenceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
