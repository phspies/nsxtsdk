// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class LoadBalancer
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public LoadBalancer(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbAppProfileType UpdateLoadBalancerApplicationProfile(string ApplicationProfileId, NSXTLbAppProfileType LbAppProfile)
        {
            if (ApplicationProfileId == null) { throw new System.ArgumentNullException("ApplicationProfileId cannot be null"); }
            if (LbAppProfile == null) { throw new System.ArgumentNullException("LbAppProfile cannot be null"); }
            NSXTLbAppProfileType returnValue = default(NSXTLbAppProfileType);
            StringBuilder UpdateLoadBalancerApplicationProfileServiceURL = new StringBuilder("/loadbalancer/application-profiles/{application-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerApplicationProfileServiceURL.Replace("{application-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ApplicationProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbAppProfile, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerApplicationProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerApplicationProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbAppProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbAppProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerApplicationProfile(string ApplicationProfileId)
        {
            if (ApplicationProfileId == null) { throw new System.ArgumentNullException("ApplicationProfileId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerApplicationProfileServiceURL = new StringBuilder("/loadbalancer/application-profiles/{application-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerApplicationProfileServiceURL.Replace("{application-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ApplicationProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerApplicationProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerApplicationProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbAppProfileType ReadLoadBalancerApplicationProfile(string ApplicationProfileId)
        {
            if (ApplicationProfileId == null) { throw new System.ArgumentNullException("ApplicationProfileId cannot be null"); }
            NSXTLbAppProfileType returnValue = default(NSXTLbAppProfileType);
            StringBuilder ReadLoadBalancerApplicationProfileServiceURL = new StringBuilder("/loadbalancer/application-profiles/{application-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerApplicationProfileServiceURL.Replace("{application-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ApplicationProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerApplicationProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerApplicationProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbAppProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbAppProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServerSslProfileType CreateLoadBalancerServerSslProfile(NSXTLbServerSslProfileType LbServerSslProfile)
        {
            if (LbServerSslProfile == null) { throw new System.ArgumentNullException("LbServerSslProfile cannot be null"); }
            NSXTLbServerSslProfileType returnValue = default(NSXTLbServerSslProfileType);
            StringBuilder CreateLoadBalancerServerSslProfileServiceURL = new StringBuilder("/loadbalancer/server-ssl-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbServerSslProfile, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerServerSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerServerSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServerSslProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServerSslProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServerSslProfileListResultType ListLoadBalancerServerSslProfiles(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbServerSslProfileListResultType returnValue = default(NSXTLbServerSslProfileListResultType);
            StringBuilder ListLoadBalancerServerSslProfilesServiceURL = new StringBuilder("/loadbalancer/server-ssl-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLoadBalancerServerSslProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerServerSslProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServerSslProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServerSslProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServiceType UpdateLoadBalancerService(string ServiceId, NSXTLbServiceType LbService)
        {
            if (ServiceId == null) { throw new System.ArgumentNullException("ServiceId cannot be null"); }
            if (LbService == null) { throw new System.ArgumentNullException("LbService cannot be null"); }
            NSXTLbServiceType returnValue = default(NSXTLbServiceType);
            StringBuilder UpdateLoadBalancerServiceServiceURL = new StringBuilder("/loadbalancer/services/{service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerServiceServiceURL.Replace("{service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbService, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServiceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServiceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerService(string ServiceId)
        {
            if (ServiceId == null) { throw new System.ArgumentNullException("ServiceId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerServiceServiceURL = new StringBuilder("/loadbalancer/services/{service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerServiceServiceURL.Replace("{service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServiceType ReadLoadBalancerService(string ServiceId)
        {
            if (ServiceId == null) { throw new System.ArgumentNullException("ServiceId cannot be null"); }
            NSXTLbServiceType returnValue = default(NSXTLbServiceType);
            StringBuilder ReadLoadBalancerServiceServiceURL = new StringBuilder("/loadbalancer/services/{service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerServiceServiceURL.Replace("{service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServiceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServiceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbRuleType UpdateLoadBalancerRule(string RuleId, NSXTLbRuleType LbRule)
        {
            if (RuleId == null) { throw new System.ArgumentNullException("RuleId cannot be null"); }
            if (LbRule == null) { throw new System.ArgumentNullException("LbRule cannot be null"); }
            NSXTLbRuleType returnValue = default(NSXTLbRuleType);
            StringBuilder UpdateLoadBalancerRuleServiceURL = new StringBuilder("/loadbalancer/rules/{rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerRuleServiceURL.Replace("{rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(RuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbRule, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbRuleType ReadLoadBalancerRule(string RuleId)
        {
            if (RuleId == null) { throw new System.ArgumentNullException("RuleId cannot be null"); }
            NSXTLbRuleType returnValue = default(NSXTLbRuleType);
            StringBuilder ReadLoadBalancerRuleServiceURL = new StringBuilder("/loadbalancer/rules/{rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerRuleServiceURL.Replace("{rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(RuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerRule(string RuleId)
        {
            if (RuleId == null) { throw new System.ArgumentNullException("RuleId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerRuleServiceURL = new StringBuilder("/loadbalancer/rules/{rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerRuleServiceURL.Replace("{rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(RuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPoolType UpdateLoadBalancerPool(string PoolId, NSXTLbPoolType LbPool)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            if (LbPool == null) { throw new System.ArgumentNullException("LbPool cannot be null"); }
            NSXTLbPoolType returnValue = default(NSXTLbPoolType);
            StringBuilder UpdateLoadBalancerPoolServiceURL = new StringBuilder("/loadbalancer/pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerPoolServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbPool, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerPoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPoolType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPoolType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPoolType PerformPoolMemberAction(string PoolId, NSXTPoolMemberSettingListType PoolMemberSettingList, string Action)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            if (PoolMemberSettingList == null) { throw new System.ArgumentNullException("PoolMemberSettingList cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            NSXTLbPoolType returnValue = default(NSXTLbPoolType);
            StringBuilder PerformPoolMemberActionServiceURL = new StringBuilder("/loadbalancer/pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            PerformPoolMemberActionServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PoolMemberSettingList, defaultSerializationSettings));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            request.Resource = PerformPoolMemberActionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + PerformPoolMemberActionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPoolType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPoolType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerPool(string PoolId)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerPoolServiceURL = new StringBuilder("/loadbalancer/pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerPoolServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerPoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPoolType ReadLoadBalancerPool(string PoolId)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            NSXTLbPoolType returnValue = default(NSXTLbPoolType);
            StringBuilder ReadLoadBalancerPoolServiceURL = new StringBuilder("/loadbalancer/pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerPoolServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerPoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPoolType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPoolType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbRuleType CreateLoadBalancerRule(NSXTLbRuleType LbRule)
        {
            if (LbRule == null) { throw new System.ArgumentNullException("LbRule cannot be null"); }
            NSXTLbRuleType returnValue = default(NSXTLbRuleType);
            StringBuilder CreateLoadBalancerRuleServiceURL = new StringBuilder("/loadbalancer/rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbRule, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbRuleListResultType ListLoadBalancerRules(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbRuleListResultType returnValue = default(NSXTLbRuleListResultType);
            StringBuilder ListLoadBalancerRulesServiceURL = new StringBuilder("/loadbalancer/rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLoadBalancerRulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerRulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbRuleListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbRuleListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbVirtualServerWithRuleType UpdateLoadBalancerVirtualServerWithRules(string VirtualServerId, NSXTLbVirtualServerWithRuleType LbVirtualServerWithRule)
        {
            if (VirtualServerId == null) { throw new System.ArgumentNullException("VirtualServerId cannot be null"); }
            if (LbVirtualServerWithRule == null) { throw new System.ArgumentNullException("LbVirtualServerWithRule cannot be null"); }
            NSXTLbVirtualServerWithRuleType returnValue = default(NSXTLbVirtualServerWithRuleType);
            StringBuilder UpdateLoadBalancerVirtualServerWithRulesServiceURL = new StringBuilder("/loadbalancer/virtual-servers/{virtual-server-id}?action=update_with_rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerVirtualServerWithRulesServiceURL.Replace("{virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbVirtualServerWithRule, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerVirtualServerWithRulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerVirtualServerWithRulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbVirtualServerWithRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbVirtualServerWithRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPersistenceProfileType CreateLoadBalancerPersistenceProfile(NSXTLbPersistenceProfileType LbPersistenceProfile)
        {
            if (LbPersistenceProfile == null) { throw new System.ArgumentNullException("LbPersistenceProfile cannot be null"); }
            NSXTLbPersistenceProfileType returnValue = default(NSXTLbPersistenceProfileType);
            StringBuilder CreateLoadBalancerPersistenceProfileServiceURL = new StringBuilder("/loadbalancer/persistence-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbPersistenceProfile, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerPersistenceProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerPersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPersistenceProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPersistenceProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPersistenceProfileListResultType ListLoadBalancerPersistenceProfiles(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTLbPersistenceProfileListResultType returnValue = default(NSXTLbPersistenceProfileListResultType);
            StringBuilder ListLoadBalancerPersistenceProfilesServiceURL = new StringBuilder("/loadbalancer/persistence-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = ListLoadBalancerPersistenceProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerPersistenceProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPersistenceProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPersistenceProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServerSslProfileType UpdateLoadBalancerServerSslProfile(string ServerSslProfileId, NSXTLbServerSslProfileType LbServerSslProfile)
        {
            if (ServerSslProfileId == null) { throw new System.ArgumentNullException("ServerSslProfileId cannot be null"); }
            if (LbServerSslProfile == null) { throw new System.ArgumentNullException("LbServerSslProfile cannot be null"); }
            NSXTLbServerSslProfileType returnValue = default(NSXTLbServerSslProfileType);
            StringBuilder UpdateLoadBalancerServerSslProfileServiceURL = new StringBuilder("/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerServerSslProfileServiceURL.Replace("{server-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServerSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbServerSslProfile, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerServerSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerServerSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServerSslProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServerSslProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerServerSslProfile(string ServerSslProfileId)
        {
            if (ServerSslProfileId == null) { throw new System.ArgumentNullException("ServerSslProfileId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerServerSslProfileServiceURL = new StringBuilder("/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerServerSslProfileServiceURL.Replace("{server-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServerSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerServerSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerServerSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServerSslProfileType ReadLoadBalancerServerSslProfile(string ServerSslProfileId)
        {
            if (ServerSslProfileId == null) { throw new System.ArgumentNullException("ServerSslProfileId cannot be null"); }
            NSXTLbServerSslProfileType returnValue = default(NSXTLbServerSslProfileType);
            StringBuilder ReadLoadBalancerServerSslProfileServiceURL = new StringBuilder("/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerServerSslProfileServiceURL.Replace("{server-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServerSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerServerSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerServerSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServerSslProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServerSslProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbNodeUsageSummaryType ReadLoadBalancerNodeUsageSummary(bool? IncludeUsages = null)
        {
            NSXTLbNodeUsageSummaryType returnValue = default(NSXTLbNodeUsageSummaryType);
            StringBuilder ReadLoadBalancerNodeUsageSummaryServiceURL = new StringBuilder("/loadbalancer/node-usage-summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IncludeUsages != null) { request.AddQueryParameter("include_usages", IncludeUsages.ToString()); }
            request.Resource = ReadLoadBalancerNodeUsageSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerNodeUsageSummaryServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbNodeUsageSummaryType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbNodeUsageSummaryType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbNodeUsageType ReadLoadBalancerNodeUsage(string NodeId)
        {
            if (NodeId == null) { throw new System.ArgumentNullException("NodeId cannot be null"); }
            NSXTLbNodeUsageType returnValue = default(NSXTLbNodeUsageType);
            StringBuilder ReadLoadBalancerNodeUsageServiceURL = new StringBuilder("/loadbalancer/usage-per-node/{node-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerNodeUsageServiceURL.Replace("{node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerNodeUsageServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerNodeUsageServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbNodeUsageType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbNodeUsageType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbSslCipherAndProtocolListResultType ListLoadBalancerSslCiphersAndProtocols(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbSslCipherAndProtocolListResultType returnValue = default(NSXTLbSslCipherAndProtocolListResultType);
            StringBuilder ListLoadBalancerSslCiphersAndProtocolsServiceURL = new StringBuilder("/loadbalancer/ssl/ciphers-and-protocols");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLoadBalancerSslCiphersAndProtocolsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerSslCiphersAndProtocolsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbSslCipherAndProtocolListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbSslCipherAndProtocolListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServiceDebugInfoType ReadLoadBalancerServiceDebugInfo(string ServiceId)
        {
            if (ServiceId == null) { throw new System.ArgumentNullException("ServiceId cannot be null"); }
            NSXTLbServiceDebugInfoType returnValue = default(NSXTLbServiceDebugInfoType);
            StringBuilder ReadLoadBalancerServiceDebugInfoServiceURL = new StringBuilder("/loadbalancer/services/{service-id}/debug-info");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerServiceDebugInfoServiceURL.Replace("{service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerServiceDebugInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerServiceDebugInfoServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServiceDebugInfoType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServiceDebugInfoType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbAppProfileType CreateLoadBalancerApplicationProfile(NSXTLbAppProfileType LbAppProfile)
        {
            if (LbAppProfile == null) { throw new System.ArgumentNullException("LbAppProfile cannot be null"); }
            NSXTLbAppProfileType returnValue = default(NSXTLbAppProfileType);
            StringBuilder CreateLoadBalancerApplicationProfileServiceURL = new StringBuilder("/loadbalancer/application-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbAppProfile, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerApplicationProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerApplicationProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbAppProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbAppProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbAppProfileListResultType ListLoadBalancerApplicationProfiles(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTLbAppProfileListResultType returnValue = default(NSXTLbAppProfileListResultType);
            StringBuilder ListLoadBalancerApplicationProfilesServiceURL = new StringBuilder("/loadbalancer/application-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = ListLoadBalancerApplicationProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerApplicationProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbAppProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbAppProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbMonitorType UpdateLoadBalancerMonitor(string MonitorId, NSXTLbMonitorType LbMonitor)
        {
            if (MonitorId == null) { throw new System.ArgumentNullException("MonitorId cannot be null"); }
            if (LbMonitor == null) { throw new System.ArgumentNullException("LbMonitor cannot be null"); }
            NSXTLbMonitorType returnValue = default(NSXTLbMonitorType);
            StringBuilder UpdateLoadBalancerMonitorServiceURL = new StringBuilder("/loadbalancer/monitors/{monitor-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerMonitorServiceURL.Replace("{monitor-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MonitorId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbMonitor, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerMonitorServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerMonitorServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbMonitorType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbMonitorType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbMonitorType ReadLoadBalancerMonitor(string MonitorId)
        {
            if (MonitorId == null) { throw new System.ArgumentNullException("MonitorId cannot be null"); }
            NSXTLbMonitorType returnValue = default(NSXTLbMonitorType);
            StringBuilder ReadLoadBalancerMonitorServiceURL = new StringBuilder("/loadbalancer/monitors/{monitor-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerMonitorServiceURL.Replace("{monitor-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MonitorId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerMonitorServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerMonitorServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbMonitorType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbMonitorType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerMonitor(string MonitorId)
        {
            if (MonitorId == null) { throw new System.ArgumentNullException("MonitorId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerMonitorServiceURL = new StringBuilder("/loadbalancer/monitors/{monitor-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerMonitorServiceURL.Replace("{monitor-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MonitorId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerMonitorServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerMonitorServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbClientSslProfileType UpdateLoadBalancerClientSslProfile(string ClientSslProfileId, NSXTLbClientSslProfileType LbClientSslProfile)
        {
            if (ClientSslProfileId == null) { throw new System.ArgumentNullException("ClientSslProfileId cannot be null"); }
            if (LbClientSslProfile == null) { throw new System.ArgumentNullException("LbClientSslProfile cannot be null"); }
            NSXTLbClientSslProfileType returnValue = default(NSXTLbClientSslProfileType);
            StringBuilder UpdateLoadBalancerClientSslProfileServiceURL = new StringBuilder("/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerClientSslProfileServiceURL.Replace("{client-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClientSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbClientSslProfile, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerClientSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerClientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbClientSslProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbClientSslProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbClientSslProfileType ReadLoadBalancerClientSslProfile(string ClientSslProfileId)
        {
            if (ClientSslProfileId == null) { throw new System.ArgumentNullException("ClientSslProfileId cannot be null"); }
            NSXTLbClientSslProfileType returnValue = default(NSXTLbClientSslProfileType);
            StringBuilder ReadLoadBalancerClientSslProfileServiceURL = new StringBuilder("/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerClientSslProfileServiceURL.Replace("{client-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClientSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerClientSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerClientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbClientSslProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbClientSslProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerClientSslProfile(string ClientSslProfileId)
        {
            if (ClientSslProfileId == null) { throw new System.ArgumentNullException("ClientSslProfileId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerClientSslProfileServiceURL = new StringBuilder("/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerClientSslProfileServiceURL.Replace("{client-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClientSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerClientSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerClientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServiceUsageType ReadLoadBalancerServiceUsage(string ServiceId)
        {
            if (ServiceId == null) { throw new System.ArgumentNullException("ServiceId cannot be null"); }
            NSXTLbServiceUsageType returnValue = default(NSXTLbServiceUsageType);
            StringBuilder ReadLoadBalancerServiceUsageServiceURL = new StringBuilder("/loadbalancer/services/{service-id}/usage");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerServiceUsageServiceURL.Replace("{service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerServiceUsageServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerServiceUsageServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServiceUsageType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServiceUsageType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPoolType CreateLoadBalancerPool(NSXTLbPoolType LbPool)
        {
            if (LbPool == null) { throw new System.ArgumentNullException("LbPool cannot be null"); }
            NSXTLbPoolType returnValue = default(NSXTLbPoolType);
            StringBuilder CreateLoadBalancerPoolServiceURL = new StringBuilder("/loadbalancer/pools");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbPool, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerPoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPoolType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPoolType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPoolListResultType ListLoadBalancerPools(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbPoolListResultType returnValue = default(NSXTLbPoolListResultType);
            StringBuilder ListLoadBalancerPoolsServiceURL = new StringBuilder("/loadbalancer/pools");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLoadBalancerPoolsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerPoolsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPoolListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPoolListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbMonitorType CreateLoadBalancerMonitor(NSXTLbMonitorType LbMonitor)
        {
            if (LbMonitor == null) { throw new System.ArgumentNullException("LbMonitor cannot be null"); }
            NSXTLbMonitorType returnValue = default(NSXTLbMonitorType);
            StringBuilder CreateLoadBalancerMonitorServiceURL = new StringBuilder("/loadbalancer/monitors");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbMonitor, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerMonitorServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerMonitorServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbMonitorType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbMonitorType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbMonitorListResultType ListLoadBalancerMonitors(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTLbMonitorListResultType returnValue = default(NSXTLbMonitorListResultType);
            StringBuilder ListLoadBalancerMonitorsServiceURL = new StringBuilder("/loadbalancer/monitors");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = ListLoadBalancerMonitorsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerMonitorsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbMonitorListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbMonitorListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServiceType CreateLoadBalancerService(NSXTLbServiceType LbService)
        {
            if (LbService == null) { throw new System.ArgumentNullException("LbService cannot be null"); }
            NSXTLbServiceType returnValue = default(NSXTLbServiceType);
            StringBuilder CreateLoadBalancerServiceServiceURL = new StringBuilder("/loadbalancer/services");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbService, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServiceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServiceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbServiceListResultType ListLoadBalancerServices(string? Cursor = null, string? IncludedFields = null, string? LogicalRouterId = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbServiceListResultType returnValue = default(NSXTLbServiceListResultType);
            StringBuilder ListLoadBalancerServicesServiceURL = new StringBuilder("/loadbalancer/services");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (LogicalRouterId != null) { request.AddQueryParameter("logical_router_id", LogicalRouterId.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLoadBalancerServicesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerServicesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbServiceListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbServiceListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbVirtualServerType UpdateLoadBalancerVirtualServer(string VirtualServerId, NSXTLbVirtualServerType LbVirtualServer)
        {
            if (VirtualServerId == null) { throw new System.ArgumentNullException("VirtualServerId cannot be null"); }
            if (LbVirtualServer == null) { throw new System.ArgumentNullException("LbVirtualServer cannot be null"); }
            NSXTLbVirtualServerType returnValue = default(NSXTLbVirtualServerType);
            StringBuilder UpdateLoadBalancerVirtualServerServiceURL = new StringBuilder("/loadbalancer/virtual-servers/{virtual-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerVirtualServerServiceURL.Replace("{virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbVirtualServer, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerVirtualServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerVirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbVirtualServerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbVirtualServerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerVirtualServer(string VirtualServerId, bool? DeleteAssociatedRules = null)
        {
            if (VirtualServerId == null) { throw new System.ArgumentNullException("VirtualServerId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerVirtualServerServiceURL = new StringBuilder("/loadbalancer/virtual-servers/{virtual-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerVirtualServerServiceURL.Replace("{virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (DeleteAssociatedRules != null) { request.AddQueryParameter("delete_associated_rules", DeleteAssociatedRules.ToString()); }
            request.Resource = DeleteLoadBalancerVirtualServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerVirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbVirtualServerType ReadLoadBalancerVirtualServer(string VirtualServerId)
        {
            if (VirtualServerId == null) { throw new System.ArgumentNullException("VirtualServerId cannot be null"); }
            NSXTLbVirtualServerType returnValue = default(NSXTLbVirtualServerType);
            StringBuilder ReadLoadBalancerVirtualServerServiceURL = new StringBuilder("/loadbalancer/virtual-servers/{virtual-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerVirtualServerServiceURL.Replace("{virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerVirtualServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerVirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbVirtualServerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbVirtualServerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPersistenceProfileType UpdateLoadBalancerPersistenceProfile(string PersistenceProfileId, NSXTLbPersistenceProfileType LbPersistenceProfile)
        {
            if (PersistenceProfileId == null) { throw new System.ArgumentNullException("PersistenceProfileId cannot be null"); }
            if (LbPersistenceProfile == null) { throw new System.ArgumentNullException("LbPersistenceProfile cannot be null"); }
            NSXTLbPersistenceProfileType returnValue = default(NSXTLbPersistenceProfileType);
            StringBuilder UpdateLoadBalancerPersistenceProfileServiceURL = new StringBuilder("/loadbalancer/persistence-profiles/{persistence-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLoadBalancerPersistenceProfileServiceURL.Replace("{persistence-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PersistenceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbPersistenceProfile, defaultSerializationSettings));
            request.Resource = UpdateLoadBalancerPersistenceProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLoadBalancerPersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPersistenceProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPersistenceProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbPersistenceProfileType ReadLoadBalancerPersistenceProfile(string PersistenceProfileId)
        {
            if (PersistenceProfileId == null) { throw new System.ArgumentNullException("PersistenceProfileId cannot be null"); }
            NSXTLbPersistenceProfileType returnValue = default(NSXTLbPersistenceProfileType);
            StringBuilder ReadLoadBalancerPersistenceProfileServiceURL = new StringBuilder("/loadbalancer/persistence-profiles/{persistence-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLoadBalancerPersistenceProfileServiceURL.Replace("{persistence-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PersistenceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLoadBalancerPersistenceProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLoadBalancerPersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbPersistenceProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbPersistenceProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLoadBalancerPersistenceProfile(string PersistenceProfileId)
        {
            if (PersistenceProfileId == null) { throw new System.ArgumentNullException("PersistenceProfileId cannot be null"); }
            
            StringBuilder DeleteLoadBalancerPersistenceProfileServiceURL = new StringBuilder("/loadbalancer/persistence-profiles/{persistence-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLoadBalancerPersistenceProfileServiceURL.Replace("{persistence-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PersistenceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLoadBalancerPersistenceProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLoadBalancerPersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbClientSslProfileType CreateLoadBalancerClientSslProfile(NSXTLbClientSslProfileType LbClientSslProfile)
        {
            if (LbClientSslProfile == null) { throw new System.ArgumentNullException("LbClientSslProfile cannot be null"); }
            NSXTLbClientSslProfileType returnValue = default(NSXTLbClientSslProfileType);
            StringBuilder CreateLoadBalancerClientSslProfileServiceURL = new StringBuilder("/loadbalancer/client-ssl-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbClientSslProfile, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerClientSslProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerClientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbClientSslProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbClientSslProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbClientSslProfileListResultType ListLoadBalancerClientSslProfiles(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbClientSslProfileListResultType returnValue = default(NSXTLbClientSslProfileListResultType);
            StringBuilder ListLoadBalancerClientSslProfilesServiceURL = new StringBuilder("/loadbalancer/client-ssl-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLoadBalancerClientSslProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerClientSslProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbClientSslProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbClientSslProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbVirtualServerType CreateLoadBalancerVirtualServer(NSXTLbVirtualServerType LbVirtualServer)
        {
            if (LbVirtualServer == null) { throw new System.ArgumentNullException("LbVirtualServer cannot be null"); }
            NSXTLbVirtualServerType returnValue = default(NSXTLbVirtualServerType);
            StringBuilder CreateLoadBalancerVirtualServerServiceURL = new StringBuilder("/loadbalancer/virtual-servers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbVirtualServer, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerVirtualServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerVirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbVirtualServerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbVirtualServerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbVirtualServerListResultType ListLoadBalancerVirtualServers(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbVirtualServerListResultType returnValue = default(NSXTLbVirtualServerListResultType);
            StringBuilder ListLoadBalancerVirtualServersServiceURL = new StringBuilder("/loadbalancer/virtual-servers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLoadBalancerVirtualServersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLoadBalancerVirtualServersServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbVirtualServerListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbVirtualServerListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLbVirtualServerWithRuleType CreateLoadBalancerVirtualServerWithRules(NSXTLbVirtualServerWithRuleType LbVirtualServerWithRule)
        {
            if (LbVirtualServerWithRule == null) { throw new System.ArgumentNullException("LbVirtualServerWithRule cannot be null"); }
            NSXTLbVirtualServerWithRuleType returnValue = default(NSXTLbVirtualServerWithRuleType);
            StringBuilder CreateLoadBalancerVirtualServerWithRulesServiceURL = new StringBuilder("/loadbalancer/virtual-servers?action=create_with_rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LbVirtualServerWithRule, defaultSerializationSettings));
            request.Resource = CreateLoadBalancerVirtualServerWithRulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLoadBalancerVirtualServerWithRulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLbVirtualServerWithRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLbVirtualServerWithRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
