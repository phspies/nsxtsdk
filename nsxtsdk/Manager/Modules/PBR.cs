// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class PBR
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PBR(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionType UpdatePbrsection(string SectionId, NSXTPBRSectionType Pbrsection)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (Pbrsection == null) { throw new System.ArgumentNullException("Pbrsection cannot be null"); }
            NSXTPBRSectionType returnValue = default(NSXTPBRSectionType);
            StringBuilder UpdatePbrsectionServiceURL = new StringBuilder("/pbr/sections/{section-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePbrsectionServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Pbrsection, defaultSerializationSettings));
            request.Resource = UpdatePbrsectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePbrsectionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionType GetPbrsection(string SectionId)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            NSXTPBRSectionType returnValue = default(NSXTPBRSectionType);
            StringBuilder GetPbrsectionServiceURL = new StringBuilder("/pbr/sections/{section-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPbrsectionServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPbrsectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPbrsectionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePbrsection(string SectionId, bool? Cascade = null)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            
            StringBuilder DeletePbrsectionServiceURL = new StringBuilder("/pbr/sections/{section-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePbrsectionServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cascade != null) { request.AddQueryParameter("cascade", Cascade.ToString()); }
            request.Resource = DeletePbrsectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePbrsectionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionRuleListType AddPbrsectionWithRulesCreateWithRules(NSXTPBRSectionRuleListType PbrsectionRuleList, string? Id = null, string? Operation = null)
        {
            if (PbrsectionRuleList == null) { throw new System.ArgumentNullException("PbrsectionRuleList cannot be null"); }
            NSXTPBRSectionRuleListType returnValue = default(NSXTPBRSectionRuleListType);
            StringBuilder AddPbrsectionWithRulesCreateWithRulesServiceURL = new StringBuilder("/pbr/sections?action=create_with_rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PbrsectionRuleList, defaultSerializationSettings));
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (Operation != null) { request.AddQueryParameter("operation", Operation.ToString()); }
            request.Resource = AddPbrsectionWithRulesCreateWithRulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + AddPbrsectionWithRulesCreateWithRulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionRuleListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionRuleListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRRuleType UpdatePbrrule(string SectionId, string RuleId, NSXTPBRRuleType Pbrrule)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (RuleId == null) { throw new System.ArgumentNullException("RuleId cannot be null"); }
            if (Pbrrule == null) { throw new System.ArgumentNullException("Pbrrule cannot be null"); }
            NSXTPBRRuleType returnValue = default(NSXTPBRRuleType);
            StringBuilder UpdatePbrruleServiceURL = new StringBuilder("/pbr/sections/{section-id}/rules/{rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePbrruleServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdatePbrruleServiceURL.Replace("{rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(RuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Pbrrule, defaultSerializationSettings));
            request.Resource = UpdatePbrruleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePbrruleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePbrrule(string SectionId, string RuleId)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (RuleId == null) { throw new System.ArgumentNullException("RuleId cannot be null"); }
            
            StringBuilder DeletePbrruleServiceURL = new StringBuilder("/pbr/sections/{section-id}/rules/{rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePbrruleServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePbrruleServiceURL.Replace("{rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(RuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePbrruleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePbrruleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRRuleType GetPbrrule(string SectionId, string RuleId)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (RuleId == null) { throw new System.ArgumentNullException("RuleId cannot be null"); }
            NSXTPBRRuleType returnValue = default(NSXTPBRRuleType);
            StringBuilder GetPbrruleServiceURL = new StringBuilder("/pbr/sections/{section-id}/rules/{rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPbrruleServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPbrruleServiceURL.Replace("{rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(RuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPbrruleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPbrruleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRRuleType RevisePbrruleRevise(string SectionId, string RuleId, NSXTPBRRuleType Pbrrule, string? Id = null, string? Operation = null)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (RuleId == null) { throw new System.ArgumentNullException("RuleId cannot be null"); }
            if (Pbrrule == null) { throw new System.ArgumentNullException("Pbrrule cannot be null"); }
            NSXTPBRRuleType returnValue = default(NSXTPBRRuleType);
            StringBuilder RevisePbrruleReviseServiceURL = new StringBuilder("/pbr/sections/{section-id}/rules/{rule-id}?action=revise");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            RevisePbrruleReviseServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            RevisePbrruleReviseServiceURL.Replace("{rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(RuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Pbrrule, defaultSerializationSettings));
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (Operation != null) { request.AddQueryParameter("operation", Operation.ToString()); }
            request.Resource = RevisePbrruleReviseServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + RevisePbrruleReviseServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionRuleListType GetPbrsectionWithRulesListWithRules(string SectionId)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            NSXTPBRSectionRuleListType returnValue = default(NSXTPBRSectionRuleListType);
            StringBuilder GetPbrsectionWithRulesListWithRulesServiceURL = new StringBuilder("/pbr/sections/{section-id}?action=list_with_rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            GetPbrsectionWithRulesListWithRulesServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPbrsectionWithRulesListWithRulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + GetPbrsectionWithRulesListWithRulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionRuleListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionRuleListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionType AddPbrsection(NSXTPBRSectionType Pbrsection, string? Id = null, string? Operation = null)
        {
            if (Pbrsection == null) { throw new System.ArgumentNullException("Pbrsection cannot be null"); }
            NSXTPBRSectionType returnValue = default(NSXTPBRSectionType);
            StringBuilder AddPbrsectionServiceURL = new StringBuilder("/pbr/sections");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(Pbrsection, defaultSerializationSettings));
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (Operation != null) { request.AddQueryParameter("operation", Operation.ToString()); }
            request.Resource = AddPbrsectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + AddPbrsectionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionListResultType ListPbrsections(string? AppliedTos = null, string? Cursor = null, string? Destinations = null, string? ExcludeAppliedToType = null, string? FilterType = null, string? IncludeAppliedToType = null, string? IncludedFields = null, long? PageSize = null, string? Services = null, bool? SortAscending = null, string? SortBy = null, string? Sources = null)
        {
            NSXTPBRSectionListResultType returnValue = default(NSXTPBRSectionListResultType);
            StringBuilder ListPbrsectionsServiceURL = new StringBuilder("/pbr/sections");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (AppliedTos != null) { request.AddQueryParameter("applied_tos", AppliedTos.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Destinations != null) { request.AddQueryParameter("destinations", Destinations.ToString()); }
            if (ExcludeAppliedToType != null) { request.AddQueryParameter("exclude_applied_to_type", ExcludeAppliedToType.ToString()); }
            if (FilterType != null) { request.AddQueryParameter("filter_type", FilterType.ToString()); }
            if (IncludeAppliedToType != null) { request.AddQueryParameter("include_applied_to_type", IncludeAppliedToType.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Services != null) { request.AddQueryParameter("services", Services.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Sources != null) { request.AddQueryParameter("sources", Sources.ToString()); }
            request.Resource = ListPbrsectionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPbrsectionsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionRuleListType RevisePbrsectionWithRulesReviseWithRules(string SectionId, NSXTPBRSectionRuleListType PbrsectionRuleList, string? Id = null, string? Operation = null)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (PbrsectionRuleList == null) { throw new System.ArgumentNullException("PbrsectionRuleList cannot be null"); }
            NSXTPBRSectionRuleListType returnValue = default(NSXTPBRSectionRuleListType);
            StringBuilder RevisePbrsectionWithRulesReviseWithRulesServiceURL = new StringBuilder("/pbr/sections/{section-id}?action=revise_with_rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            RevisePbrsectionWithRulesReviseWithRulesServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PbrsectionRuleList, defaultSerializationSettings));
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (Operation != null) { request.AddQueryParameter("operation", Operation.ToString()); }
            request.Resource = RevisePbrsectionWithRulesReviseWithRulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + RevisePbrsectionWithRulesReviseWithRulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionRuleListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionRuleListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRRuleListType AddPbrrulesInSectionCreateMultiple(string SectionId, NSXTPBRRuleListType PbrruleList, string? Id = null, string? Operation = null)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (PbrruleList == null) { throw new System.ArgumentNullException("PbrruleList cannot be null"); }
            NSXTPBRRuleListType returnValue = default(NSXTPBRRuleListType);
            StringBuilder AddPbrrulesInSectionCreateMultipleServiceURL = new StringBuilder("/pbr/sections/{section-id}/rules?action=create_multiple");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            AddPbrrulesInSectionCreateMultipleServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PbrruleList, defaultSerializationSettings));
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (Operation != null) { request.AddQueryParameter("operation", Operation.ToString()); }
            request.Resource = AddPbrrulesInSectionCreateMultipleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + AddPbrrulesInSectionCreateMultipleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRRuleListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRRuleListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionType RevisePbrsectionRevise(string SectionId, NSXTPBRSectionType Pbrsection, string? Id = null, string? Operation = null)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (Pbrsection == null) { throw new System.ArgumentNullException("Pbrsection cannot be null"); }
            NSXTPBRSectionType returnValue = default(NSXTPBRSectionType);
            StringBuilder RevisePbrsectionReviseServiceURL = new StringBuilder("/pbr/sections/{section-id}?action=revise");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            RevisePbrsectionReviseServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Pbrsection, defaultSerializationSettings));
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (Operation != null) { request.AddQueryParameter("operation", Operation.ToString()); }
            request.Resource = RevisePbrsectionReviseServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + RevisePbrsectionReviseServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRRuleType AddPbrruleInSection(string SectionId, NSXTPBRRuleType Pbrrule, string? Id = null, string? Operation = null)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (Pbrrule == null) { throw new System.ArgumentNullException("Pbrrule cannot be null"); }
            NSXTPBRRuleType returnValue = default(NSXTPBRRuleType);
            StringBuilder AddPbrruleInSectionServiceURL = new StringBuilder("/pbr/sections/{section-id}/rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            AddPbrruleInSectionServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Pbrrule, defaultSerializationSettings));
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (Operation != null) { request.AddQueryParameter("operation", Operation.ToString()); }
            request.Resource = AddPbrruleInSectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + AddPbrruleInSectionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRRuleListResultType GetPbrrules(string SectionId, string? AppliedTos = null, string? Cursor = null, string? Destinations = null, string? FilterType = null, string? IncludedFields = null, long? PageSize = null, string? Services = null, bool? SortAscending = null, string? SortBy = null, string? Sources = null)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            NSXTPBRRuleListResultType returnValue = default(NSXTPBRRuleListResultType);
            StringBuilder GetPbrrulesServiceURL = new StringBuilder("/pbr/sections/{section-id}/rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPbrrulesServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (AppliedTos != null) { request.AddQueryParameter("applied_tos", AppliedTos.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Destinations != null) { request.AddQueryParameter("destinations", Destinations.ToString()); }
            if (FilterType != null) { request.AddQueryParameter("filter_type", FilterType.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Services != null) { request.AddQueryParameter("services", Services.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Sources != null) { request.AddQueryParameter("sources", Sources.ToString()); }
            request.Resource = GetPbrrulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPbrrulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRRuleListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRRuleListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPBRSectionRuleListType UpdatePbrsectionWithRulesUpdateWithRules(string SectionId, NSXTPBRSectionRuleListType PbrsectionRuleList)
        {
            if (SectionId == null) { throw new System.ArgumentNullException("SectionId cannot be null"); }
            if (PbrsectionRuleList == null) { throw new System.ArgumentNullException("PbrsectionRuleList cannot be null"); }
            NSXTPBRSectionRuleListType returnValue = default(NSXTPBRSectionRuleListType);
            StringBuilder UpdatePbrsectionWithRulesUpdateWithRulesServiceURL = new StringBuilder("/pbr/sections/{section-id}?action=update_with_rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePbrsectionWithRulesUpdateWithRulesServiceURL.Replace("{section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PbrsectionRuleList, defaultSerializationSettings));
            request.Resource = UpdatePbrsectionWithRulesUpdateWithRulesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + UpdatePbrsectionWithRulesUpdateWithRulesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPBRSectionRuleListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPBRSectionRuleListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
