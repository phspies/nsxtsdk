// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class PortMirroring
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PortMirroring(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringSessionType CreatePortMirroringSessions(NSXTPortMirroringSessionType PortMirroringSession)
        {
            if (PortMirroringSession == null) { throw new System.ArgumentNullException("PortMirroringSession cannot be null"); }
            NSXTPortMirroringSessionType returnValue = default(NSXTPortMirroringSessionType);
            StringBuilder CreatePortMirroringSessionsServiceURL = new StringBuilder("/mirror-sessions");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PortMirroringSession, defaultSerializationSettings));
            request.Resource = CreatePortMirroringSessionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreatePortMirroringSessionsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringSessionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringSessionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringSessionListResultType ListPortMirroringSession(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPortMirroringSessionListResultType returnValue = default(NSXTPortMirroringSessionListResultType);
            StringBuilder ListPortMirroringSessionServiceURL = new StringBuilder("/mirror-sessions");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPortMirroringSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPortMirroringSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringSessionListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringSessionListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringSessionType UpdatePortMirroringSession(string MirrorSessionId, NSXTPortMirroringSessionType PortMirroringSession)
        {
            if (MirrorSessionId == null) { throw new System.ArgumentNullException("MirrorSessionId cannot be null"); }
            if (PortMirroringSession == null) { throw new System.ArgumentNullException("PortMirroringSession cannot be null"); }
            NSXTPortMirroringSessionType returnValue = default(NSXTPortMirroringSessionType);
            StringBuilder UpdatePortMirroringSessionServiceURL = new StringBuilder("/mirror-sessions/{mirror-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePortMirroringSessionServiceURL.Replace("{mirror-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MirrorSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortMirroringSession, defaultSerializationSettings));
            request.Resource = UpdatePortMirroringSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePortMirroringSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringSessionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringSessionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringSessionType GetPortMirroringSession(string MirrorSessionId)
        {
            if (MirrorSessionId == null) { throw new System.ArgumentNullException("MirrorSessionId cannot be null"); }
            NSXTPortMirroringSessionType returnValue = default(NSXTPortMirroringSessionType);
            StringBuilder GetPortMirroringSessionServiceURL = new StringBuilder("/mirror-sessions/{mirror-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPortMirroringSessionServiceURL.Replace("{mirror-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MirrorSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPortMirroringSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPortMirroringSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringSessionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringSessionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePortMirroringSession(string MirrorSessionId)
        {
            if (MirrorSessionId == null) { throw new System.ArgumentNullException("MirrorSessionId cannot be null"); }
            
            StringBuilder DeletePortMirroringSessionServiceURL = new StringBuilder("/mirror-sessions/{mirror-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePortMirroringSessionServiceURL.Replace("{mirror-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MirrorSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePortMirroringSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePortMirroringSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMirrorStackStatusListResultType GetMirrorStackStatus(string MirrorSessionId, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (MirrorSessionId == null) { throw new System.ArgumentNullException("MirrorSessionId cannot be null"); }
            NSXTMirrorStackStatusListResultType returnValue = default(NSXTMirrorStackStatusListResultType);
            StringBuilder GetMirrorStackStatusServiceURL = new StringBuilder("/mirror-sessions/{mirror-session-id}/mirror-stack-status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetMirrorStackStatusServiceURL.Replace("{mirror-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MirrorSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetMirrorStackStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetMirrorStackStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTMirrorStackStatusListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTMirrorStackStatusListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void VerifyPortMirroringSession(string MirrorSessionId)
        {
            if (MirrorSessionId == null) { throw new System.ArgumentNullException("MirrorSessionId cannot be null"); }
            
            StringBuilder VerifyPortMirroringSessionServiceURL = new StringBuilder("/mirror-sessions/{mirror-session-id}?action=verify");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            VerifyPortMirroringSessionServiceURL.Replace("{mirror-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MirrorSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = VerifyPortMirroringSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + VerifyPortMirroringSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
    }
}
