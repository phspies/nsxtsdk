// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class Migration
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public Migration(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLogicalConstructMigrationStatsListResultType GetLogicalConstructMigrationStats(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLogicalConstructMigrationStatsListResultType returnValue = default(NSXTLogicalConstructMigrationStatsListResultType);
            StringBuilder GetLogicalConstructMigrationStatsServiceURL = new StringBuilder("/migration/logical-constructs/stats");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetLogicalConstructMigrationStatsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTLogicalConstructMigrationStatsListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationSwitchListResultType GetMigratedSwitches(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTMigrationSwitchListResultType returnValue = default(NSXTMigrationSwitchListResultType);
            StringBuilder GetMigratedSwitchesServiceURL = new StringBuilder("/migration/migrated-switches");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetMigratedSwitchesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationSwitchListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationSwitchInfoType SetMigrationSwitch(NSXTMigrationSwitchInfoType MigrationSwitchInfo)
        {
            if (MigrationSwitchInfo == null) { throw new System.ArgumentNullException("MigrationSwitchInfo cannot be null"); }
            NSXTMigrationSwitchInfoType returnValue = default(NSXTMigrationSwitchInfoType);
            StringBuilder SetMigrationSwitchServiceURL = new StringBuilder("/migration/switch");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(MigrationSwitchInfo, defaultSerializationSettings));
            request.Resource = SetMigrationSwitchServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationSwitchInfoType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationSwitchInfoType GetMigrationSwitch()
        {
            NSXTMigrationSwitchInfoType returnValue = default(NSXTMigrationSwitchInfoType);
            StringBuilder GetMigrationSwitchServiceURL = new StringBuilder("/migration/switch");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetMigrationSwitchServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationSwitchInfoType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationFeedbackSummaryListResultType GetFeedbackSummary(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTMigrationFeedbackSummaryListResultType returnValue = default(NSXTMigrationFeedbackSummaryListResultType);
            StringBuilder GetFeedbackSummaryServiceURL = new StringBuilder("/migration/feedback-summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetFeedbackSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationFeedbackSummaryListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void AbortMigrationAbort()
        {
            
            StringBuilder AbortMigrationAbortServiceURL = new StringBuilder("/migration/plan?action=abort");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = AbortMigrationAbortServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void StartMigrationStart()
        {
            
            StringBuilder StartMigrationStartServiceURL = new StringBuilder("/migration/plan?action=start");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = StartMigrationStartServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitTypeStatsListType GetMigrationUnitsStats(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, bool? Sync = null)
        {
            NSXTMigrationUnitTypeStatsListType returnValue = default(NSXTMigrationUnitTypeStatsListType);
            StringBuilder GetMigrationUnitsStatsServiceURL = new StringBuilder("/migration/migration-units-stats");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Sync != null) { request.AddQueryParameter("sync", Sync.ToString()); }
            request.Resource = GetMigrationUnitsStatsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitTypeStatsListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void FinishMigrationFinish()
        {
            
            StringBuilder FinishMigrationFinishServiceURL = new StringBuilder("/migration/plan?action=finish");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = FinishMigrationFinishServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void FinalizeInfraFinalizeInfra()
        {
            
            StringBuilder FinalizeInfraFinalizeInfraServiceURL = new StringBuilder("/migration?action=finalize_infra");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = FinalizeInfraFinalizeInfraServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void AcceptRecommendedValueInFeedbackAcceptRecommended()
        {
            
            StringBuilder AcceptRecommendedValueInFeedbackAcceptRecommendedServiceURL = new StringBuilder("/migration/feedback-response?action=accept-recommended");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = AcceptRecommendedValueInFeedbackAcceptRecommendedServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PostVmGroupMigratePostMigrate(NSXTPostVmGroupMigrationSpecType PostVmGroupMigrationSpec)
        {
            if (PostVmGroupMigrationSpec == null) { throw new System.ArgumentNullException("PostVmGroupMigrationSpec cannot be null"); }
            
            StringBuilder PostVmGroupMigratePostMigrateServiceURL = new StringBuilder("/migration/vmgroup?action=post_migrate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PostVmGroupMigrationSpec, defaultSerializationSettings));
            request.Resource = PostVmGroupMigratePostMigrateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void ReorderMigrationUnitReorder(string GroupId, string MigrationUnitId, NSXTReorderMigrationRequestType ReorderMigrationRequest)
        {
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (MigrationUnitId == null) { throw new System.ArgumentNullException("MigrationUnitId cannot be null"); }
            if (ReorderMigrationRequest == null) { throw new System.ArgumentNullException("ReorderMigrationRequest cannot be null"); }
            
            StringBuilder ReorderMigrationUnitReorderServiceURL = new StringBuilder("/migration/migration-unit-groups/{group-id}/migration-unit/{migration-unit-id}?action=reorder");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            ReorderMigrationUnitReorderServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            ReorderMigrationUnitReorderServiceURL.Replace("{migration-unit-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MigrationUnitId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ReorderMigrationRequest, defaultSerializationSettings));
            request.Resource = ReorderMigrationUnitReorderServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void ResetMigrationPlanReset(string ComponentType)
        {
            if (ComponentType == null) { throw new System.ArgumentNullException("ComponentType cannot be null"); }
            
            StringBuilder ResetMigrationPlanResetServiceURL = new StringBuilder("/migration/plan?action=reset");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            request.Resource = ResetMigrationPlanResetServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitGroupStatusListResultType GetMigrationUnitGroupsStatus(string? ComponentType = null, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTMigrationUnitGroupStatusListResultType returnValue = default(NSXTMigrationUnitGroupStatusListResultType);
            StringBuilder GetMigrationUnitGroupsStatusServiceURL = new StringBuilder("/migration/migration-unit-groups-status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetMigrationUnitGroupsStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitGroupStatusListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PauseMigrationPause()
        {
            
            StringBuilder PauseMigrationPauseServiceURL = new StringBuilder("/migration/plan?action=pause");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = PauseMigrationPauseServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitListType AddMigrationUnitsToGroupAddMigrationUnits(string GroupId, NSXTMigrationUnitListType MigrationUnitList)
        {
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (MigrationUnitList == null) { throw new System.ArgumentNullException("MigrationUnitList cannot be null"); }
            NSXTMigrationUnitListType returnValue = default(NSXTMigrationUnitListType);
            StringBuilder AddMigrationUnitsToGroupAddMigrationUnitsServiceURL = new StringBuilder("/migration/migration-unit-groups/{group-id}?action=add_migration_units");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            AddMigrationUnitsToGroupAddMigrationUnitsServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(MigrationUnitList, defaultSerializationSettings));
            request.Resource = AddMigrationUnitsToGroupAddMigrationUnitsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitStatusListResultType GetMigrationUnitGroupStatus(string GroupId, string? Cursor = null, bool? HasErrors = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTMigrationUnitStatusListResultType returnValue = default(NSXTMigrationUnitStatusListResultType);
            StringBuilder GetMigrationUnitGroupStatusServiceURL = new StringBuilder("/migration/migration-unit-groups/{group-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetMigrationUnitGroupStatusServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (HasErrors != null) { request.AddQueryParameter("has_errors", HasErrors.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetMigrationUnitGroupStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitStatusListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitGroupType CreateMigrationUnitGroup(NSXTMigrationUnitGroupType MigrationUnitGroup)
        {
            if (MigrationUnitGroup == null) { throw new System.ArgumentNullException("MigrationUnitGroup cannot be null"); }
            NSXTMigrationUnitGroupType returnValue = default(NSXTMigrationUnitGroupType);
            StringBuilder CreateMigrationUnitGroupServiceURL = new StringBuilder("/migration/migration-unit-groups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(MigrationUnitGroup, defaultSerializationSettings));
            request.Resource = CreateMigrationUnitGroupServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitGroupType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitGroupListResultType GetMigrationUnitGroups(string? ComponentType = null, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, bool? Summary = null, bool? Sync = null)
        {
            NSXTMigrationUnitGroupListResultType returnValue = default(NSXTMigrationUnitGroupListResultType);
            StringBuilder GetMigrationUnitGroupsServiceURL = new StringBuilder("/migration/migration-unit-groups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Summary != null) { request.AddQueryParameter("summary", Summary.ToString()); }
            if (Sync != null) { request.AddQueryParameter("sync", Sync.ToString()); }
            request.Resource = GetMigrationUnitGroupsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitGroupListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitAggregateInfoListResultType GetMigrationUnitAggregateInfo(string? ComponentType = null, string? Cursor = null, string? GroupId = null, bool? HasErrors = null, string? IncludedFields = null, string? Metadata = null, long? PageSize = null, string? SelectionStatus = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTMigrationUnitAggregateInfoListResultType returnValue = default(NSXTMigrationUnitAggregateInfoListResultType);
            StringBuilder GetMigrationUnitAggregateInfoServiceURL = new StringBuilder("/migration/migration-units/aggregate-info");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (GroupId != null) { request.AddQueryParameter("group_id", GroupId.ToString()); }
            if (HasErrors != null) { request.AddQueryParameter("has_errors", HasErrors.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (Metadata != null) { request.AddQueryParameter("metadata", Metadata.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SelectionStatus != null) { request.AddQueryParameter("selection_status", SelectionStatus.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetMigrationUnitAggregateInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitAggregateInfoListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void StartRollbackMigrationRollback()
        {
            
            StringBuilder StartRollbackMigrationRollbackServiceURL = new StringBuilder("/migration/plan?action=rollback");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = StartRollbackMigrationRollbackServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeSummaryListType GetMigrationNodesSummary()
        {
            NSXTNodeSummaryListType returnValue = default(NSXTNodeSummaryListType);
            StringBuilder GetMigrationNodesSummaryServiceURL = new StringBuilder("/migration/nodes-summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetMigrationNodesSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeSummaryListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGroupedMigrationFeedbackRequestListResultType GetGroupedFeedbackRequests(string? Category = null, string? Cursor = null, string? Hash = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? State = null, string? SubCategory = null)
        {
            NSXTGroupedMigrationFeedbackRequestListResultType returnValue = default(NSXTGroupedMigrationFeedbackRequestListResultType);
            StringBuilder GetGroupedFeedbackRequestsServiceURL = new StringBuilder("/migration/grouped-feedback-requests");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Category != null) { request.AddQueryParameter("category", Category.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Hash != null) { request.AddQueryParameter("hash", Hash.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (State != null) { request.AddQueryParameter("state", State.ToString()); }
            if (SubCategory != null) { request.AddQueryParameter("sub_category", SubCategory.ToString()); }
            request.Resource = GetGroupedFeedbackRequestsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGroupedMigrationFeedbackRequestListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeInfoListResultType GetMigrationNodes(string? ComponentType = null, string? ComponentVersion = null, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTNodeInfoListResultType returnValue = default(NSXTNodeInfoListResultType);
            StringBuilder GetMigrationNodesServiceURL = new StringBuilder("/migration/nodes");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            if (ComponentVersion != null) { request.AddQueryParameter("component_version", ComponentVersion.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetMigrationNodesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeInfoListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationSetupInfoType UpdateNsxvSetupDetails(NSXTMigrationSetupInfoType MigrationSetupInfo)
        {
            if (MigrationSetupInfo == null) { throw new System.ArgumentNullException("MigrationSetupInfo cannot be null"); }
            NSXTMigrationSetupInfoType returnValue = default(NSXTMigrationSetupInfoType);
            StringBuilder UpdateNsxvSetupDetailsServiceURL = new StringBuilder("/migration/setup");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(MigrationSetupInfo, defaultSerializationSettings));
            request.Resource = UpdateNsxvSetupDetailsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationSetupInfoType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationSetupInfoType GetNsxvSetupDetails()
        {
            NSXTMigrationSetupInfoType returnValue = default(NSXTMigrationSetupInfoType);
            StringBuilder GetNsxvSetupDetailsServiceURL = new StringBuilder("/migration/setup");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetNsxvSetupDetailsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationSetupInfoType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void ReorderMigrationUnitGroupReorder(string GroupId, NSXTReorderMigrationRequestType ReorderMigrationRequest)
        {
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (ReorderMigrationRequest == null) { throw new System.ArgumentNullException("ReorderMigrationRequest cannot be null"); }
            
            StringBuilder ReorderMigrationUnitGroupReorderServiceURL = new StringBuilder("/migration/migration-unit-groups/{group-id}?action=reorder");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            ReorderMigrationUnitGroupReorderServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ReorderMigrationRequest, defaultSerializationSettings));
            request.Resource = ReorderMigrationUnitGroupReorderServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DownloadMigrationData(string FileType)
        {
            if (FileType == null) { throw new System.ArgumentNullException("FileType cannot be null"); }
            
            StringBuilder DownloadMigrationDataServiceURL = new StringBuilder("/migration/data/download");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (FileType != null) { request.AddQueryParameter("file_type", FileType.ToString()); }
            request.Resource = DownloadMigrationDataServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationDataInfoType GetMigrationDataInfo(string FileType)
        {
            if (FileType == null) { throw new System.ArgumentNullException("FileType cannot be null"); }
            NSXTMigrationDataInfoType returnValue = default(NSXTMigrationDataInfoType);
            StringBuilder GetMigrationDataInfoServiceURL = new StringBuilder("/migration/data");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (FileType != null) { request.AddQueryParameter("file_type", FileType.ToString()); }
            request.Resource = GetMigrationDataInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationDataInfoType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitGroupType UpdateMigrationUnitGroup(string GroupId, NSXTMigrationUnitGroupType MigrationUnitGroup)
        {
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (MigrationUnitGroup == null) { throw new System.ArgumentNullException("MigrationUnitGroup cannot be null"); }
            NSXTMigrationUnitGroupType returnValue = default(NSXTMigrationUnitGroupType);
            StringBuilder UpdateMigrationUnitGroupServiceURL = new StringBuilder("/migration/migration-unit-groups/{group-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateMigrationUnitGroupServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(MigrationUnitGroup, defaultSerializationSettings));
            request.Resource = UpdateMigrationUnitGroupServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitGroupType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitGroupType GetMigrationUnitGroup(string GroupId, bool? Summary = null)
        {
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTMigrationUnitGroupType returnValue = default(NSXTMigrationUnitGroupType);
            StringBuilder GetMigrationUnitGroupServiceURL = new StringBuilder("/migration/migration-unit-groups/{group-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetMigrationUnitGroupServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Summary != null) { request.AddQueryParameter("summary", Summary.ToString()); }
            request.Resource = GetMigrationUnitGroupServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitGroupType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteMigrationUnitGroup(string GroupId)
        {
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            
            StringBuilder DeleteMigrationUnitGroupServiceURL = new StringBuilder("/migration/migration-unit-groups/{group-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteMigrationUnitGroupServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteMigrationUnitGroupServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationSummaryType GetMigrationSummary()
        {
            NSXTMigrationSummaryType returnValue = default(NSXTMigrationSummaryType);
            StringBuilder GetMigrationSummaryServiceURL = new StringBuilder("/migration/summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetMigrationSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationSummaryType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationPlanSettingsType UpdateMigrationPlanSettings(string ComponentType, NSXTMigrationPlanSettingsType MigrationPlanSettings)
        {
            if (ComponentType == null) { throw new System.ArgumentNullException("ComponentType cannot be null"); }
            if (MigrationPlanSettings == null) { throw new System.ArgumentNullException("MigrationPlanSettings cannot be null"); }
            NSXTMigrationPlanSettingsType returnValue = default(NSXTMigrationPlanSettingsType);
            StringBuilder UpdateMigrationPlanSettingsServiceURL = new StringBuilder("/migration/plan/{component_type}/settings");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateMigrationPlanSettingsServiceURL.Replace("{component_type}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComponentType, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(MigrationPlanSettings, defaultSerializationSettings));
            request.Resource = UpdateMigrationPlanSettingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationPlanSettingsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationPlanSettingsType GetMigrationPlanSettings(string ComponentType)
        {
            if (ComponentType == null) { throw new System.ArgumentNullException("ComponentType cannot be null"); }
            NSXTMigrationPlanSettingsType returnValue = default(NSXTMigrationPlanSettingsType);
            StringBuilder GetMigrationPlanSettingsServiceURL = new StringBuilder("/migration/plan/{component_type}/settings");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetMigrationPlanSettingsServiceURL.Replace("{component_type}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComponentType, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetMigrationPlanSettingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationPlanSettingsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void ContinueMigrationContinue(bool? Skip = null)
        {
            
            StringBuilder ContinueMigrationContinueServiceURL = new StringBuilder("/migration/plan?action=continue");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (Skip != null) { request.AddQueryParameter("skip", Skip.ToString()); }
            request.Resource = ContinueMigrationContinueServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationStatusType GetMigrationStatusSummary(string? ComponentType = null)
        {
            NSXTMigrationStatusType returnValue = default(NSXTMigrationStatusType);
            StringBuilder GetMigrationStatusSummaryServiceURL = new StringBuilder("/migration/status-summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            request.Resource = GetMigrationStatusSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void UpdateFeedbackResponse(NSXTMigrationFeedbackResponseListType MigrationFeedbackResponseList)
        {
            if (MigrationFeedbackResponseList == null) { throw new System.ArgumentNullException("MigrationFeedbackResponseList cannot be null"); }
            
            StringBuilder UpdateFeedbackResponseServiceURL = new StringBuilder("/migration/feedback-response");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(MigrationFeedbackResponseList, defaultSerializationSettings));
            request.Resource = UpdateFeedbackResponseServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationFeedbackRequestListResultType GetFeedbackRequests(string? Category = null, string? Cursor = null, string? Hash = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? State = null, string? SubCategory = null)
        {
            NSXTMigrationFeedbackRequestListResultType returnValue = default(NSXTMigrationFeedbackRequestListResultType);
            StringBuilder GetFeedbackRequestsServiceURL = new StringBuilder("/migration/feedback-requests");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Category != null) { request.AddQueryParameter("category", Category.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Hash != null) { request.AddQueryParameter("hash", Hash.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (State != null) { request.AddQueryParameter("state", State.ToString()); }
            if (SubCategory != null) { request.AddQueryParameter("sub_category", SubCategory.ToString()); }
            request.Resource = GetFeedbackRequestsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationFeedbackRequestListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PreVmGroupMigratePreMigrate(NSXTPreVmGroupMigrationSpecType PreVmGroupMigrationSpec)
        {
            if (PreVmGroupMigrationSpec == null) { throw new System.ArgumentNullException("PreVmGroupMigrationSpec cannot be null"); }
            
            StringBuilder PreVmGroupMigratePreMigrateServiceURL = new StringBuilder("/migration/vmgroup?action=pre_migrate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PreVmGroupMigrationSpec, defaultSerializationSettings));
            request.Resource = PreVmGroupMigratePreMigrateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationSwitchListResultType GetDiscoveredSwitches(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTMigrationSwitchListResultType returnValue = default(NSXTMigrationSwitchListResultType);
            StringBuilder GetDiscoveredSwitchesServiceURL = new StringBuilder("/migration/discovered-switches");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetDiscoveredSwitchesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationSwitchListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitListResultType GetMigrationUnits(string? ComponentType = null, string? CurrentVersion = null, string? Cursor = null, string? GroupId = null, bool? HasWarnings = null, string? IncludedFields = null, string? Metadata = null, string? MigrationUnitType = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTMigrationUnitListResultType returnValue = default(NSXTMigrationUnitListResultType);
            StringBuilder GetMigrationUnitsServiceURL = new StringBuilder("/migration/migration-units");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            if (CurrentVersion != null) { request.AddQueryParameter("current_version", CurrentVersion.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (GroupId != null) { request.AddQueryParameter("group_id", GroupId.ToString()); }
            if (HasWarnings != null) { request.AddQueryParameter("has_warnings", HasWarnings.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (Metadata != null) { request.AddQueryParameter("metadata", Metadata.ToString()); }
            if (MigrationUnitType != null) { request.AddQueryParameter("migration_unit_type", MigrationUnitType.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetMigrationUnitsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitGroupAggregateInfoListResultType GetMigrationUnitGroupAggregateInfo(string? ComponentType = null, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, bool? Summary = null, bool? Sync = null)
        {
            NSXTMigrationUnitGroupAggregateInfoListResultType returnValue = default(NSXTMigrationUnitGroupAggregateInfoListResultType);
            StringBuilder GetMigrationUnitGroupAggregateInfoServiceURL = new StringBuilder("/migration/migration-unit-groups/aggregate-info");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComponentType != null) { request.AddQueryParameter("component_type", ComponentType.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Summary != null) { request.AddQueryParameter("summary", Summary.ToString()); }
            if (Sync != null) { request.AddQueryParameter("sync", Sync.ToString()); }
            request.Resource = GetMigrationUnitGroupAggregateInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitGroupAggregateInfoListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMigrationUnitType GetMigrationUnit(string MigrationUnitId)
        {
            if (MigrationUnitId == null) { throw new System.ArgumentNullException("MigrationUnitId cannot be null"); }
            NSXTMigrationUnitType returnValue = default(NSXTMigrationUnitType);
            StringBuilder GetMigrationUnitServiceURL = new StringBuilder("/migration/migration-units/{migration-unit-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetMigrationUnitServiceURL.Replace("{migration-unit-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(MigrationUnitId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetMigrationUnitServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMigrationUnitType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
