// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class L2VPN
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public L2VPN(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnSessionType UpdateL2VpnSession(string L2vpnSessionId, NSXTL2VpnSessionType L2VpnSession)
        {
            if (L2vpnSessionId == null) { throw new System.ArgumentNullException("L2vpnSessionId cannot be null"); }
            if (L2VpnSession == null) { throw new System.ArgumentNullException("L2VpnSession cannot be null"); }
            NSXTL2VpnSessionType returnValue = default(NSXTL2VpnSessionType);
            StringBuilder UpdateL2VpnSessionServiceURL = new StringBuilder("/vpn/l2vpn/sessions/{l2vpn-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateL2VpnSessionServiceURL.Replace("{l2vpn-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(L2vpnSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(L2VpnSession, defaultSerializationSettings));
            request.Resource = UpdateL2VpnSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateL2VpnSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnSessionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnSessionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteL2VpnSession(string L2vpnSessionId)
        {
            if (L2vpnSessionId == null) { throw new System.ArgumentNullException("L2vpnSessionId cannot be null"); }
            
            StringBuilder DeleteL2VpnSessionServiceURL = new StringBuilder("/vpn/l2vpn/sessions/{l2vpn-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteL2VpnSessionServiceURL.Replace("{l2vpn-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(L2vpnSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteL2VpnSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteL2VpnSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnSessionType GetL2VpnSession(string L2vpnSessionId)
        {
            if (L2vpnSessionId == null) { throw new System.ArgumentNullException("L2vpnSessionId cannot be null"); }
            NSXTL2VpnSessionType returnValue = default(NSXTL2VpnSessionType);
            StringBuilder GetL2VpnSessionServiceURL = new StringBuilder("/vpn/l2vpn/sessions/{l2vpn-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetL2VpnSessionServiceURL.Replace("{l2vpn-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(L2vpnSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetL2VpnSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetL2VpnSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnSessionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnSessionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnSessionType CreateL2VpnSession(NSXTL2VpnSessionType L2VpnSession)
        {
            if (L2VpnSession == null) { throw new System.ArgumentNullException("L2VpnSession cannot be null"); }
            NSXTL2VpnSessionType returnValue = default(NSXTL2VpnSessionType);
            StringBuilder CreateL2VpnSessionServiceURL = new StringBuilder("/vpn/l2vpn/sessions");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(L2VpnSession, defaultSerializationSettings));
            request.Resource = CreateL2VpnSessionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateL2VpnSessionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnSessionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnSessionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnSessionListResultType ListL2VpnSessions(string? Cursor = null, string? IncludedFields = null, string? L2vpnServiceId = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTL2VpnSessionListResultType returnValue = default(NSXTL2VpnSessionListResultType);
            StringBuilder ListL2VpnSessionsServiceURL = new StringBuilder("/vpn/l2vpn/sessions");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (L2vpnServiceId != null) { request.AddQueryParameter("l2vpn_service_id", L2vpnServiceId.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListL2VpnSessionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListL2VpnSessionsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnSessionListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnSessionListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnServiceType CreateL2VpnService(NSXTL2VpnServiceType L2VpnService)
        {
            if (L2VpnService == null) { throw new System.ArgumentNullException("L2VpnService cannot be null"); }
            NSXTL2VpnServiceType returnValue = default(NSXTL2VpnServiceType);
            StringBuilder CreateL2VpnServiceServiceURL = new StringBuilder("/vpn/l2vpn/services");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(L2VpnService, defaultSerializationSettings));
            request.Resource = CreateL2VpnServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateL2VpnServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnServiceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnServiceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnServiceListResultType ListL2VpnServices(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTL2VpnServiceListResultType returnValue = default(NSXTL2VpnServiceListResultType);
            StringBuilder ListL2VpnServicesServiceURL = new StringBuilder("/vpn/l2vpn/services");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListL2VpnServicesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListL2VpnServicesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnServiceListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnServiceListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnSessionPeerCodesType GetL2VpnSessionPeerCodes(string L2vpnSessionId)
        {
            if (L2vpnSessionId == null) { throw new System.ArgumentNullException("L2vpnSessionId cannot be null"); }
            NSXTL2VpnSessionPeerCodesType returnValue = default(NSXTL2VpnSessionPeerCodesType);
            StringBuilder GetL2VpnSessionPeerCodesServiceURL = new StringBuilder("/vpn/l2vpn/sessions/{l2vpn-session-id}/peer-codes");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetL2VpnSessionPeerCodesServiceURL.Replace("{l2vpn-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(L2vpnSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetL2VpnSessionPeerCodesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetL2VpnSessionPeerCodesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnSessionPeerCodesType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnSessionPeerCodesType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnServiceType UpdateL2VpnService(string L2vpnServiceId, NSXTL2VpnServiceType L2VpnService)
        {
            if (L2vpnServiceId == null) { throw new System.ArgumentNullException("L2vpnServiceId cannot be null"); }
            if (L2VpnService == null) { throw new System.ArgumentNullException("L2VpnService cannot be null"); }
            NSXTL2VpnServiceType returnValue = default(NSXTL2VpnServiceType);
            StringBuilder UpdateL2VpnServiceServiceURL = new StringBuilder("/vpn/l2vpn/services/{l2vpn-service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateL2VpnServiceServiceURL.Replace("{l2vpn-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(L2vpnServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(L2VpnService, defaultSerializationSettings));
            request.Resource = UpdateL2VpnServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateL2VpnServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnServiceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnServiceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteL2VpnService(string L2vpnServiceId, bool? Force = null)
        {
            if (L2vpnServiceId == null) { throw new System.ArgumentNullException("L2vpnServiceId cannot be null"); }
            
            StringBuilder DeleteL2VpnServiceServiceURL = new StringBuilder("/vpn/l2vpn/services/{l2vpn-service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteL2VpnServiceServiceURL.Replace("{l2vpn-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(L2vpnServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteL2VpnServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteL2VpnServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VpnServiceType GetL2VpnService(string L2vpnServiceId)
        {
            if (L2vpnServiceId == null) { throw new System.ArgumentNullException("L2vpnServiceId cannot be null"); }
            NSXTL2VpnServiceType returnValue = default(NSXTL2VpnServiceType);
            StringBuilder GetL2VpnServiceServiceURL = new StringBuilder("/vpn/l2vpn/services/{l2vpn-service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetL2VpnServiceServiceURL.Replace("{l2vpn-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(L2vpnServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetL2VpnServiceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetL2VpnServiceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VpnServiceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VpnServiceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
