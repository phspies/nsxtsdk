// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class PortConnection
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PortConnection(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortConnectionEntitiesType GetForwardingPath(string LportId, string PeerPortId)
        {
            if (LportId == null) { throw new System.ArgumentNullException("LportId cannot be null"); }
            if (PeerPortId == null) { throw new System.ArgumentNullException("PeerPortId cannot be null"); }
            NSXTPortConnectionEntitiesType returnValue = default(NSXTPortConnectionEntitiesType);
            StringBuilder GetForwardingPathServiceURL = new StringBuilder("/logical-ports/{lport-id}/forwarding-path");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetForwardingPathServiceURL.Replace("{lport-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LportId, System.Globalization.CultureInfo.InvariantCulture)));
            if (PeerPortId != null) { request.AddQueryParameter("peer_port_id", PeerPortId.ToString()); }
            request.Resource = GetForwardingPathServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPortConnectionEntitiesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
