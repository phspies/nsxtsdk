// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class LiveTrace
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public LiveTrace(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GetReversePktCapFileProxy(string LivetraceSessionId)
        {
            if (LivetraceSessionId == null) { throw new System.ArgumentNullException("LivetraceSessionId cannot be null"); }
            
            StringBuilder GetReversePktCapFileProxyServiceURL = new StringBuilder("/livetraces/{livetrace-session-id}/proxy/reverse/capturefile");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetReversePktCapFileProxyServiceURL.Replace("{livetrace-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LivetraceSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetReversePktCapFileProxyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetReversePktCapFileProxyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLiveTraceStatusType CreateLiveTrace(NSXTLiveTraceRequestType LiveTraceRequest)
        {
            if (LiveTraceRequest == null) { throw new System.ArgumentNullException("LiveTraceRequest cannot be null"); }
            NSXTLiveTraceStatusType returnValue = default(NSXTLiveTraceStatusType);
            StringBuilder CreateLiveTraceServiceURL = new StringBuilder("/livetraces");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LiveTraceRequest, defaultSerializationSettings));
            request.Resource = CreateLiveTraceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateLiveTraceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLiveTraceStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLiveTraceStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLiveTraceListResultType ListLiveTrace(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLiveTraceListResultType returnValue = default(NSXTLiveTraceListResultType);
            StringBuilder ListLiveTraceServiceURL = new StringBuilder("/livetraces");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLiveTraceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLiveTraceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLiveTraceListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLiveTraceListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GetForwardPktCapFileProxy(string LivetraceSessionId)
        {
            if (LivetraceSessionId == null) { throw new System.ArgumentNullException("LivetraceSessionId cannot be null"); }
            
            StringBuilder GetForwardPktCapFileProxyServiceURL = new StringBuilder("/livetraces/{livetrace-session-id}/proxy/forward/capturefile");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetForwardPktCapFileProxyServiceURL.Replace("{livetrace-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LivetraceSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetForwardPktCapFileProxyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetForwardPktCapFileProxyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLiveTraceStatusType GetLiveTraceStatus(string LivetraceSessionId)
        {
            if (LivetraceSessionId == null) { throw new System.ArgumentNullException("LivetraceSessionId cannot be null"); }
            NSXTLiveTraceStatusType returnValue = default(NSXTLiveTraceStatusType);
            StringBuilder GetLiveTraceStatusServiceURL = new StringBuilder("/livetraces/{livetrace-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLiveTraceStatusServiceURL.Replace("{livetrace-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LivetraceSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetLiveTraceStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLiveTraceStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLiveTraceStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLiveTraceStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLiveTrace(string LivetraceSessionId)
        {
            if (LivetraceSessionId == null) { throw new System.ArgumentNullException("LivetraceSessionId cannot be null"); }
            
            StringBuilder DeleteLiveTraceServiceURL = new StringBuilder("/livetraces/{livetrace-session-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLiveTraceServiceURL.Replace("{livetrace-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LivetraceSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLiveTraceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLiveTraceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLiveTraceResultType GetLiveTraceResult(string LivetraceSessionId, string? ActionType = null, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (LivetraceSessionId == null) { throw new System.ArgumentNullException("LivetraceSessionId cannot be null"); }
            NSXTLiveTraceResultType returnValue = default(NSXTLiveTraceResultType);
            StringBuilder GetLiveTraceResultServiceURL = new StringBuilder("/livetraces/{livetrace-session-id}/results");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLiveTraceResultServiceURL.Replace("{livetrace-session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LivetraceSessionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (ActionType != null) { request.AddQueryParameter("action_type", ActionType.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetLiveTraceResultServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLiveTraceResultServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLiveTraceResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLiveTraceResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
