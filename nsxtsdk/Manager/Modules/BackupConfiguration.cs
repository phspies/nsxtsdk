// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class BackupConfiguration
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public BackupConfiguration(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void RequestOnetimeInventorySummarySummarizeInventoryToRemote()
        {
            
            StringBuilder RequestOnetimeInventorySummarySummarizeInventoryToRemoteServiceURL = new StringBuilder("/cluster?action=summarize_inventory_to_remote");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = RequestOnetimeInventorySummarySummarizeInventoryToRemoteServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBackupOperationHistoryType GetBackupHistory()
        {
            NSXTBackupOperationHistoryType returnValue = default(NSXTBackupOperationHistoryType);
            StringBuilder GetBackupHistoryServiceURL = new StringBuilder("/cluster/backups/history");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetBackupHistoryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBackupOperationHistoryType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void RequestOnetimeBackupBackupToRemote(string? FrameType = null, string? SiteId = null)
        {
            
            StringBuilder RequestOnetimeBackupBackupToRemoteServiceURL = new StringBuilder("/cluster?action=backup_to_remote");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (FrameType != null) { request.AddQueryParameter("frame_type", FrameType.ToString()); }
            if (SiteId != null) { request.AddQueryParameter("site_id", SiteId.ToString()); }
            request.Resource = RequestOnetimeBackupBackupToRemoteServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCurrentBackupOperationStatusType GetBackupStatus()
        {
            NSXTCurrentBackupOperationStatusType returnValue = default(NSXTCurrentBackupOperationStatusType);
            StringBuilder GetBackupStatusServiceURL = new StringBuilder("/cluster/backups/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetBackupStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCurrentBackupOperationStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRemoteServerFingerprintType GetSshFingerprintOfServerRetrieveSshFingerprint(NSXTRemoteServerFingerprintRequestType RemoteServerFingerprintRequest)
        {
            if (RemoteServerFingerprintRequest == null) { throw new System.ArgumentNullException("RemoteServerFingerprintRequest cannot be null"); }
            NSXTRemoteServerFingerprintType returnValue = default(NSXTRemoteServerFingerprintType);
            StringBuilder GetSshFingerprintOfServerRetrieveSshFingerprintServiceURL = new StringBuilder("/cluster/backups?action=retrieve_ssh_fingerprint");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(RemoteServerFingerprintRequest, defaultSerializationSettings));
            request.Resource = GetSshFingerprintOfServerRetrieveSshFingerprintServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRemoteServerFingerprintType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRestoreConfigurationType ConfigureRestoreConfig(NSXTRestoreConfigurationType RestoreConfiguration)
        {
            if (RestoreConfiguration == null) { throw new System.ArgumentNullException("RestoreConfiguration cannot be null"); }
            NSXTRestoreConfigurationType returnValue = default(NSXTRestoreConfigurationType);
            StringBuilder ConfigureRestoreConfigServiceURL = new StringBuilder("/cluster/restore/config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(RestoreConfiguration, defaultSerializationSettings));
            request.Resource = ConfigureRestoreConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRestoreConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRestoreConfigurationType GetRestoreConfig()
        {
            NSXTRestoreConfigurationType returnValue = default(NSXTRestoreConfigurationType);
            StringBuilder GetRestoreConfigServiceURL = new StringBuilder("/cluster/restore/config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetRestoreConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRestoreConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBackupOverviewType GetBackupOverview(string? Cursor = null, string? FrameType = null, string? IncludedFields = null, long? PageSize = null, bool? ShowBackupsList = null, string? SiteId = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTBackupOverviewType returnValue = default(NSXTBackupOverviewType);
            StringBuilder GetBackupOverviewServiceURL = new StringBuilder("/cluster/backups/overview");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (FrameType != null) { request.AddQueryParameter("frame_type", FrameType.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (ShowBackupsList != null) { request.AddQueryParameter("show_backups_list", ShowBackupsList.ToString()); }
            if (SiteId != null) { request.AddQueryParameter("site_id", SiteId.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetBackupOverviewServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBackupOverviewType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBackupConfigurationType ConfigureBackupConfig(NSXTBackupConfigurationType BackupConfiguration, string? FrameType = null, string? SiteId = null)
        {
            if (BackupConfiguration == null) { throw new System.ArgumentNullException("BackupConfiguration cannot be null"); }
            NSXTBackupConfigurationType returnValue = default(NSXTBackupConfigurationType);
            StringBuilder ConfigureBackupConfigServiceURL = new StringBuilder("/cluster/backups/config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(BackupConfiguration, defaultSerializationSettings));
            if (FrameType != null) { request.AddQueryParameter("frame_type", FrameType.ToString()); }
            if (SiteId != null) { request.AddQueryParameter("site_id", SiteId.ToString()); }
            request.Resource = ConfigureBackupConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBackupConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBackupConfigurationType GetBackupConfig()
        {
            NSXTBackupConfigurationType returnValue = default(NSXTBackupConfigurationType);
            StringBuilder GetBackupConfigServiceURL = new StringBuilder("/cluster/backups/config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetBackupConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBackupConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
