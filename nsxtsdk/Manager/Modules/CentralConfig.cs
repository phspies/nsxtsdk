// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class CentralConfig
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public CentralConfig(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCentralNodeConfigProfileType UpdateCentralNodeConfigProfile(string NodeConfigProfileId, NSXTCentralNodeConfigProfileType CentralNodeConfigProfile)
        {
            if (NodeConfigProfileId == null) { throw new System.ArgumentNullException("NodeConfigProfileId cannot be null"); }
            if (CentralNodeConfigProfile == null) { throw new System.ArgumentNullException("CentralNodeConfigProfile cannot be null"); }
            NSXTCentralNodeConfigProfileType returnValue = default(NSXTCentralNodeConfigProfileType);
            StringBuilder UpdateCentralNodeConfigProfileServiceURL = new StringBuilder("/configs/central-config/node-config-profiles/{node-config-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateCentralNodeConfigProfileServiceURL.Replace("{node-config-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeConfigProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(CentralNodeConfigProfile, defaultSerializationSettings));
            request.Resource = UpdateCentralNodeConfigProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateCentralNodeConfigProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTCentralNodeConfigProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTCentralNodeConfigProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCentralNodeConfigProfileListResultType ListCentralNodeConfigProfiles()
        {
            NSXTCentralNodeConfigProfileListResultType returnValue = default(NSXTCentralNodeConfigProfileListResultType);
            StringBuilder ListCentralNodeConfigProfilesServiceURL = new StringBuilder("/configs/central-config/node-config-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListCentralNodeConfigProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListCentralNodeConfigProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTCentralNodeConfigProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTCentralNodeConfigProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCentralNodeConfigProfileType ReadCentralNodeConfigProfile(string ProfileId, bool? ShowSensitiveData = null)
        {
            if (ProfileId == null) { throw new System.ArgumentNullException("ProfileId cannot be null"); }
            NSXTCentralNodeConfigProfileType returnValue = default(NSXTCentralNodeConfigProfileType);
            StringBuilder ReadCentralNodeConfigProfileServiceURL = new StringBuilder("/configs/central-config/node-config-profiles/{profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadCentralNodeConfigProfileServiceURL.Replace("{profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (ShowSensitiveData != null) { request.AddQueryParameter("show_sensitive_data", ShowSensitiveData.ToString()); }
            request.Resource = ReadCentralNodeConfigProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadCentralNodeConfigProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTCentralNodeConfigProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTCentralNodeConfigProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCentralConfigPropertiesType UpdateCentralConfigProperties(NSXTCentralConfigPropertiesType CentralConfigProperties)
        {
            if (CentralConfigProperties == null) { throw new System.ArgumentNullException("CentralConfigProperties cannot be null"); }
            NSXTCentralConfigPropertiesType returnValue = default(NSXTCentralConfigPropertiesType);
            StringBuilder UpdateCentralConfigPropertiesServiceURL = new StringBuilder("/node/central-config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(CentralConfigProperties, defaultSerializationSettings));
            request.Resource = UpdateCentralConfigPropertiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateCentralConfigPropertiesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTCentralConfigPropertiesType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTCentralConfigPropertiesType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCentralConfigPropertiesType ReadCentralConfigProperties()
        {
            NSXTCentralConfigPropertiesType returnValue = default(NSXTCentralConfigPropertiesType);
            StringBuilder ReadCentralConfigPropertiesServiceURL = new StringBuilder("/node/central-config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ReadCentralConfigPropertiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadCentralConfigPropertiesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTCentralConfigPropertiesType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTCentralConfigPropertiesType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
