// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class Lldp
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public Lldp(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTInterfaceNeighborPropertyListResultType ListFabricNodeNeighborProperties(string FabricNodeId)
        {
            if (FabricNodeId == null) { throw new System.ArgumentNullException("FabricNodeId cannot be null"); }
            NSXTInterfaceNeighborPropertyListResultType returnValue = default(NSXTInterfaceNeighborPropertyListResultType);
            StringBuilder ListFabricNodeNeighborPropertiesServiceURL = new StringBuilder("/lldp/fabric-nodes/{fabric-node-id}/interfaces");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListFabricNodeNeighborPropertiesServiceURL.Replace("{fabric-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FabricNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ListFabricNodeNeighborPropertiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListFabricNodeNeighborPropertiesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTInterfaceNeighborPropertyListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTInterfaceNeighborPropertyListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTInterfaceNeighborPropertiesType ReadNeighborProperties(string NodeId, string InterfaceName)
        {
            if (NodeId == null) { throw new System.ArgumentNullException("NodeId cannot be null"); }
            if (InterfaceName == null) { throw new System.ArgumentNullException("InterfaceName cannot be null"); }
            NSXTInterfaceNeighborPropertiesType returnValue = default(NSXTInterfaceNeighborPropertiesType);
            StringBuilder ReadNeighborPropertiesServiceURL = new StringBuilder("/lldp/transport-nodes/{node-id}/interfaces/{interface-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNeighborPropertiesServiceURL.Replace("{node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadNeighborPropertiesServiceURL.Replace("{interface-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(InterfaceName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNeighborPropertiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadNeighborPropertiesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTInterfaceNeighborPropertiesType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTInterfaceNeighborPropertiesType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTInterfaceNeighborPropertiesType ReadFabricNodeNeighborProperties(string FabricNodeId, string InterfaceName)
        {
            if (FabricNodeId == null) { throw new System.ArgumentNullException("FabricNodeId cannot be null"); }
            if (InterfaceName == null) { throw new System.ArgumentNullException("InterfaceName cannot be null"); }
            NSXTInterfaceNeighborPropertiesType returnValue = default(NSXTInterfaceNeighborPropertiesType);
            StringBuilder ReadFabricNodeNeighborPropertiesServiceURL = new StringBuilder("/lldp/fabric-nodes/{fabric-node-id}/interfaces/{interface-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadFabricNodeNeighborPropertiesServiceURL.Replace("{fabric-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FabricNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadFabricNodeNeighborPropertiesServiceURL.Replace("{interface-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(InterfaceName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadFabricNodeNeighborPropertiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadFabricNodeNeighborPropertiesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTInterfaceNeighborPropertiesType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTInterfaceNeighborPropertiesType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTInterfaceNeighborPropertyListResultType ListNeighborProperties(string NodeId)
        {
            if (NodeId == null) { throw new System.ArgumentNullException("NodeId cannot be null"); }
            NSXTInterfaceNeighborPropertyListResultType returnValue = default(NSXTInterfaceNeighborPropertyListResultType);
            StringBuilder ListNeighborPropertiesServiceURL = new StringBuilder("/lldp/transport-nodes/{node-id}/interfaces");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListNeighborPropertiesServiceURL.Replace("{node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ListNeighborPropertiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListNeighborPropertiesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTInterfaceNeighborPropertyListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTInterfaceNeighborPropertyListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
