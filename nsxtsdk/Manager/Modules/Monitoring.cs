// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class Monitoring
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public Monitoring(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void BulkUpdateAlarmsSetStatus(string NewStatus, long? After = null, long? Before = null, string? Cursor = null, string? EventType = null, string? FeatureName = null, string? Id = null, string? IntentPath = null, string? NodeId = null, string? NodeResourceType = null, long? PageSize = null, string? Severity = null, bool? SortAscending = null, string? SortBy = null, string? Status = null, long? SuppressDuration = null)
        {
            if (NewStatus == null) { throw new System.ArgumentNullException("NewStatus cannot be null"); }
            
            StringBuilder BulkUpdateAlarmsSetStatusServiceURL = new StringBuilder("/alarms?action=set_status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (After != null) { request.AddQueryParameter("after", After.ToString()); }
            if (Before != null) { request.AddQueryParameter("before", Before.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EventType != null) { request.AddQueryParameter("event_type", EventType.ToString()); }
            if (FeatureName != null) { request.AddQueryParameter("feature_name", FeatureName.ToString()); }
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (NewStatus != null) { request.AddQueryParameter("new_status", NewStatus.ToString()); }
            if (NodeId != null) { request.AddQueryParameter("node_id", NodeId.ToString()); }
            if (NodeResourceType != null) { request.AddQueryParameter("node_resource_type", NodeResourceType.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Severity != null) { request.AddQueryParameter("severity", Severity.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Status != null) { request.AddQueryParameter("status", Status.ToString()); }
            if (SuppressDuration != null) { request.AddQueryParameter("suppress_duration", SuppressDuration.ToString()); }
            request.Resource = BulkUpdateAlarmsSetStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + BulkUpdateAlarmsSetStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAlarmType GetAlarm(string AlarmId)
        {
            if (AlarmId == null) { throw new System.ArgumentNullException("AlarmId cannot be null"); }
            NSXTAlarmType returnValue = default(NSXTAlarmType);
            StringBuilder GetAlarmServiceURL = new StringBuilder("/alarms/{alarm-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetAlarmServiceURL.Replace("{alarm-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(AlarmId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetAlarmServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetAlarmServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAlarmType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAlarmType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEventListResultType ListEvents()
        {
            NSXTEventListResultType returnValue = default(NSXTEventListResultType);
            StringBuilder ListEventsServiceURL = new StringBuilder("/events");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListEventsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListEventsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEventListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEventListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMonitoringEventType UpdateEvent(string EventId, NSXTMonitoringEventType MonitoringEvent)
        {
            if (EventId == null) { throw new System.ArgumentNullException("EventId cannot be null"); }
            if (MonitoringEvent == null) { throw new System.ArgumentNullException("MonitoringEvent cannot be null"); }
            NSXTMonitoringEventType returnValue = default(NSXTMonitoringEventType);
            StringBuilder UpdateEventServiceURL = new StringBuilder("/events/{event-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateEventServiceURL.Replace("{event-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EventId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(MonitoringEvent, defaultSerializationSettings));
            request.Resource = UpdateEventServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateEventServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTMonitoringEventType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTMonitoringEventType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMonitoringEventType GetEvent(string EventId)
        {
            if (EventId == null) { throw new System.ArgumentNullException("EventId cannot be null"); }
            NSXTMonitoringEventType returnValue = default(NSXTMonitoringEventType);
            StringBuilder GetEventServiceURL = new StringBuilder("/events/{event-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetEventServiceURL.Replace("{event-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EventId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetEventServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetEventServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTMonitoringEventType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTMonitoringEventType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAlarmsListResultType GetAlarms(long? After = null, long? Before = null, string? Cursor = null, string? EventType = null, string? FeatureName = null, string? Id = null, string? IntentPath = null, string? NodeId = null, string? NodeResourceType = null, long? PageSize = null, string? Severity = null, bool? SortAscending = null, string? SortBy = null, string? Status = null)
        {
            NSXTAlarmsListResultType returnValue = default(NSXTAlarmsListResultType);
            StringBuilder GetAlarmsServiceURL = new StringBuilder("/alarms");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (After != null) { request.AddQueryParameter("after", After.ToString()); }
            if (Before != null) { request.AddQueryParameter("before", Before.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EventType != null) { request.AddQueryParameter("event_type", EventType.ToString()); }
            if (FeatureName != null) { request.AddQueryParameter("feature_name", FeatureName.ToString()); }
            if (Id != null) { request.AddQueryParameter("id", Id.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (NodeId != null) { request.AddQueryParameter("node_id", NodeId.ToString()); }
            if (NodeResourceType != null) { request.AddQueryParameter("node_resource_type", NodeResourceType.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Severity != null) { request.AddQueryParameter("severity", Severity.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Status != null) { request.AddQueryParameter("status", Status.ToString()); }
            request.Resource = GetAlarmsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetAlarmsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAlarmsListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAlarmsListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMonitoringEventType ResetEventValuesSetDefault(string EventId)
        {
            if (EventId == null) { throw new System.ArgumentNullException("EventId cannot be null"); }
            NSXTMonitoringEventType returnValue = default(NSXTMonitoringEventType);
            StringBuilder ResetEventValuesSetDefaultServiceURL = new StringBuilder("/events/{event-id}?action=set_default");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            ResetEventValuesSetDefaultServiceURL.Replace("{event-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EventId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ResetEventValuesSetDefaultServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + ResetEventValuesSetDefaultServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTMonitoringEventType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTMonitoringEventType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAlarmType UpdateAlarmStatusSetStatus(string AlarmId, string NewStatus, long? SuppressDuration = null)
        {
            if (AlarmId == null) { throw new System.ArgumentNullException("AlarmId cannot be null"); }
            if (NewStatus == null) { throw new System.ArgumentNullException("NewStatus cannot be null"); }
            NSXTAlarmType returnValue = default(NSXTAlarmType);
            StringBuilder UpdateAlarmStatusSetStatusServiceURL = new StringBuilder("/alarms/{alarm-id}?action=set_status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            UpdateAlarmStatusSetStatusServiceURL.Replace("{alarm-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(AlarmId, System.Globalization.CultureInfo.InvariantCulture)));
            if (NewStatus != null) { request.AddQueryParameter("new_status", NewStatus.ToString()); }
            if (SuppressDuration != null) { request.AddQueryParameter("suppress_duration", SuppressDuration.ToString()); }
            request.Resource = UpdateAlarmStatusSetStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + UpdateAlarmStatusSetStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAlarmType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAlarmType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
