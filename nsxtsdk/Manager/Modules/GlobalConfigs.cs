// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class GlobalConfigs
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public GlobalConfigs(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGlobalConfigsType ResyncGlobalConfigsResyncConfig(string ConfigType, NSXTGlobalConfigsType GlobalConfigs)
        {
            if (ConfigType == null) { throw new System.ArgumentNullException("ConfigType cannot be null"); }
            if (GlobalConfigs == null) { throw new System.ArgumentNullException("GlobalConfigs cannot be null"); }
            NSXTGlobalConfigsType returnValue = default(NSXTGlobalConfigsType);
            StringBuilder ResyncGlobalConfigsResyncConfigServiceURL = new StringBuilder("/global-configs/{config-type}?action=resync_config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            ResyncGlobalConfigsResyncConfigServiceURL.Replace("{config-type}", System.Uri.EscapeDataString(Helpers.ConvertToString(ConfigType, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(GlobalConfigs, defaultSerializationSettings));
            request.Resource = ResyncGlobalConfigsResyncConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGlobalConfigsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGlobalConfigsType UpdateGlobalConfigs(string ConfigType, NSXTGlobalConfigsType GlobalConfigs)
        {
            if (ConfigType == null) { throw new System.ArgumentNullException("ConfigType cannot be null"); }
            if (GlobalConfigs == null) { throw new System.ArgumentNullException("GlobalConfigs cannot be null"); }
            NSXTGlobalConfigsType returnValue = default(NSXTGlobalConfigsType);
            StringBuilder UpdateGlobalConfigsServiceURL = new StringBuilder("/global-configs/{config-type}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateGlobalConfigsServiceURL.Replace("{config-type}", System.Uri.EscapeDataString(Helpers.ConvertToString(ConfigType, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(GlobalConfigs, defaultSerializationSettings));
            request.Resource = UpdateGlobalConfigsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGlobalConfigsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGlobalConfigsType GetGlobalConfigs(string ConfigType)
        {
            if (ConfigType == null) { throw new System.ArgumentNullException("ConfigType cannot be null"); }
            NSXTGlobalConfigsType returnValue = default(NSXTGlobalConfigsType);
            StringBuilder GetGlobalConfigsServiceURL = new StringBuilder("/global-configs/{config-type}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetGlobalConfigsServiceURL.Replace("{config-type}", System.Uri.EscapeDataString(Helpers.ConvertToString(ConfigType, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetGlobalConfigsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGlobalConfigsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGlobalConfigsListResultType ListGlobalConfigs()
        {
            NSXTGlobalConfigsListResultType returnValue = default(NSXTGlobalConfigsListResultType);
            StringBuilder ListGlobalConfigsServiceURL = new StringBuilder("/global-configs");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListGlobalConfigsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGlobalConfigsListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
