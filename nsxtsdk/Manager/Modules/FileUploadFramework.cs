// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class FileUploadFramework
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public FileUploadFramework(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBundleIdType UploadBundleViaRemoteFile(NSXTRemoteBundleUrlType RemoteBundleUrl, string FileType, string Product)
        {
            if (RemoteBundleUrl == null) { throw new System.ArgumentNullException("RemoteBundleUrl cannot be null"); }
            if (FileType == null) { throw new System.ArgumentNullException("FileType cannot be null"); }
            if (Product == null) { throw new System.ArgumentNullException("Product cannot be null"); }
            NSXTBundleIdType returnValue = default(NSXTBundleIdType);
            StringBuilder UploadBundleViaRemoteFileServiceURL = new StringBuilder("/repository/bundles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(RemoteBundleUrl, defaultSerializationSettings));
            if (FileType != null) { request.AddQueryParameter("file_type", FileType.ToString()); }
            if (Product != null) { request.AddQueryParameter("product", Product.ToString()); }
            request.Resource = UploadBundleViaRemoteFileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + UploadBundleViaRemoteFileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTBundleIdType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTBundleIdType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBundleIdsType GetBundleIds(string FileType, string Product)
        {
            if (FileType == null) { throw new System.ArgumentNullException("FileType cannot be null"); }
            if (Product == null) { throw new System.ArgumentNullException("Product cannot be null"); }
            NSXTBundleIdsType returnValue = default(NSXTBundleIdsType);
            StringBuilder GetBundleIdsServiceURL = new StringBuilder("/repository/bundles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (FileType != null) { request.AddQueryParameter("file_type", FileType.ToString()); }
            if (Product != null) { request.AddQueryParameter("product", Product.ToString()); }
            request.Resource = GetBundleIdsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetBundleIdsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTBundleIdsType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTBundleIdsType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBundleUploadStatusType GetBundleUploadStatus(string BundleId, string Product)
        {
            if (BundleId == null) { throw new System.ArgumentNullException("BundleId cannot be null"); }
            if (Product == null) { throw new System.ArgumentNullException("Product cannot be null"); }
            NSXTBundleUploadStatusType returnValue = default(NSXTBundleUploadStatusType);
            StringBuilder GetBundleUploadStatusServiceURL = new StringBuilder("/repository/bundles/{bundle-id}/upload-status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetBundleUploadStatusServiceURL.Replace("{bundle-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BundleId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Product != null) { request.AddQueryParameter("product", Product.ToString()); }
            request.Resource = GetBundleUploadStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetBundleUploadStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTBundleUploadStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTBundleUploadStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTOvfInfoType GetOvfDeployInfo(string Product)
        {
            if (Product == null) { throw new System.ArgumentNullException("Product cannot be null"); }
            NSXTOvfInfoType returnValue = default(NSXTOvfInfoType);
            StringBuilder GetOvfDeployInfoServiceURL = new StringBuilder("/repository/bundles/ovf-deploy-info");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Product != null) { request.AddQueryParameter("product", Product.ToString()); }
            request.Resource = GetOvfDeployInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetOvfDeployInfoServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTOvfInfoType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTOvfInfoType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void CancelBundleUploadCancelUpload(string BundleId, string Product)
        {
            if (BundleId == null) { throw new System.ArgumentNullException("BundleId cannot be null"); }
            if (Product == null) { throw new System.ArgumentNullException("Product cannot be null"); }
            
            StringBuilder CancelBundleUploadCancelUploadServiceURL = new StringBuilder("/repository/bundles/{bundle-id}?action=cancel_upload");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            CancelBundleUploadCancelUploadServiceURL.Replace("{bundle-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BundleId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Product != null) { request.AddQueryParameter("product", Product.ToString()); }
            request.Resource = CancelBundleUploadCancelUploadServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CancelBundleUploadCancelUploadServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBundleUploadPermissionType GetBundleUploadPermissions(string Product)
        {
            if (Product == null) { throw new System.ArgumentNullException("Product cannot be null"); }
            NSXTBundleUploadPermissionType returnValue = default(NSXTBundleUploadPermissionType);
            StringBuilder GetBundleUploadPermissionsServiceURL = new StringBuilder("/repository/bundles/upload-allowed");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Product != null) { request.AddQueryParameter("product", Product.ToString()); }
            request.Resource = GetBundleUploadPermissionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetBundleUploadPermissionsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTBundleUploadPermissionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTBundleUploadPermissionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBundleIdType UploadBundleViaLocalFileUpload(string File, string FileType, string Product)
        {
            if (File == null) { throw new System.ArgumentNullException("File cannot be null"); }
            if (FileType == null) { throw new System.ArgumentNullException("FileType cannot be null"); }
            if (Product == null) { throw new System.ArgumentNullException("Product cannot be null"); }
            NSXTBundleIdType returnValue = default(NSXTBundleIdType);
            StringBuilder UploadBundleViaLocalFileUploadServiceURL = new StringBuilder("/repository/bundles?action=upload");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            
            if (FileType != null) { request.AddQueryParameter("file_type", FileType.ToString()); }
            if (Product != null) { request.AddQueryParameter("product", Product.ToString()); }
            request.Resource = UploadBundleViaLocalFileUploadServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + UploadBundleViaLocalFileUploadServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTBundleIdType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTBundleIdType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
