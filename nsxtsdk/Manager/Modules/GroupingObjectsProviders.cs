// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class GroupingObjectsProviders
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public GroupingObjectsProviders(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTServiceAssociationListResultType GetServiceAssociations(string NsgroupId, string ServiceType, string? Cursor = null, bool? FetchParentgroupAssociations = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (NsgroupId == null) { throw new System.ArgumentNullException("NsgroupId cannot be null"); }
            if (ServiceType == null) { throw new System.ArgumentNullException("ServiceType cannot be null"); }
            NSXTServiceAssociationListResultType returnValue = default(NSXTServiceAssociationListResultType);
            StringBuilder GetServiceAssociationsServiceURL = new StringBuilder("/ns-groups/{nsgroup-id}/service-associations");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetServiceAssociationsServiceURL.Replace("{nsgroup-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NsgroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (FetchParentgroupAssociations != null) { request.AddQueryParameter("fetch_parentgroup_associations", FetchParentgroupAssociations.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (ServiceType != null) { request.AddQueryParameter("service_type", ServiceType.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetServiceAssociationsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTServiceAssociationListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTConsolidatedEffectiveIPAddressMemberListResultType GetConsolidatedEffectiveIpaddressMembers(string NsGroupId, string? Cursor = null, string? IncludedFields = null, string? IpFilter = null, long? PageSize = null, string? SiteId = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (NsGroupId == null) { throw new System.ArgumentNullException("NsGroupId cannot be null"); }
            NSXTConsolidatedEffectiveIPAddressMemberListResultType returnValue = default(NSXTConsolidatedEffectiveIPAddressMemberListResultType);
            StringBuilder GetConsolidatedEffectiveIpaddressMembersServiceURL = new StringBuilder("/ns-groups/{ns-group-id}/consolidated-effective-ip-address-members");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetConsolidatedEffectiveIpaddressMembersServiceURL.Replace("{ns-group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NsGroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (IpFilter != null) { request.AddQueryParameter("ip_filter", IpFilter.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SiteId != null) { request.AddQueryParameter("site_id", SiteId.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetConsolidatedEffectiveIpaddressMembersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTConsolidatedEffectiveIPAddressMemberListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTUnassociatedVMListResultType GetUnassociatedVirtualMachines(string? Cursor = null, string? DisplayName = null, string? ExternalId = null, string? HostId = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTUnassociatedVMListResultType returnValue = default(NSXTUnassociatedVMListResultType);
            StringBuilder GetUnassociatedVirtualMachinesServiceURL = new StringBuilder("/ns-groups/unassociated-virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (DisplayName != null) { request.AddQueryParameter("display_name", DisplayName.ToString()); }
            if (ExternalId != null) { request.AddQueryParameter("external_id", ExternalId.ToString()); }
            if (HostId != null) { request.AddQueryParameter("host_id", HostId.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetUnassociatedVirtualMachinesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTUnassociatedVMListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
