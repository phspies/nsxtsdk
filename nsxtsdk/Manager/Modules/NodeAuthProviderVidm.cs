// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class NodeAuthProviderVidm
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public NodeAuthProviderVidm(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeAuthProviderVidmPropertiesType UpdateAuthProviderVidm(NSXTNodeAuthProviderVidmPropertiesType NodeAuthProviderVidmProperties)
        {
            if (NodeAuthProviderVidmProperties == null) { throw new System.ArgumentNullException("NodeAuthProviderVidmProperties cannot be null"); }
            NSXTNodeAuthProviderVidmPropertiesType returnValue = default(NSXTNodeAuthProviderVidmPropertiesType);
            StringBuilder UpdateAuthProviderVidmServiceURL = new StringBuilder("/node/aaa/providers/vidm");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(NodeAuthProviderVidmProperties, defaultSerializationSettings));
            request.Resource = UpdateAuthProviderVidmServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateAuthProviderVidmServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTNodeAuthProviderVidmPropertiesType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTNodeAuthProviderVidmPropertiesType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeAuthProviderVidmPropertiesType ReadAuthProviderVidm()
        {
            NSXTNodeAuthProviderVidmPropertiesType returnValue = default(NSXTNodeAuthProviderVidmPropertiesType);
            StringBuilder ReadAuthProviderVidmServiceURL = new StringBuilder("/node/aaa/providers/vidm");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ReadAuthProviderVidmServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadAuthProviderVidmServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTNodeAuthProviderVidmPropertiesType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTNodeAuthProviderVidmPropertiesType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeAuthProviderVidmStatusType ReadAuthProviderVidmStatus()
        {
            NSXTNodeAuthProviderVidmStatusType returnValue = default(NSXTNodeAuthProviderVidmStatusType);
            StringBuilder ReadAuthProviderVidmStatusServiceURL = new StringBuilder("/node/aaa/providers/vidm/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ReadAuthProviderVidmStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadAuthProviderVidmStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTNodeAuthProviderVidmStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTNodeAuthProviderVidmStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
