// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class AggSvcInterSite
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public AggSvcInterSite(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBgpNeighborRouteDetailsType GetInterSiteEdgeNodeBgpNeighborRoutes(string EdgeNodeId, string NeighborId)
        {
            if (EdgeNodeId == null) { throw new System.ArgumentNullException("EdgeNodeId cannot be null"); }
            if (NeighborId == null) { throw new System.ArgumentNullException("NeighborId cannot be null"); }
            NSXTBgpNeighborRouteDetailsType returnValue = default(NSXTBgpNeighborRouteDetailsType);
            StringBuilder GetInterSiteEdgeNodeBgpNeighborRoutesServiceURL = new StringBuilder("/transport-nodes/{edge-node-id}/inter-site/bgp/neighbors/{neighbor-id}/routes");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInterSiteEdgeNodeBgpNeighborRoutesServiceURL.Replace("{edge-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInterSiteEdgeNodeBgpNeighborRoutesServiceURL.Replace("{neighbor-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NeighborId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInterSiteEdgeNodeBgpNeighborRoutesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBgpNeighborRouteDetailsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTInterSiteBgpSummaryType GetInterSiteEdgeNodeBgpSummary(string EdgeNodeId)
        {
            if (EdgeNodeId == null) { throw new System.ArgumentNullException("EdgeNodeId cannot be null"); }
            NSXTInterSiteBgpSummaryType returnValue = default(NSXTInterSiteBgpSummaryType);
            StringBuilder GetInterSiteEdgeNodeBgpSummaryServiceURL = new StringBuilder("/transport-nodes/{edge-node-id}/inter-site/bgp/summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInterSiteEdgeNodeBgpSummaryServiceURL.Replace("{edge-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInterSiteEdgeNodeBgpSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTInterSiteBgpSummaryType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBgpNeighborRouteDetailsType GetInterSiteEdgeNodeBgpNeighborAdvertisedRoutes(string EdgeNodeId, string NeighborId)
        {
            if (EdgeNodeId == null) { throw new System.ArgumentNullException("EdgeNodeId cannot be null"); }
            if (NeighborId == null) { throw new System.ArgumentNullException("NeighborId cannot be null"); }
            NSXTBgpNeighborRouteDetailsType returnValue = default(NSXTBgpNeighborRouteDetailsType);
            StringBuilder GetInterSiteEdgeNodeBgpNeighborAdvertisedRoutesServiceURL = new StringBuilder("/transport-nodes/{edge-node-id}/inter-site/bgp/neighbors/{neighbor-id}/advertised-routes");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInterSiteEdgeNodeBgpNeighborAdvertisedRoutesServiceURL.Replace("{edge-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInterSiteEdgeNodeBgpNeighborAdvertisedRoutesServiceURL.Replace("{neighbor-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NeighborId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInterSiteEdgeNodeBgpNeighborAdvertisedRoutesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBgpNeighborRouteDetailsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeInterSiteStatisticsType GetInterSiteEdgeNodeStatistics(string EdgeNodeId)
        {
            if (EdgeNodeId == null) { throw new System.ArgumentNullException("EdgeNodeId cannot be null"); }
            NSXTNodeInterSiteStatisticsType returnValue = default(NSXTNodeInterSiteStatisticsType);
            StringBuilder GetInterSiteEdgeNodeStatisticsServiceURL = new StringBuilder("/transport-nodes/{edge-node-id}/inter-site/statistics");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInterSiteEdgeNodeStatisticsServiceURL.Replace("{edge-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInterSiteEdgeNodeStatisticsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeInterSiteStatisticsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBgpNeighborListResultType ListInterSiteEdgeNodeBgpNeighbors(string EdgeNodeId, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EdgeNodeId == null) { throw new System.ArgumentNullException("EdgeNodeId cannot be null"); }
            NSXTBgpNeighborListResultType returnValue = default(NSXTBgpNeighborListResultType);
            StringBuilder ListInterSiteEdgeNodeBgpNeighborsServiceURL = new StringBuilder("/transport-nodes/{edge-node-id}/inter-site/bgp/neighbors");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListInterSiteEdgeNodeBgpNeighborsServiceURL.Replace("{edge-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListInterSiteEdgeNodeBgpNeighborsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBgpNeighborListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
