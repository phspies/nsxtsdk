// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class NetworkInterfaceModule
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public NetworkInterfaceModule(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeNetworkInterfacePropertiesType UpdateNodeInterface(string InterfaceId, NSXTNodeNetworkInterfacePropertiesType NodeNetworkInterfaceProperties)
        {
            if (InterfaceId == null) { throw new System.ArgumentNullException("InterfaceId cannot be null"); }
            if (NodeNetworkInterfaceProperties == null) { throw new System.ArgumentNullException("NodeNetworkInterfaceProperties cannot be null"); }
            NSXTNodeNetworkInterfacePropertiesType returnValue = default(NSXTNodeNetworkInterfacePropertiesType);
            StringBuilder UpdateNodeInterfaceServiceURL = new StringBuilder("/node/network/interfaces/{interface-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateNodeInterfaceServiceURL.Replace("{interface-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InterfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(NodeNetworkInterfaceProperties, defaultSerializationSettings));
            request.Resource = UpdateNodeInterfaceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeNetworkInterfacePropertiesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeNetworkInterfacePropertiesType ReadNodeInterface(string InterfaceId)
        {
            if (InterfaceId == null) { throw new System.ArgumentNullException("InterfaceId cannot be null"); }
            NSXTNodeNetworkInterfacePropertiesType returnValue = default(NSXTNodeNetworkInterfacePropertiesType);
            StringBuilder ReadNodeInterfaceServiceURL = new StringBuilder("/node/network/interfaces/{interface-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNodeInterfaceServiceURL.Replace("{interface-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InterfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNodeInterfaceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeNetworkInterfacePropertiesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeNetworkInterfacePropertiesListResultType ListNodeInterfaces()
        {
            NSXTNodeNetworkInterfacePropertiesListResultType returnValue = default(NSXTNodeNetworkInterfacePropertiesListResultType);
            StringBuilder ListNodeInterfacesServiceURL = new StringBuilder("/node/network/interfaces");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListNodeInterfacesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeNetworkInterfacePropertiesListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeInterfaceStatisticsPropertiesType ReadNetworkInterfaceStatistics(string InterfaceId)
        {
            if (InterfaceId == null) { throw new System.ArgumentNullException("InterfaceId cannot be null"); }
            NSXTNodeInterfaceStatisticsPropertiesType returnValue = default(NSXTNodeInterfaceStatisticsPropertiesType);
            StringBuilder ReadNetworkInterfaceStatisticsServiceURL = new StringBuilder("/node/network/interfaces/{interface-id}/stats");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNetworkInterfaceStatisticsServiceURL.Replace("{interface-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InterfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNetworkInterfaceStatisticsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeInterfaceStatisticsPropertiesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
