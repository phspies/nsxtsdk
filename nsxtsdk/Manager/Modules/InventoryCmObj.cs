// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class InventoryCmObj
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public InventoryCmObj(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeManagerStatusType ReadComputeManagerStatus(string ComputeManagerId)
        {
            if (ComputeManagerId == null) { throw new System.ArgumentNullException("ComputeManagerId cannot be null"); }
            NSXTComputeManagerStatusType returnValue = default(NSXTComputeManagerStatusType);
            StringBuilder ReadComputeManagerStatusServiceURL = new StringBuilder("/fabric/compute-managers/{compute-manager-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadComputeManagerStatusServiceURL.Replace("{compute-manager-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeManagerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadComputeManagerStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeManagerStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeCollectionListResultType ListComputeCollections(string? CmLocalId = null, string? Cursor = null, string? DiscoveredNodeId = null, string? DisplayName = null, string? ExternalId = null, string? IncludedFields = null, string? NodeId = null, string? OriginId = null, string? OriginType = null, string? OwnerId = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTComputeCollectionListResultType returnValue = default(NSXTComputeCollectionListResultType);
            StringBuilder ListComputeCollectionsServiceURL = new StringBuilder("/fabric/compute-collections");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (CmLocalId != null) { request.AddQueryParameter("cm_local_id", CmLocalId.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (DiscoveredNodeId != null) { request.AddQueryParameter("discovered_node_id", DiscoveredNodeId.ToString()); }
            if (DisplayName != null) { request.AddQueryParameter("display_name", DisplayName.ToString()); }
            if (ExternalId != null) { request.AddQueryParameter("external_id", ExternalId.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (NodeId != null) { request.AddQueryParameter("node_id", NodeId.ToString()); }
            if (OriginId != null) { request.AddQueryParameter("origin_id", OriginId.ToString()); }
            if (OriginType != null) { request.AddQueryParameter("origin_type", OriginType.ToString()); }
            if (OwnerId != null) { request.AddQueryParameter("owner_id", OwnerId.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListComputeCollectionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeCollectionListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PerformActionOnComputeCollection(string CcExtId, string? Action = null)
        {
            if (CcExtId == null) { throw new System.ArgumentNullException("CcExtId cannot be null"); }
            
            StringBuilder PerformActionOnComputeCollectionServiceURL = new StringBuilder("/fabric/compute-collections/{cc-ext-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            PerformActionOnComputeCollectionServiceURL.Replace("{cc-ext-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CcExtId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            request.Resource = PerformActionOnComputeCollectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeCollectionType ReadComputeCollection(string CcExtId)
        {
            if (CcExtId == null) { throw new System.ArgumentNullException("CcExtId cannot be null"); }
            NSXTComputeCollectionType returnValue = default(NSXTComputeCollectionType);
            StringBuilder ReadComputeCollectionServiceURL = new StringBuilder("/fabric/compute-collections/{cc-ext-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadComputeCollectionServiceURL.Replace("{cc-ext-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CcExtId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadComputeCollectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeCollectionType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDiscoveredNodeType ReadDiscoveredNode(string NodeExtId)
        {
            if (NodeExtId == null) { throw new System.ArgumentNullException("NodeExtId cannot be null"); }
            NSXTDiscoveredNodeType returnValue = default(NSXTDiscoveredNodeType);
            StringBuilder ReadDiscoveredNodeServiceURL = new StringBuilder("/fabric/discovered-nodes/{node-ext-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadDiscoveredNodeServiceURL.Replace("{node-ext-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeExtId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadDiscoveredNodeServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDiscoveredNodeType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeManagerType AddComputeManager(NSXTComputeManagerType ComputeManager)
        {
            if (ComputeManager == null) { throw new System.ArgumentNullException("ComputeManager cannot be null"); }
            NSXTComputeManagerType returnValue = default(NSXTComputeManagerType);
            StringBuilder AddComputeManagerServiceURL = new StringBuilder("/fabric/compute-managers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeManager, defaultSerializationSettings));
            request.Resource = AddComputeManagerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeManagerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeManagerListResultType ListComputeManagers(string? Cursor = null, string? IncludedFields = null, string? OriginType = null, long? PageSize = null, string? Server = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTComputeManagerListResultType returnValue = default(NSXTComputeManagerListResultType);
            StringBuilder ListComputeManagersServiceURL = new StringBuilder("/fabric/compute-managers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (OriginType != null) { request.AddQueryParameter("origin_type", OriginType.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Server != null) { request.AddQueryParameter("server", Server.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListComputeManagersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeManagerListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeCollectionNetworkInterfacesListResultType ListComputeCollectionPhysicalNetworkInterfaces(string CcExtId)
        {
            if (CcExtId == null) { throw new System.ArgumentNullException("CcExtId cannot be null"); }
            NSXTComputeCollectionNetworkInterfacesListResultType returnValue = default(NSXTComputeCollectionNetworkInterfacesListResultType);
            StringBuilder ListComputeCollectionPhysicalNetworkInterfacesServiceURL = new StringBuilder("/fabric/compute-collections/{cc-ext-id}/network/physical-interfaces");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListComputeCollectionPhysicalNetworkInterfacesServiceURL.Replace("{cc-ext-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CcExtId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ListComputeCollectionPhysicalNetworkInterfacesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeCollectionNetworkInterfacesListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTConfigurationStateType GetComputeManagerState(string ComputeManagerId)
        {
            if (ComputeManagerId == null) { throw new System.ArgumentNullException("ComputeManagerId cannot be null"); }
            NSXTConfigurationStateType returnValue = default(NSXTConfigurationStateType);
            StringBuilder GetComputeManagerStateServiceURL = new StringBuilder("/fabric/compute-managers/{compute-manager-id}/state");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetComputeManagerStateServiceURL.Replace("{compute-manager-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeManagerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetComputeManagerStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTConfigurationStateType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualSwitchListResultType ListVirtualSwitches(string? CmLocalId = null, string? Cursor = null, string? DiscoveredNodeId = null, string? DisplayName = null, string? ExternalId = null, string? IncludedFields = null, string? OriginId = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Uuid = null)
        {
            NSXTVirtualSwitchListResultType returnValue = default(NSXTVirtualSwitchListResultType);
            StringBuilder ListVirtualSwitchesServiceURL = new StringBuilder("/fabric/virtual-switches");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (CmLocalId != null) { request.AddQueryParameter("cm_local_id", CmLocalId.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (DiscoveredNodeId != null) { request.AddQueryParameter("discovered_node_id", DiscoveredNodeId.ToString()); }
            if (DisplayName != null) { request.AddQueryParameter("display_name", DisplayName.ToString()); }
            if (ExternalId != null) { request.AddQueryParameter("external_id", ExternalId.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (OriginId != null) { request.AddQueryParameter("origin_id", OriginId.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Uuid != null) { request.AddQueryParameter("uuid", Uuid.ToString()); }
            request.Resource = ListVirtualSwitchesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualSwitchListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeManagerType UpdateComputeManager(string ComputeManagerId, NSXTComputeManagerType ComputeManager)
        {
            if (ComputeManagerId == null) { throw new System.ArgumentNullException("ComputeManagerId cannot be null"); }
            if (ComputeManager == null) { throw new System.ArgumentNullException("ComputeManager cannot be null"); }
            NSXTComputeManagerType returnValue = default(NSXTComputeManagerType);
            StringBuilder UpdateComputeManagerServiceURL = new StringBuilder("/fabric/compute-managers/{compute-manager-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateComputeManagerServiceURL.Replace("{compute-manager-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeManagerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeManager, defaultSerializationSettings));
            request.Resource = UpdateComputeManagerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeManagerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteComputeManager(string ComputeManagerId)
        {
            if (ComputeManagerId == null) { throw new System.ArgumentNullException("ComputeManagerId cannot be null"); }
            
            StringBuilder DeleteComputeManagerServiceURL = new StringBuilder("/fabric/compute-managers/{compute-manager-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteComputeManagerServiceURL.Replace("{compute-manager-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeManagerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteComputeManagerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeManagerType ReadComputeManager(string ComputeManagerId)
        {
            if (ComputeManagerId == null) { throw new System.ArgumentNullException("ComputeManagerId cannot be null"); }
            NSXTComputeManagerType returnValue = default(NSXTComputeManagerType);
            StringBuilder ReadComputeManagerServiceURL = new StringBuilder("/fabric/compute-managers/{compute-manager-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadComputeManagerServiceURL.Replace("{compute-manager-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeManagerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadComputeManagerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeManagerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDiscoveredNodeListResultType ListDiscoveredNodes(string? CmLocalId = null, string? Cursor = null, string? DisplayName = null, string? ExternalId = null, string? HasParent = null, string? IncludedFields = null, string? IpAddress = null, string? NodeId = null, string? NodeType = null, string? OriginId = null, long? PageSize = null, string? ParentComputeCollection = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTDiscoveredNodeListResultType returnValue = default(NSXTDiscoveredNodeListResultType);
            StringBuilder ListDiscoveredNodesServiceURL = new StringBuilder("/fabric/discovered-nodes");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (CmLocalId != null) { request.AddQueryParameter("cm_local_id", CmLocalId.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (DisplayName != null) { request.AddQueryParameter("display_name", DisplayName.ToString()); }
            if (ExternalId != null) { request.AddQueryParameter("external_id", ExternalId.ToString()); }
            if (HasParent != null) { request.AddQueryParameter("has_parent", HasParent.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (IpAddress != null) { request.AddQueryParameter("ip_address", IpAddress.ToString()); }
            if (NodeId != null) { request.AddQueryParameter("node_id", NodeId.ToString()); }
            if (NodeType != null) { request.AddQueryParameter("node_type", NodeType.ToString()); }
            if (OriginId != null) { request.AddQueryParameter("origin_id", OriginId.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (ParentComputeCollection != null) { request.AddQueryParameter("parent_compute_collection", ParentComputeCollection.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListDiscoveredNodesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDiscoveredNodeListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
