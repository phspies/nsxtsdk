// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class InventoryVmTag
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public InventoryVmTag(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void UpdateVirtualMachineTagsUpdateTags(NSXTVirtualMachineTagUpdateType VirtualMachineTagUpdate)
        {
            if (VirtualMachineTagUpdate == null) { throw new System.ArgumentNullException("VirtualMachineTagUpdate cannot be null"); }
            
            StringBuilder UpdateVirtualMachineTagsUpdateTagsServiceURL = new StringBuilder("/fabric/virtual-machines?action=update_tags");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(VirtualMachineTagUpdate, defaultSerializationSettings));
            request.Resource = UpdateVirtualMachineTagsUpdateTagsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void RemoveVirtualMachineTagsRemoveTags(NSXTVirtualMachineTagUpdateType VirtualMachineTagUpdate)
        {
            if (VirtualMachineTagUpdate == null) { throw new System.ArgumentNullException("VirtualMachineTagUpdate cannot be null"); }
            
            StringBuilder RemoveVirtualMachineTagsRemoveTagsServiceURL = new StringBuilder("/fabric/virtual-machines?action=remove_tags");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(VirtualMachineTagUpdate, defaultSerializationSettings));
            request.Resource = RemoveVirtualMachineTagsRemoveTagsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void AddVirtualMachineTagsAddTags(NSXTVirtualMachineTagUpdateType VirtualMachineTagUpdate)
        {
            if (VirtualMachineTagUpdate == null) { throw new System.ArgumentNullException("VirtualMachineTagUpdate cannot be null"); }
            
            StringBuilder AddVirtualMachineTagsAddTagsServiceURL = new StringBuilder("/fabric/virtual-machines?action=add_tags");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(VirtualMachineTagUpdate, defaultSerializationSettings));
            request.Resource = AddVirtualMachineTagsAddTagsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
    }
}
