// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class CertificateManager
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public CertificateManager(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTOidcEndPointType GetOidcEndPoint(string Id, bool? Refresh = null)
        {
            if (Id == null) { throw new System.ArgumentNullException("Id cannot be null"); }
            NSXTOidcEndPointType returnValue = default(NSXTOidcEndPointType);
            StringBuilder GetOidcEndPointServiceURL = new StringBuilder("/trust-management/oidc-uris/{id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetOidcEndPointServiceURL.Replace("{id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Id, System.Globalization.CultureInfo.InvariantCulture)));
            if (Refresh != null) { request.AddQueryParameter("refresh", Refresh.ToString()); }
            request.Resource = GetOidcEndPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTOidcEndPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCsrType GetCsr(string CsrId)
        {
            if (CsrId == null) { throw new System.ArgumentNullException("CsrId cannot be null"); }
            NSXTCsrType returnValue = default(NSXTCsrType);
            StringBuilder GetCsrServiceURL = new StringBuilder("/trust-management/csrs/{csr-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetCsrServiceURL.Replace("{csr-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CsrId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetCsrServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCsrType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteCsr(string CsrId)
        {
            if (CsrId == null) { throw new System.ArgumentNullException("CsrId cannot be null"); }
            
            StringBuilder DeleteCsrServiceURL = new StringBuilder("/trust-management/csrs/{csr-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteCsrServiceURL.Replace("{csr-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CsrId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteCsrServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateProfileListResultType ListCertificateProfiles()
        {
            NSXTCertificateProfileListResultType returnValue = default(NSXTCertificateProfileListResultType);
            StringBuilder ListCertificateProfilesServiceURL = new StringBuilder("/trust-management/certificate-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListCertificateProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTrustManagementDataType GetTrustObjects()
        {
            NSXTTrustManagementDataType returnValue = default(NSXTTrustManagementDataType);
            StringBuilder GetTrustObjectsServiceURL = new StringBuilder("/trust-management");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetTrustObjectsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTTrustManagementDataType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlListType AddCrlImport(NSXTCrlObjectDataType CrlObjectData)
        {
            if (CrlObjectData == null) { throw new System.ArgumentNullException("CrlObjectData cannot be null"); }
            NSXTCrlListType returnValue = default(NSXTCrlListType);
            StringBuilder AddCrlImportServiceURL = new StringBuilder("/trust-management/crls?action=import");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(CrlObjectData, defaultSerializationSettings));
            request.Resource = AddCrlImportServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateListType ImportCertificateImport(string CsrId, NSXTTrustObjectDataType TrustObjectData)
        {
            if (CsrId == null) { throw new System.ArgumentNullException("CsrId cannot be null"); }
            if (TrustObjectData == null) { throw new System.ArgumentNullException("TrustObjectData cannot be null"); }
            NSXTCertificateListType returnValue = default(NSXTCertificateListType);
            StringBuilder ImportCertificateImportServiceURL = new StringBuilder("/trust-management/csrs/{csr-id}?action=import");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            ImportCertificateImportServiceURL.Replace("{csr-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CsrId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TrustObjectData, defaultSerializationSettings));
            request.Resource = ImportCertificateImportServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlDistributionPointType CreateCrlDistributionPoint(NSXTCrlDistributionPointType CrlDistributionPoint)
        {
            if (CrlDistributionPoint == null) { throw new System.ArgumentNullException("CrlDistributionPoint cannot be null"); }
            NSXTCrlDistributionPointType returnValue = default(NSXTCrlDistributionPointType);
            StringBuilder CreateCrlDistributionPointServiceURL = new StringBuilder("/trust-management/crl-distribution-points");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(CrlDistributionPoint, defaultSerializationSettings));
            request.Resource = CreateCrlDistributionPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlDistributionPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlDistributionPointListType ListCrlDistributionPoints(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTCrlDistributionPointListType returnValue = default(NSXTCrlDistributionPointListType);
            StringBuilder ListCrlDistributionPointsServiceURL = new StringBuilder("/trust-management/crl-distribution-points");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListCrlDistributionPointsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlDistributionPointListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateCheckingStatusType ValidateCertificateValidate(string CertId, string? Usage = null)
        {
            if (CertId == null) { throw new System.ArgumentNullException("CertId cannot be null"); }
            NSXTCertificateCheckingStatusType returnValue = default(NSXTCertificateCheckingStatusType);
            StringBuilder ValidateCertificateValidateServiceURL = new StringBuilder("/trust-management/certificates/{cert-id}?action=validate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ValidateCertificateValidateServiceURL.Replace("{cert-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Usage != null) { request.AddQueryParameter("usage", Usage.ToString()); }
            request.Resource = ValidateCertificateValidateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateCheckingStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlDistributionPointStatusType GetCrlDistributionPointStatus(string CrlDistributionPointId)
        {
            if (CrlDistributionPointId == null) { throw new System.ArgumentNullException("CrlDistributionPointId cannot be null"); }
            NSXTCrlDistributionPointStatusType returnValue = default(NSXTCrlDistributionPointStatusType);
            StringBuilder GetCrlDistributionPointStatusServiceURL = new StringBuilder("/trust-management/crl-distribution-points/{crl-distribution-point-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetCrlDistributionPointStatusServiceURL.Replace("{crl-distribution-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlDistributionPointId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetCrlDistributionPointStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlDistributionPointStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public string GetCsrPem(string CsrId)
        {
            if (CsrId == null) { throw new System.ArgumentNullException("CsrId cannot be null"); }
            string returnValue  = default(string);
            StringBuilder GetCsrPemServiceURL = new StringBuilder("/trust-management/csrs/{csr-id}/pem-file");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetCsrPemServiceURL.Replace("{csr-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CsrId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetCsrPemServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<string>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void SetInterSiteAphCertificateSetApplianceProxyCertificateForInterSiteCommunication(NSXTSetInterSiteAphCertificateRequestType SetInterSiteAphCertificateRequest)
        {
            if (SetInterSiteAphCertificateRequest == null) { throw new System.ArgumentNullException("SetInterSiteAphCertificateRequest cannot be null"); }
            
            StringBuilder SetInterSiteAphCertificateSetApplianceProxyCertificateForInterSiteCommunicationServiceURL = new StringBuilder("/trust-management/certificates?action=set_appliance_proxy_certificate_for_inter_site_communication");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(SetInterSiteAphCertificateRequest, defaultSerializationSettings));
            request.Resource = SetInterSiteAphCertificateSetApplianceProxyCertificateForInterSiteCommunicationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTOidcEndPointType AddOidcEndPoint(NSXTOidcEndPointType OidcEndPoint)
        {
            if (OidcEndPoint == null) { throw new System.ArgumentNullException("OidcEndPoint cannot be null"); }
            NSXTOidcEndPointType returnValue = default(NSXTOidcEndPointType);
            StringBuilder AddOidcEndPointServiceURL = new StringBuilder("/trust-management/oidc-uris");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(OidcEndPoint, defaultSerializationSettings));
            request.Resource = AddOidcEndPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTOidcEndPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTOidcEndPointListResultType ListOidcEndPoints()
        {
            NSXTOidcEndPointListResultType returnValue = default(NSXTOidcEndPointListResultType);
            StringBuilder ListOidcEndPointsServiceURL = new StringBuilder("/trust-management/oidc-uris");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListOidcEndPointsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTOidcEndPointListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePrincipalIdentity(string PrincipalIdentityId)
        {
            if (PrincipalIdentityId == null) { throw new System.ArgumentNullException("PrincipalIdentityId cannot be null"); }
            
            StringBuilder DeletePrincipalIdentityServiceURL = new StringBuilder("/trust-management/principal-identities/{principal-identity-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePrincipalIdentityServiceURL.Replace("{principal-identity-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PrincipalIdentityId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePrincipalIdentityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPrincipalIdentityType GetPrincipalIdentity(string PrincipalIdentityId)
        {
            if (PrincipalIdentityId == null) { throw new System.ArgumentNullException("PrincipalIdentityId cannot be null"); }
            NSXTPrincipalIdentityType returnValue = default(NSXTPrincipalIdentityType);
            StringBuilder GetPrincipalIdentityServiceURL = new StringBuilder("/trust-management/principal-identities/{principal-identity-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPrincipalIdentityServiceURL.Replace("{principal-identity-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PrincipalIdentityId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPrincipalIdentityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPrincipalIdentityType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTOidcEndPointType UpdateOidcEndPointThumbprintUpdateThumbprint(NSXTUpdateOidcEndPointThumbprintRequestType UpdateOidcEndPointThumbprintRequest)
        {
            if (UpdateOidcEndPointThumbprintRequest == null) { throw new System.ArgumentNullException("UpdateOidcEndPointThumbprintRequest cannot be null"); }
            NSXTOidcEndPointType returnValue = default(NSXTOidcEndPointType);
            StringBuilder UpdateOidcEndPointThumbprintUpdateThumbprintServiceURL = new StringBuilder("/trust-management/oidc-uris?action=update_thumbprint");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(UpdateOidcEndPointThumbprintRequest, defaultSerializationSettings));
            request.Resource = UpdateOidcEndPointThumbprintUpdateThumbprintServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTOidcEndPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCsrType GenerateCsrWithExtensions(NSXTCsrExtType CsrExt)
        {
            if (CsrExt == null) { throw new System.ArgumentNullException("CsrExt cannot be null"); }
            NSXTCsrType returnValue = default(NSXTCsrType);
            StringBuilder GenerateCsrWithExtensionsServiceURL = new StringBuilder("/trust-management/csrs-extended");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(CsrExt, defaultSerializationSettings));
            request.Resource = GenerateCsrWithExtensionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCsrType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPrincipalIdentityType RegisterPrincipalIdentityWithCertificate(NSXTPrincipalIdentityWithCertificateType PrincipalIdentityWithCertificate)
        {
            if (PrincipalIdentityWithCertificate == null) { throw new System.ArgumentNullException("PrincipalIdentityWithCertificate cannot be null"); }
            NSXTPrincipalIdentityType returnValue = default(NSXTPrincipalIdentityType);
            StringBuilder RegisterPrincipalIdentityWithCertificateServiceURL = new StringBuilder("/trust-management/principal-identities/with-certificate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PrincipalIdentityWithCertificate, defaultSerializationSettings));
            request.Resource = RegisterPrincipalIdentityWithCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPrincipalIdentityType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlDistributionPointType UpdateCrlDistributionPoint(string CrlDistributionPointId, NSXTCrlDistributionPointType CrlDistributionPoint)
        {
            if (CrlDistributionPointId == null) { throw new System.ArgumentNullException("CrlDistributionPointId cannot be null"); }
            if (CrlDistributionPoint == null) { throw new System.ArgumentNullException("CrlDistributionPoint cannot be null"); }
            NSXTCrlDistributionPointType returnValue = default(NSXTCrlDistributionPointType);
            StringBuilder UpdateCrlDistributionPointServiceURL = new StringBuilder("/trust-management/crl-distribution-points/{crl-distribution-point-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateCrlDistributionPointServiceURL.Replace("{crl-distribution-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlDistributionPointId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(CrlDistributionPoint, defaultSerializationSettings));
            request.Resource = UpdateCrlDistributionPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlDistributionPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteCrlDistributionPoint(string CrlDistributionPointId)
        {
            if (CrlDistributionPointId == null) { throw new System.ArgumentNullException("CrlDistributionPointId cannot be null"); }
            
            StringBuilder DeleteCrlDistributionPointServiceURL = new StringBuilder("/trust-management/crl-distribution-points/{crl-distribution-point-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteCrlDistributionPointServiceURL.Replace("{crl-distribution-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlDistributionPointId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteCrlDistributionPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlDistributionPointType GetCrlDistributionPoint(string CrlDistributionPointId)
        {
            if (CrlDistributionPointId == null) { throw new System.ArgumentNullException("CrlDistributionPointId cannot be null"); }
            NSXTCrlDistributionPointType returnValue = default(NSXTCrlDistributionPointType);
            StringBuilder GetCrlDistributionPointServiceURL = new StringBuilder("/trust-management/crl-distribution-points/{crl-distribution-point-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetCrlDistributionPointServiceURL.Replace("{crl-distribution-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlDistributionPointId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetCrlDistributionPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlDistributionPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTokenBasedPrincipalIdentityType RegisterTokenBasedPrincipalIdentity(NSXTTokenBasedPrincipalIdentityType TokenBasedPrincipalIdentity)
        {
            if (TokenBasedPrincipalIdentity == null) { throw new System.ArgumentNullException("TokenBasedPrincipalIdentity cannot be null"); }
            NSXTTokenBasedPrincipalIdentityType returnValue = default(NSXTTokenBasedPrincipalIdentityType);
            StringBuilder RegisterTokenBasedPrincipalIdentityServiceURL = new StringBuilder("/trust-management/token-principal-identities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(TokenBasedPrincipalIdentity, defaultSerializationSettings));
            request.Resource = RegisterTokenBasedPrincipalIdentityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTTokenBasedPrincipalIdentityType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTokenBasedPrincipalIdentityListResultType ListTokenBasedPrincipalIdentities()
        {
            NSXTTokenBasedPrincipalIdentityListResultType returnValue = default(NSXTTokenBasedPrincipalIdentityListResultType);
            StringBuilder ListTokenBasedPrincipalIdentitiesServiceURL = new StringBuilder("/trust-management/token-principal-identities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListTokenBasedPrincipalIdentitiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTTokenBasedPrincipalIdentityListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCsrType GenerateCsr(NSXTCsrType Csr)
        {
            if (Csr == null) { throw new System.ArgumentNullException("Csr cannot be null"); }
            NSXTCsrType returnValue = default(NSXTCsrType);
            StringBuilder GenerateCsrServiceURL = new StringBuilder("/trust-management/csrs");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(Csr, defaultSerializationSettings));
            request.Resource = GenerateCsrServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCsrType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCsrListType GetCsrs(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTCsrListType returnValue = default(NSXTCsrListType);
            StringBuilder GetCsrsServiceURL = new StringBuilder("/trust-management/csrs");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetCsrsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCsrListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlType UpdateCrl(string CrlId, NSXTCrlType Crl)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            if (Crl == null) { throw new System.ArgumentNullException("Crl cannot be null"); }
            NSXTCrlType returnValue = default(NSXTCrlType);
            StringBuilder UpdateCrlServiceURL = new StringBuilder("/trust-management/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Crl, defaultSerializationSettings));
            request.Resource = UpdateCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlType GetCrl(string CrlId, bool? Details = null)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            NSXTCrlType returnValue = default(NSXTCrlType);
            StringBuilder GetCrlServiceURL = new StringBuilder("/trust-management/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            request.Resource = GetCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteCrl(string CrlId)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            
            StringBuilder DeleteCrlServiceURL = new StringBuilder("/trust-management/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateType SelfSignCertificateSelfSign(string CsrId, long DaysValid)
        {
            if (CsrId == null) { throw new System.ArgumentNullException("CsrId cannot be null"); }
            if (DaysValid == null) { throw new System.ArgumentNullException("DaysValid cannot be null"); }
            NSXTCertificateType returnValue = default(NSXTCertificateType);
            StringBuilder SelfSignCertificateSelfSignServiceURL = new StringBuilder("/trust-management/csrs/{csr-id}?action=self_sign");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            SelfSignCertificateSelfSignServiceURL.Replace("{csr-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CsrId, System.Globalization.CultureInfo.InvariantCulture)));
            if (DaysValid != null) { request.AddQueryParameter("days_valid", DaysValid.ToString()); }
            request.Resource = SelfSignCertificateSelfSignServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteCertificate(string CertId)
        {
            if (CertId == null) { throw new System.ArgumentNullException("CertId cannot be null"); }
            
            StringBuilder DeleteCertificateServiceURL = new StringBuilder("/trust-management/certificates/{cert-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteCertificateServiceURL.Replace("{cert-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateType GetCertificate(string CertId, bool? Details = null)
        {
            if (CertId == null) { throw new System.ArgumentNullException("CertId cannot be null"); }
            NSXTCertificateType returnValue = default(NSXTCertificateType);
            StringBuilder GetCertificateServiceURL = new StringBuilder("/trust-management/certificates/{cert-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetCertificateServiceURL.Replace("{cert-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            request.Resource = GetCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPrincipalIdentityType UpdatePrincipalIdentityCertificateUpdateCertificate(NSXTUpdatePrincipalIdentityCertificateRequestType UpdatePrincipalIdentityCertificateRequest)
        {
            if (UpdatePrincipalIdentityCertificateRequest == null) { throw new System.ArgumentNullException("UpdatePrincipalIdentityCertificateRequest cannot be null"); }
            NSXTPrincipalIdentityType returnValue = default(NSXTPrincipalIdentityType);
            StringBuilder UpdatePrincipalIdentityCertificateUpdateCertificateServiceURL = new StringBuilder("/trust-management/principal-identities?action=update_certificate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(UpdatePrincipalIdentityCertificateRequest, defaultSerializationSettings));
            request.Resource = UpdatePrincipalIdentityCertificateUpdateCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPrincipalIdentityType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTokenBasedPrincipalIdentityType GetTokenBasedPrincipalIdentity(string PrincipalIdentityId)
        {
            if (PrincipalIdentityId == null) { throw new System.ArgumentNullException("PrincipalIdentityId cannot be null"); }
            NSXTTokenBasedPrincipalIdentityType returnValue = default(NSXTTokenBasedPrincipalIdentityType);
            StringBuilder GetTokenBasedPrincipalIdentityServiceURL = new StringBuilder("/trust-management/token-principal-identities/{principal-identity-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetTokenBasedPrincipalIdentityServiceURL.Replace("{principal-identity-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PrincipalIdentityId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetTokenBasedPrincipalIdentityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTTokenBasedPrincipalIdentityType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteTokenBasedPrincipalIdentity(string PrincipalIdentityId)
        {
            if (PrincipalIdentityId == null) { throw new System.ArgumentNullException("PrincipalIdentityId cannot be null"); }
            
            StringBuilder DeleteTokenBasedPrincipalIdentityServiceURL = new StringBuilder("/trust-management/token-principal-identities/{principal-identity-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteTokenBasedPrincipalIdentityServiceURL.Replace("{principal-identity-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PrincipalIdentityId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteTokenBasedPrincipalIdentityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCrlListType GetCrls(string? Cursor = null, bool? Details = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTCrlListType returnValue = default(NSXTCrlListType);
            StringBuilder GetCrlsServiceURL = new StringBuilder("/trust-management/crls");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = GetCrlsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCrlListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateProfileType GetCertificateProfile(string ServiceType)
        {
            if (ServiceType == null) { throw new System.ArgumentNullException("ServiceType cannot be null"); }
            NSXTCertificateProfileType returnValue = default(NSXTCertificateProfileType);
            StringBuilder GetCertificateProfileServiceURL = new StringBuilder("/trust-management/certificate-profile/{service-type}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetCertificateProfileServiceURL.Replace("{service-type}", System.Uri.EscapeDataString(Helpers.ConvertToString(ServiceType, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetCertificateProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void SetPrincipalIdentityCertificateForFederationSetPiCertificateForFederation(NSXTSetPrincipalIdentityCertificateForFederationRequestType SetPrincipalIdentityCertificateForFederationRequest)
        {
            if (SetPrincipalIdentityCertificateForFederationRequest == null) { throw new System.ArgumentNullException("SetPrincipalIdentityCertificateForFederationRequest cannot be null"); }
            
            StringBuilder SetPrincipalIdentityCertificateForFederationSetPiCertificateForFederationServiceURL = new StringBuilder("/trust-management/certificates?action=set_pi_certificate_for_federation");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(SetPrincipalIdentityCertificateForFederationRequest, defaultSerializationSettings));
            request.Resource = SetPrincipalIdentityCertificateForFederationSetPiCertificateForFederationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateListType GetCertificates(string? Cursor = null, bool? Details = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTCertificateListType returnValue = default(NSXTCertificateListType);
            StringBuilder GetCertificatesServiceURL = new StringBuilder("/trust-management/certificates");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = GetCertificatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPrincipalIdentityType RegisterPrincipalIdentity(NSXTPrincipalIdentityType PrincipalIdentity)
        {
            if (PrincipalIdentity == null) { throw new System.ArgumentNullException("PrincipalIdentity cannot be null"); }
            NSXTPrincipalIdentityType returnValue = default(NSXTPrincipalIdentityType);
            StringBuilder RegisterPrincipalIdentityServiceURL = new StringBuilder("/trust-management/principal-identities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PrincipalIdentity, defaultSerializationSettings));
            request.Resource = RegisterPrincipalIdentityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPrincipalIdentityType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPrincipalIdentityListType GetPrincipalIdentities()
        {
            NSXTPrincipalIdentityListType returnValue = default(NSXTPrincipalIdentityListType);
            StringBuilder GetPrincipalIdentitiesServiceURL = new StringBuilder("/trust-management/principal-identities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetPrincipalIdentitiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPrincipalIdentityListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTCertificateListType AddCertificateImport(NSXTTrustObjectDataType TrustObjectData)
        {
            if (TrustObjectData == null) { throw new System.ArgumentNullException("TrustObjectData cannot be null"); }
            NSXTCertificateListType returnValue = default(NSXTCertificateListType);
            StringBuilder AddCertificateImportServiceURL = new StringBuilder("/trust-management/certificates?action=import");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(TrustObjectData, defaultSerializationSettings));
            request.Resource = AddCertificateImportServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTCertificateListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void ApplyCertificateApplyCertificate(string CertId, string ServiceType, string? NodeId = null)
        {
            if (CertId == null) { throw new System.ArgumentNullException("CertId cannot be null"); }
            if (ServiceType == null) { throw new System.ArgumentNullException("ServiceType cannot be null"); }
            
            StringBuilder ApplyCertificateApplyCertificateServiceURL = new StringBuilder("/trust-management/certificates/{cert-id}?action=apply_certificate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            ApplyCertificateApplyCertificateServiceURL.Replace("{cert-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertId, System.Globalization.CultureInfo.InvariantCulture)));
            if (NodeId != null) { request.AddQueryParameter("node_id", NodeId.ToString()); }
            if (ServiceType != null) { request.AddQueryParameter("service_type", ServiceType.ToString()); }
            request.Resource = ApplyCertificateApplyCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public string GetCrlDistributionPointPem(NSXTCrlPemRequestTypeType CrlPemRequestType)
        {
            if (CrlPemRequestType == null) { throw new System.ArgumentNullException("CrlPemRequestType cannot be null"); }
            string returnValue  = default(string);
            StringBuilder GetCrlDistributionPointPemServiceURL = new StringBuilder("/trust-management/crl-distribution-points/pem-file");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(CrlPemRequestType, defaultSerializationSettings));
            request.Resource = GetCrlDistributionPointPemServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<string>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
