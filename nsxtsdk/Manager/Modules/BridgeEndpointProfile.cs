// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class BridgeEndpointProfile
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public BridgeEndpointProfile(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBridgeEndpointProfileType UpdateBridgeEndpointProfile(string BridgeendpointprofileId, NSXTBridgeEndpointProfileType BridgeEndpointProfile)
        {
            if (BridgeendpointprofileId == null) { throw new System.ArgumentNullException("BridgeendpointprofileId cannot be null"); }
            if (BridgeEndpointProfile == null) { throw new System.ArgumentNullException("BridgeEndpointProfile cannot be null"); }
            NSXTBridgeEndpointProfileType returnValue = default(NSXTBridgeEndpointProfileType);
            StringBuilder UpdateBridgeEndpointProfileServiceURL = new StringBuilder("/bridge-endpoint-profiles/{bridgeendpointprofile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateBridgeEndpointProfileServiceURL.Replace("{bridgeendpointprofile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BridgeendpointprofileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(BridgeEndpointProfile, defaultSerializationSettings));
            request.Resource = UpdateBridgeEndpointProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBridgeEndpointProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBridgeEndpointProfileType GetBridgeEndpointProfile(string BridgeendpointprofileId)
        {
            if (BridgeendpointprofileId == null) { throw new System.ArgumentNullException("BridgeendpointprofileId cannot be null"); }
            NSXTBridgeEndpointProfileType returnValue = default(NSXTBridgeEndpointProfileType);
            StringBuilder GetBridgeEndpointProfileServiceURL = new StringBuilder("/bridge-endpoint-profiles/{bridgeendpointprofile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetBridgeEndpointProfileServiceURL.Replace("{bridgeendpointprofile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BridgeendpointprofileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetBridgeEndpointProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBridgeEndpointProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteBridgeEndpointProfile(string BridgeendpointprofileId)
        {
            if (BridgeendpointprofileId == null) { throw new System.ArgumentNullException("BridgeendpointprofileId cannot be null"); }
            
            StringBuilder DeleteBridgeEndpointProfileServiceURL = new StringBuilder("/bridge-endpoint-profiles/{bridgeendpointprofile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteBridgeEndpointProfileServiceURL.Replace("{bridgeendpointprofile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BridgeendpointprofileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteBridgeEndpointProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBridgeEndpointProfileType CreateBridgeEndpointProfile(NSXTBridgeEndpointProfileType BridgeEndpointProfile)
        {
            if (BridgeEndpointProfile == null) { throw new System.ArgumentNullException("BridgeEndpointProfile cannot be null"); }
            NSXTBridgeEndpointProfileType returnValue = default(NSXTBridgeEndpointProfileType);
            StringBuilder CreateBridgeEndpointProfileServiceURL = new StringBuilder("/bridge-endpoint-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(BridgeEndpointProfile, defaultSerializationSettings));
            request.Resource = CreateBridgeEndpointProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBridgeEndpointProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTBridgeEndpointProfileListResultType ListBridgeEndpointProfiles(string? Cursor = null, string? EdgeClusterId = null, string? FailoverMode = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTBridgeEndpointProfileListResultType returnValue = default(NSXTBridgeEndpointProfileListResultType);
            StringBuilder ListBridgeEndpointProfilesServiceURL = new StringBuilder("/bridge-endpoint-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EdgeClusterId != null) { request.AddQueryParameter("edge_cluster_id", EdgeClusterId.ToString()); }
            if (FailoverMode != null) { request.AddQueryParameter("failover_mode", FailoverMode.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListBridgeEndpointProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTBridgeEndpointProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
