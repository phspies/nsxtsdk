// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class FailureDomain
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public FailureDomain(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTFailureDomainType UpdateFailureDomain(string FailureDomainId, NSXTFailureDomainType FailureDomain)
        {
            if (FailureDomainId == null) { throw new System.ArgumentNullException("FailureDomainId cannot be null"); }
            if (FailureDomain == null) { throw new System.ArgumentNullException("FailureDomain cannot be null"); }
            NSXTFailureDomainType returnValue = default(NSXTFailureDomainType);
            StringBuilder UpdateFailureDomainServiceURL = new StringBuilder("/failure-domains/{failure-domain-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateFailureDomainServiceURL.Replace("{failure-domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FailureDomainId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(FailureDomain, defaultSerializationSettings));
            request.Resource = UpdateFailureDomainServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTFailureDomainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteFailureDomain(string FailureDomainId)
        {
            if (FailureDomainId == null) { throw new System.ArgumentNullException("FailureDomainId cannot be null"); }
            
            StringBuilder DeleteFailureDomainServiceURL = new StringBuilder("/failure-domains/{failure-domain-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteFailureDomainServiceURL.Replace("{failure-domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FailureDomainId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteFailureDomainServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTFailureDomainType GetFailureDomain(string FailureDomainId)
        {
            if (FailureDomainId == null) { throw new System.ArgumentNullException("FailureDomainId cannot be null"); }
            NSXTFailureDomainType returnValue = default(NSXTFailureDomainType);
            StringBuilder GetFailureDomainServiceURL = new StringBuilder("/failure-domains/{failure-domain-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetFailureDomainServiceURL.Replace("{failure-domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FailureDomainId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetFailureDomainServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTFailureDomainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTFailureDomainType CreateFailureDomain(NSXTFailureDomainType FailureDomain)
        {
            if (FailureDomain == null) { throw new System.ArgumentNullException("FailureDomain cannot be null"); }
            NSXTFailureDomainType returnValue = default(NSXTFailureDomainType);
            StringBuilder CreateFailureDomainServiceURL = new StringBuilder("/failure-domains");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(FailureDomain, defaultSerializationSettings));
            request.Resource = CreateFailureDomainServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTFailureDomainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTFailureDomainListResultType ListFailureDomains()
        {
            NSXTFailureDomainListResultType returnValue = default(NSXTFailureDomainListResultType);
            StringBuilder ListFailureDomainsServiceURL = new StringBuilder("/failure-domains");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListFailureDomainsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTFailureDomainListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
