// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class Ipam
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public Ipam(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpBlockSubnetType CreateIpBlockSubnet(NSXTIpBlockSubnetType IpBlockSubnet)
        {
            if (IpBlockSubnet == null) { throw new System.ArgumentNullException("IpBlockSubnet cannot be null"); }
            NSXTIpBlockSubnetType returnValue = default(NSXTIpBlockSubnetType);
            StringBuilder CreateIpBlockSubnetServiceURL = new StringBuilder("/pools/ip-subnets");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(IpBlockSubnet, defaultSerializationSettings));
            request.Resource = CreateIpBlockSubnetServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpBlockSubnetType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpBlockSubnetListResultType ListIpBlockSubnets(string? BlockId = null, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIpBlockSubnetListResultType returnValue = default(NSXTIpBlockSubnetListResultType);
            StringBuilder ListIpBlockSubnetsServiceURL = new StringBuilder("/pools/ip-subnets");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (BlockId != null) { request.AddQueryParameter("block_id", BlockId.ToString()); }
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpBlockSubnetsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpBlockSubnetListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpBlockType CreateIpBlock(NSXTIpBlockType IpBlock)
        {
            if (IpBlock == null) { throw new System.ArgumentNullException("IpBlock cannot be null"); }
            NSXTIpBlockType returnValue = default(NSXTIpBlockType);
            StringBuilder CreateIpBlockServiceURL = new StringBuilder("/pools/ip-blocks");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(IpBlock, defaultSerializationSettings));
            request.Resource = CreateIpBlockServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpBlockType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpBlockListResultType ListIpBlocks(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIpBlockListResultType returnValue = default(NSXTIpBlockListResultType);
            StringBuilder ListIpBlocksServiceURL = new StringBuilder("/pools/ip-blocks");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpBlocksServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpBlockListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpBlockType UpdateIpBlock(string BlockId, NSXTIpBlockType IpBlock)
        {
            if (BlockId == null) { throw new System.ArgumentNullException("BlockId cannot be null"); }
            if (IpBlock == null) { throw new System.ArgumentNullException("IpBlock cannot be null"); }
            NSXTIpBlockType returnValue = default(NSXTIpBlockType);
            StringBuilder UpdateIpBlockServiceURL = new StringBuilder("/pools/ip-blocks/{block-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateIpBlockServiceURL.Replace("{block-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BlockId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpBlock, defaultSerializationSettings));
            request.Resource = UpdateIpBlockServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpBlockType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpBlockType ReadIpBlock(string BlockId)
        {
            if (BlockId == null) { throw new System.ArgumentNullException("BlockId cannot be null"); }
            NSXTIpBlockType returnValue = default(NSXTIpBlockType);
            StringBuilder ReadIpBlockServiceURL = new StringBuilder("/pools/ip-blocks/{block-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpBlockServiceURL.Replace("{block-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BlockId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpBlockServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpBlockType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpBlock(string BlockId)
        {
            if (BlockId == null) { throw new System.ArgumentNullException("BlockId cannot be null"); }
            
            StringBuilder DeleteIpBlockServiceURL = new StringBuilder("/pools/ip-blocks/{block-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpBlockServiceURL.Replace("{block-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BlockId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteIpBlockServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAllocationIpAddressType AllocateOrReleaseFromIpBlockSubnet(string SubnetId, NSXTAllocationIpAddressType AllocationIpAddress, string Action)
        {
            if (SubnetId == null) { throw new System.ArgumentNullException("SubnetId cannot be null"); }
            if (AllocationIpAddress == null) { throw new System.ArgumentNullException("AllocationIpAddress cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            NSXTAllocationIpAddressType returnValue = default(NSXTAllocationIpAddressType);
            StringBuilder AllocateOrReleaseFromIpBlockSubnetServiceURL = new StringBuilder("/pools/ip-subnets/{subnet-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            AllocateOrReleaseFromIpBlockSubnetServiceURL.Replace("{subnet-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SubnetId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(AllocationIpAddress, defaultSerializationSettings));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            request.Resource = AllocateOrReleaseFromIpBlockSubnetServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTAllocationIpAddressType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpBlockSubnet(string SubnetId)
        {
            if (SubnetId == null) { throw new System.ArgumentNullException("SubnetId cannot be null"); }
            
            StringBuilder DeleteIpBlockSubnetServiceURL = new StringBuilder("/pools/ip-subnets/{subnet-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpBlockSubnetServiceURL.Replace("{subnet-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SubnetId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteIpBlockSubnetServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpBlockSubnetType ReadIpBlockSubnet(string SubnetId)
        {
            if (SubnetId == null) { throw new System.ArgumentNullException("SubnetId cannot be null"); }
            NSXTIpBlockSubnetType returnValue = default(NSXTIpBlockSubnetType);
            StringBuilder ReadIpBlockSubnetServiceURL = new StringBuilder("/pools/ip-subnets/{subnet-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpBlockSubnetServiceURL.Replace("{subnet-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SubnetId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpBlockSubnetServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpBlockSubnetType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpPoolType CreateIpPool(NSXTIpPoolType IpPool)
        {
            if (IpPool == null) { throw new System.ArgumentNullException("IpPool cannot be null"); }
            NSXTIpPoolType returnValue = default(NSXTIpPoolType);
            StringBuilder CreateIpPoolServiceURL = new StringBuilder("/pools/ip-pools");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(IpPool, defaultSerializationSettings));
            request.Resource = CreateIpPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpPoolType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpPoolListResultType ListIpPools(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIpPoolListResultType returnValue = default(NSXTIpPoolListResultType);
            StringBuilder ListIpPoolsServiceURL = new StringBuilder("/pools/ip-pools");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpPoolsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpPoolListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpPoolType UpdateIpPool(string PoolId, NSXTIpPoolType IpPool)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            if (IpPool == null) { throw new System.ArgumentNullException("IpPool cannot be null"); }
            NSXTIpPoolType returnValue = default(NSXTIpPoolType);
            StringBuilder UpdateIpPoolServiceURL = new StringBuilder("/pools/ip-pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateIpPoolServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpPool, defaultSerializationSettings));
            request.Resource = UpdateIpPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpPoolType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAllocationIpAddressType AllocateOrReleaseFromIpPool(string PoolId, NSXTAllocationIpAddressType AllocationIpAddress, string Action)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            if (AllocationIpAddress == null) { throw new System.ArgumentNullException("AllocationIpAddress cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            NSXTAllocationIpAddressType returnValue = default(NSXTAllocationIpAddressType);
            StringBuilder AllocateOrReleaseFromIpPoolServiceURL = new StringBuilder("/pools/ip-pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            AllocateOrReleaseFromIpPoolServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(AllocationIpAddress, defaultSerializationSettings));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            request.Resource = AllocateOrReleaseFromIpPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTAllocationIpAddressType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIpPoolType ReadIpPool(string PoolId)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            NSXTIpPoolType returnValue = default(NSXTIpPoolType);
            StringBuilder ReadIpPoolServiceURL = new StringBuilder("/pools/ip-pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpPoolServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIpPoolType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpPool(string PoolId, bool? Force = null)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            
            StringBuilder DeleteIpPoolServiceURL = new StringBuilder("/pools/ip-pools/{pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpPoolServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteIpPoolServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAllocationIpAddressListResultType ListIpPoolAllocations(string PoolId)
        {
            if (PoolId == null) { throw new System.ArgumentNullException("PoolId cannot be null"); }
            NSXTAllocationIpAddressListResultType returnValue = default(NSXTAllocationIpAddressListResultType);
            StringBuilder ListIpPoolAllocationsServiceURL = new StringBuilder("/pools/ip-pools/{pool-id}/allocations");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListIpPoolAllocationsServiceURL.Replace("{pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ListIpPoolAllocationsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTAllocationIpAddressListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
