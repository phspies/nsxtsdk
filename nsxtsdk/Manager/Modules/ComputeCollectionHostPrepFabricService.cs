// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class ComputeCollectionHostPrepFabricService
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public ComputeCollectionHostPrepFabricService(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNodeType HostPrepDiscoveredNodeHostprep(string NodeExtId)
        {
            if (NodeExtId == null) { throw new System.ArgumentNullException("NodeExtId cannot be null"); }
            NSXTNodeType returnValue = default(NSXTNodeType);
            StringBuilder HostPrepDiscoveredNodeHostprepServiceURL = new StringBuilder("/fabric/discovered-nodes/{node-ext-id}?action=hostprep");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            HostPrepDiscoveredNodeHostprepServiceURL.Replace("{node-ext-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeExtId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = HostPrepDiscoveredNodeHostprepServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNodeType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeCollectionFabricTemplateType CreateComputeCollectionFabricTemplate(NSXTComputeCollectionFabricTemplateType ComputeCollectionFabricTemplate)
        {
            if (ComputeCollectionFabricTemplate == null) { throw new System.ArgumentNullException("ComputeCollectionFabricTemplate cannot be null"); }
            NSXTComputeCollectionFabricTemplateType returnValue = default(NSXTComputeCollectionFabricTemplateType);
            StringBuilder CreateComputeCollectionFabricTemplateServiceURL = new StringBuilder("/fabric/compute-collection-fabric-templates");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeCollectionFabricTemplate, defaultSerializationSettings));
            request.Resource = CreateComputeCollectionFabricTemplateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeCollectionFabricTemplateType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeCollectionFabricTemplateListResultType ListComputeCollectionFabricTemplates(string? ComputeCollectionId = null)
        {
            NSXTComputeCollectionFabricTemplateListResultType returnValue = default(NSXTComputeCollectionFabricTemplateListResultType);
            StringBuilder ListComputeCollectionFabricTemplatesServiceURL = new StringBuilder("/fabric/compute-collection-fabric-templates");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (ComputeCollectionId != null) { request.AddQueryParameter("compute_collection_id", ComputeCollectionId.ToString()); }
            request.Resource = ListComputeCollectionFabricTemplatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeCollectionFabricTemplateListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeCollectionFabricTemplateType UpdateComputeCollectionFabricTemplate(string FabricTemplateId, NSXTComputeCollectionFabricTemplateType ComputeCollectionFabricTemplate)
        {
            if (FabricTemplateId == null) { throw new System.ArgumentNullException("FabricTemplateId cannot be null"); }
            if (ComputeCollectionFabricTemplate == null) { throw new System.ArgumentNullException("ComputeCollectionFabricTemplate cannot be null"); }
            NSXTComputeCollectionFabricTemplateType returnValue = default(NSXTComputeCollectionFabricTemplateType);
            StringBuilder UpdateComputeCollectionFabricTemplateServiceURL = new StringBuilder("/fabric/compute-collection-fabric-templates/{fabric-template-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateComputeCollectionFabricTemplateServiceURL.Replace("{fabric-template-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FabricTemplateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeCollectionFabricTemplate, defaultSerializationSettings));
            request.Resource = UpdateComputeCollectionFabricTemplateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeCollectionFabricTemplateType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeCollectionFabricTemplateType GetComputeCollectionFabricTemplate(string FabricTemplateId)
        {
            if (FabricTemplateId == null) { throw new System.ArgumentNullException("FabricTemplateId cannot be null"); }
            NSXTComputeCollectionFabricTemplateType returnValue = default(NSXTComputeCollectionFabricTemplateType);
            StringBuilder GetComputeCollectionFabricTemplateServiceURL = new StringBuilder("/fabric/compute-collection-fabric-templates/{fabric-template-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetComputeCollectionFabricTemplateServiceURL.Replace("{fabric-template-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FabricTemplateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetComputeCollectionFabricTemplateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeCollectionFabricTemplateType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteComputeCollectionFabricTemplate(string FabricTemplateId)
        {
            if (FabricTemplateId == null) { throw new System.ArgumentNullException("FabricTemplateId cannot be null"); }
            
            StringBuilder DeleteComputeCollectionFabricTemplateServiceURL = new StringBuilder("/fabric/compute-collection-fabric-templates/{fabric-template-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteComputeCollectionFabricTemplateServiceURL.Replace("{fabric-template-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FabricTemplateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteComputeCollectionFabricTemplateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
    }
}
