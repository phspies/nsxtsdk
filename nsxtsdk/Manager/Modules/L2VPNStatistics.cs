// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class L2VPNStatistics
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public L2VPNStatistics(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VPNSessionSummaryType GetL2VpnsessionSummary(string? Source = null)
        {
            NSXTL2VPNSessionSummaryType returnValue = default(NSXTL2VPNSessionSummaryType);
            StringBuilder GetL2VpnsessionSummaryServiceURL = new StringBuilder("/vpn/l2vpn/sessions/summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetL2VpnsessionSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetL2VpnsessionSummaryServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VPNSessionSummaryType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VPNSessionSummaryType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VPNSessionStatusType GetL2VpnsessionStatus(string SessionId, string? Source = null)
        {
            if (SessionId == null) { throw new System.ArgumentNullException("SessionId cannot be null"); }
            NSXTL2VPNSessionStatusType returnValue = default(NSXTL2VPNSessionStatusType);
            StringBuilder GetL2VpnsessionStatusServiceURL = new StringBuilder("/vpn/l2vpn/sessions/{session-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetL2VpnsessionStatusServiceURL.Replace("{session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SessionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetL2VpnsessionStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetL2VpnsessionStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VPNSessionStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VPNSessionStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VPNSessionRemoteMacsType GetL2VpnsessionRemoteMacsForLS(string SessionId, string? LogicalSwitchId = null)
        {
            if (SessionId == null) { throw new System.ArgumentNullException("SessionId cannot be null"); }
            NSXTL2VPNSessionRemoteMacsType returnValue = default(NSXTL2VPNSessionRemoteMacsType);
            StringBuilder GetL2VpnsessionRemoteMacsForLSServiceURL = new StringBuilder("/vpn/l2vpn/sessions/{session-id}/remote-mac");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetL2VpnsessionRemoteMacsForLSServiceURL.Replace("{session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SessionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (LogicalSwitchId != null) { request.AddQueryParameter("logical_switch_id", LogicalSwitchId.ToString()); }
            request.Resource = GetL2VpnsessionRemoteMacsForLSServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetL2VpnsessionRemoteMacsForLSServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VPNSessionRemoteMacsType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VPNSessionRemoteMacsType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTL2VPNSessionStatisticsType GetL2VpnsessionStatistics(string SessionId, string? Source = null)
        {
            if (SessionId == null) { throw new System.ArgumentNullException("SessionId cannot be null"); }
            NSXTL2VPNSessionStatisticsType returnValue = default(NSXTL2VPNSessionStatisticsType);
            StringBuilder GetL2VpnsessionStatisticsServiceURL = new StringBuilder("/vpn/l2vpn/sessions/{session-id}/statistics");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetL2VpnsessionStatisticsServiceURL.Replace("{session-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SessionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetL2VpnsessionStatisticsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetL2VpnsessionStatisticsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTL2VPNSessionStatisticsType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTL2VPNSessionStatisticsType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
