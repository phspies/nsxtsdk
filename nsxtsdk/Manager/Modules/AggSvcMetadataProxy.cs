// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.ManagerModels;

namespace nsxtapi.ManagerModules
{
    public class AggSvcMetadataProxy
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public AggSvcMetadataProxy(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMetadataProxyStatusType GetMetadataProxyStatus(string ProxyId, string LogicalSwitchId)
        {
            if (ProxyId == null) { throw new System.ArgumentNullException("ProxyId cannot be null"); }
            if (LogicalSwitchId == null) { throw new System.ArgumentNullException("LogicalSwitchId cannot be null"); }
            NSXTMetadataProxyStatusType returnValue = default(NSXTMetadataProxyStatusType);
            StringBuilder GetMetadataProxyStatusServiceURL = new StringBuilder("/md-proxies/{proxy-id}/{logical-switch-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetMetadataProxyStatusServiceURL.Replace("{proxy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ProxyId, System.Globalization.CultureInfo.InvariantCulture)));
            GetMetadataProxyStatusServiceURL.Replace("{logical-switch-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LogicalSwitchId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetMetadataProxyStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMetadataProxyStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTMetadataProxyStatisticsType GetMetadataProxyStatistics(string ProxyId, string? LogicalSwitchId = null, string? Source = null)
        {
            if (ProxyId == null) { throw new System.ArgumentNullException("ProxyId cannot be null"); }
            NSXTMetadataProxyStatisticsType returnValue = default(NSXTMetadataProxyStatisticsType);
            StringBuilder GetMetadataProxyStatisticsServiceURL = new StringBuilder("/md-proxies/{proxy-id}/statistics");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetMetadataProxyStatisticsServiceURL.Replace("{proxy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ProxyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (LogicalSwitchId != null) { request.AddQueryParameter("logical_switch_id", LogicalSwitchId.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetMetadataProxyStatisticsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTMetadataProxyStatisticsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
