// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.ComponentModel;
using NJsonSchema.Converters;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTBFDDiagnosticCountType 
    {
        /// <summary>
        /// Number of tunnels with concatenated path down diagnostic message
        /// </summary>
        public long? ConcatenatedPathDownCount { get; set; }
        /// <summary>
        /// Number of tunnels with administratively down diagnostic message
        /// </summary>
        public long? AdministrativelyDownCount { get; set; }
        /// <summary>
        /// Number of tunnels with no diagnostic
        /// </summary>
        public long? NoDiagnosticCount { get; set; }
        /// <summary>
        /// Number of tunnels with path down diagnostic message
        /// </summary>
        public long? PathDownCount { get; set; }
        /// <summary>
        /// Number of tunnels with reverse concatenated path down diagnostic message
        /// </summary>
        public long? ReverseConcatenatedPathDownCount { get; set; }
        /// <summary>
        /// Number of tunnels neighbor signaled session down
        /// </summary>
        public long? NeighborSignaledSessionDownCount { get; set; }
        /// <summary>
        /// Number of tunnels with control detection time expired diagnostic message
        /// </summary>
        public long? ControlDetectionTimeExpiredCount { get; set; }
        /// <summary>
        /// Number of tunnels with echo function failed diagnostic message
        /// </summary>
        public long? EchoFunctionFailedCount { get; set; }
        /// <summary>
        /// Number of tunnels with forwarding plane reset diagnostic message
        /// </summary>
        public long? ForwardingPlaneResetCount { get; set; }
    }
}
