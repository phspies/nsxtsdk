// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTWidgetConfigurationType : NSXTManagedResourceType
    {
        public NSXTWidgetConfigurationType()
        {
            FilterValueRequired = test
        }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "feature_set")]
        [NSXTProperty(IsRequired: false, Description: @"")]
        public NSXTFeatureSetType FeatureSet { get; set; }
        /// <summary>
        /// List of plotting configuration for a given widget. Widget plotting configurations which are common across all the
        /// widgets types should be define here.
        /// </summary>
        [JsonProperty(PropertyName = "plot_configs")]
        [NSXTProperty(IsRequired: false, Description: @"List of plotting configuration for a given widget. Widget plotting configurations which are common across all the widgets types should be define here.")]
        public IList<NSXTWidgetPlotConfigurationType> PlotConfigs { get; set; }
        /// <summary>
        /// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
        /// </summary>
        [JsonProperty(PropertyName = "default_filter_value")]
        [NSXTProperty(IsRequired: false, Description: @"Default filter values to be passed to datasources. This will be used when the report is requested without filter values.")]
        public IList<NSXTDefaultFilterValueType> DefaultFilterValue { get; set; }
        /// <summary>
        /// Represents the vertical span of the widget / container. 1 Row span is equal to 20px.
        /// </summary>
        [JsonProperty(PropertyName = "rowspan")]
        [NSXTProperty(IsRequired: false, Description: @"Represents the vertical span of the widget / container. 1 Row span is equal to 20px.")]
        //[System.ComponentModel.DataAnnotations.MinLength(1)]
        public int? Rowspan { get; set; }
        /// <summary>
        /// Title of the widget. If display_name is omitted, the widget will be shown without a title.
        /// </summary>
        [JsonProperty(PropertyName = "display_name")]
        [NSXTProperty(IsRequired: false, Description: @"Title of the widget. If display_name is omitted, the widget will be shown without a title.")]
        public string? DisplayName { get; set; }
        /// <summary>
        /// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a
        /// 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at
        /// 'example_request' section of 'CreateWidgetConfiguration' API.
        /// </summary>
        [JsonProperty(PropertyName = "datasources")]
        [NSXTProperty(IsRequired: false, Description: @"The &apos;datasources&apos; represent the sources from which data will be fetched. Currently, only NSX-API is supported as a &apos;default&apos; datasource. An example of specifying &apos;default&apos; datasource along with the urls to fetch data from is given at &apos;example_request&apos; section of &apos;CreateWidgetConfiguration&apos; API.")]
        public IList<NSXTDatasourceType> Datasources { get; set; }
        /// <summary>
        /// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
        /// </summary>
        [JsonProperty(PropertyName = "weight")]
        [NSXTProperty(IsRequired: false, Description: @"Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.")]
        public int? Weight { get; set; }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "footer")]
        [NSXTProperty(IsRequired: false, Description: @"")]
        public NSXTFooterType Footer { get; set; }
        /// <summary>
        /// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
        /// </summary>
        [JsonProperty(PropertyName = "shared")]
        [NSXTProperty(IsRequired: false, Description: @"Please use the property &apos;shared&apos; of View instead of this. The widgets of a shared view are visible to other users.")]
        public bool? Shared { get; set; }
        /// <summary>
        /// Represents the horizontal span of the widget / container.
        /// </summary>
        [JsonProperty(PropertyName = "span")]
        [NSXTProperty(IsRequired: false, Description: @"Represents the horizontal span of the widget / container.")]
        //[System.ComponentModel.DataAnnotations.MinLength(1)]
        //[System.ComponentModel.DataAnnotations.MaxLength(12)]
        public int? Span { get; set; }
        /// <summary>
        /// Icons to be applied at dashboard for widgets and UI elements.
        /// </summary>
        [JsonProperty(PropertyName = "icons")]
        [NSXTProperty(IsRequired: false, Description: @"Icons to be applied at dashboard for widgets and UI elements.")]
        public IList<NSXTIconType> Icons { get; set; }
        /// <summary>
        /// Set to true if this widget should be used as a drilldown.
        /// </summary>
        [JsonProperty(PropertyName = "is_drilldown")]
        [NSXTProperty(IsRequired: false, Description: @"Set to true if this widget should be used as a drilldown.")]
        public bool? IsDrilldown { get; set; }
        /// <summary>
        /// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should
        /// be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value
        /// on filter change. This field is deprecated instead use 'filters' property.
        /// </summary>
        [JsonProperty(PropertyName = "filter")]
        [NSXTProperty(IsRequired: false, Description: @"Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change. This field is deprecated instead use &apos;filters&apos; property.")]
        public string? Filter { get; set; }
        /// <summary>
        /// If the value of this field is set to true then card header will be displayed otherwise only card will be displayed
        /// without header.
        /// </summary>
        [JsonProperty(PropertyName = "show_header")]
        [NSXTProperty(IsRequired: false, Description: @"If the value of this field is set to true then card header will be displayed otherwise only card will be displayed without header.")]
        public bool? ShowHeader { get; set; }
        /// <summary>
        /// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration,
        /// MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration,
        /// CustomFilterWidgetConfiguration, TimeRangeDropdownFilterWidgetConfiguration, SpacerWidgetConfiguration,
        /// LegendWidgetConfiguration and DropdownFilterWidgetConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "resource_type", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration, CustomFilterWidgetConfiguration, TimeRangeDropdownFilterWidgetConfiguration, SpacerWidgetConfiguration, LegendWidgetConfiguration and DropdownFilterWidgetConfiguration.")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTWidgetConfigurationResourceTypeEnumType ResourceType { get; set; }
        /// <summary>
        /// A List of filter applied to this widget configuration. This will be used to identify the filters applied to this widget.
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        [NSXTProperty(IsRequired: false, Description: @"A List of filter applied to this widget configuration. This will be used to identify the filters applied to this widget.")]
        public IList<string> Filters { get; set; }
        /// <summary>
        /// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown
        /// widget when it is associated with any other widget and provides more detailed information about any data item from the
        /// parent widget.
        /// </summary>
        [JsonProperty(PropertyName = "drilldown_id")]
        [NSXTProperty(IsRequired: false, Description: @"Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.")]
        public string? DrilldownId { get; set; }
        /// <summary>
        /// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then
        /// default_filter_value is manadatory.
        /// </summary>
        [JsonProperty(PropertyName = "filter_value_required")]
        [NSXTProperty(IsRequired: false, Description: @"Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.")]
        public bool? FilterValueRequired { get; set; }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "legend")]
        [NSXTProperty(IsRequired: false, Description: @"")]
        public NSXTLegendType Legend { get; set; }
        /// <summary>
        /// If the condition is met then the widget will be displayed to UI. If no condition is provided, then the widget will be
        /// displayed unconditionally.
        /// </summary>
        [JsonProperty(PropertyName = "condition")]
        [NSXTProperty(IsRequired: false, Description: @"If the condition is met then the widget will be displayed to UI. If no condition is provided, then the widget will be displayed unconditionally.")]
        public string? Condition { get; set; }
    }
}
