// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTPortMirroringSessionType : NSXTManagedResourceType
    {
        /// <summary>
        /// Port mirroring session direction
        /// </summary>
        [JsonProperty(PropertyName = "direction", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Port mirroring session direction")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTPortMirroringSessionDirectionEnumType Direction { get; set; }
        /// <summary>
        /// Mirror sources
        /// </summary>
        [JsonProperty(PropertyName = "mirror_sources", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Mirror sources")]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<NSXTMirrorSourceType> MirrorSources { get; set; }
        /// <summary>
        /// Only for Remote SPAN Port Mirror.
        /// </summary>
        [JsonProperty(PropertyName = "encapsulation_vlan_id")]
        [NSXTProperty(IsRequired: false, Description: @"Only for Remote SPAN Port Mirror.")]
        public long? EncapsulationVlanId { get; set; }
        /// <summary>
        /// If this property is unset, this session will be treated as
        /// LocalPortMirrorSession.
        /// </summary>
        [JsonProperty(PropertyName = "session_type")]
        [NSXTProperty(IsRequired: false, Description: @"If this property is unset, this session will be treated asLocalPortMirrorSession.")]
        [NSXTDefaultProperty(Default: "LocalPortMirrorSession")]
        public NSXTPortMirroringSessionSessionTypeEnumType? SessionType { get; set; }
        /// <summary>
        /// If this property is set, the packet will be truncated to the provided
        /// length. If this property is unset, entire packet will be mirrored.
        /// </summary>
        [JsonProperty(PropertyName = "snap_length")]
        [NSXTProperty(IsRequired: false, Description: @"If this property is set, the packet will be truncated to the providedlength. If this property is unset, entire packet will be mirrored.")]
        //[System.ComponentModel.DataAnnotations.MinLength(60)]
        //[System.ComponentModel.DataAnnotations.MaxLength(65535)]
        public long? SnapLength { get; set; }
        /// <summary>
        /// An array of 5-tuples used to filter packets for the mirror session, if not provided, all the packets will be mirrored.
        /// </summary>
        [JsonProperty(PropertyName = "port_mirroring_filters")]
        [NSXTProperty(IsRequired: false, Description: @"An array of 5-tuples used to filter packets for the mirror session, if not provided, all the packets will be mirrored.")]
        public IList<NSXTPortMirroringFilterType> PortMirroringFilters { get; set; }
        /// <summary>
        /// If set to mirror, mirror packet will be sent via dedicated mirror stack
        /// to destination; If set to default, mirror packet will be sent via default stack;
        /// So far, the value mirror can only be chosen in L3PortMirrorSession.
        /// </summary>
        [JsonProperty(PropertyName = "tcp_ip_stack")]
        [NSXTProperty(IsRequired: false, Description: @"If set to mirror, mirror packet will be sent via dedicated mirror stackto destination; If set to default, mirror packet will be sent via default stack;So far, the value mirror can only be chosen in L3PortMirrorSession.")]
        public NSXTPortMirroringSessionTcpIpStackEnumType? TcpIpStack { get; set; }
        /// <summary>
        /// Only for Remote SPAN Port Mirror. Whether to preserve original VLAN.
        /// </summary>
        [JsonProperty(PropertyName = "preserve_original_vlan")]
        [NSXTProperty(IsRequired: false, Description: @"Only for Remote SPAN Port Mirror. Whether to preserve original VLAN.")]
        public bool? PreserveOriginalVlan { get; set; }
        /// <summary>
        /// Mirror destination
        /// </summary>
        [JsonProperty(PropertyName = "mirror_destination", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Mirror destination")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTMirrorDestinationType MirrorDestination { get; set; }
    }
}
