// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTIpfixObsPointConfigType : NSXTManagedResourceType
    {
        /// <summary>
        /// The time in seconds after a Flow is expired if no more packets matching
        /// this Flow are received by the cache.
        /// </summary>
        [JsonProperty(PropertyName = "idle_timeout")]
        [NSXTProperty(IsRequired: false, Description: @"The time in seconds after a Flow is expired if no more packets matchingthis Flow are received by the cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(60)]
        //[System.ComponentModel.DataAnnotations.MaxLength(3600)]
        [NSXTDefaultProperty(Default: "")]
        public int? IdleTimeout { get; set; }
        /// <summary>
        /// An identifier that is unique to the exporting process and used to
        /// meter the Flows.
        /// </summary>
        [JsonProperty(PropertyName = "observation_domain_id")]
        [NSXTProperty(IsRequired: false, Description: @"An identifier that is unique to the exporting process and used tometer the Flows.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(4294967295)]
        [NSXTDefaultProperty(Default: "")]
        public long? ObservationDomainId { get; set; }
        /// <summary>
        /// List of IPFIX collectors
        /// </summary>
        [JsonProperty(PropertyName = "collectors")]
        [NSXTProperty(IsRequired: false, Description: @"List of IPFIX collectors")]
        public IList<NSXTIpfixCollectorType> Collectors { get; set; }
        /// <summary>
        /// The time in seconds after a Flow is expired even if more packets
        /// matching this Flow are received by the cache.
        /// </summary>
        [JsonProperty(PropertyName = "active_timeout")]
        [NSXTProperty(IsRequired: false, Description: @"The time in seconds after a Flow is expired even if more packetsmatching this Flow are received by the cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(60)]
        //[System.ComponentModel.DataAnnotations.MaxLength(3600)]
        [NSXTDefaultProperty(Default: "")]
        public int? ActiveTimeout { get; set; }
        /// <summary>
        /// The probability in percentage that a packet is sampled. The value should be
        /// in range (0,100] and can only have three decimal places at most. The probability
        /// is equal for every packet.
        /// </summary>
        [JsonProperty(PropertyName = "packet_sample_probability")]
        [NSXTProperty(IsRequired: false, Description: @"The probability in percentage that a packet is sampled. The value should be in range (0,100] and can only have three decimal places at most. The probability is equal for every packet.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(100)]
        [NSXTDefaultProperty(Default: "")]
        public double? PacketSampleProbability { get; set; }
        /// <summary>
        /// Enabled status of IPFIX export
        /// </summary>
        [JsonProperty(PropertyName = "enabled", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Enabled status of IPFIX export")]
        [System.ComponentModel.DataAnnotations.Required]
        public bool Enabled { get; set; }
        /// <summary>
        /// The maximum number of flow entries in each exporter flow cache.
        /// </summary>
        [JsonProperty(PropertyName = "max_flows")]
        [NSXTProperty(IsRequired: false, Description: @"The maximum number of flow entries in each exporter flow cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(4294967295)]
        [NSXTDefaultProperty(Default: "")]
        public long? MaxFlows { get; set; }
    }
}
