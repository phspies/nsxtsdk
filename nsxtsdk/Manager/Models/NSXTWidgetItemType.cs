// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// Represents a reference to a widget that is held by a container or a multi-widget or a View.
    /// </summary>
    [NSXTProperty(Description: @"Represents a reference to a widget that is held by a container or a multi-widget or a View.")]
    public class NSXTWidgetItemType 
    {
        /// <summary>
        /// Aligns widget either left or right.
        /// </summary>
        [JsonProperty(PropertyName = "alignment")]
        [NSXTProperty(IsRequired: false, Description: @"Aligns widget either left or right.")]
        [NSXTDefaultProperty(Default: "LEFT")]
        public NSXTWidgetItemAlignmentEnumType? Alignment { get; set; }
        /// <summary>
        /// If true, separates this widget in a container.
        /// </summary>
        [JsonProperty(PropertyName = "separator")]
        [NSXTProperty(IsRequired: false, Description: @"If true, separates this widget in a container.")]
        public bool? Separator { get; set; }
        /// <summary>
        /// Id of the widget configuration that is held by a multi-widget or a container or a view.
        /// </summary>
        [JsonProperty(PropertyName = "widget_id", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Id of the widget configuration that is held by a multi-widget or a container or a view.")]
        [System.ComponentModel.DataAnnotations.Required]
        public string WidgetId { get; set; }
        /// <summary>
        /// Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher
        /// it is in the placement order.
        /// </summary>
        [JsonProperty(PropertyName = "weight")]
        [NSXTProperty(IsRequired: false, Description: @"Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.")]
        [NSXTDefaultProperty(Default: "")]
        public int? Weight { get; set; }
        /// <summary>
        /// Applicable for 'DonutConfiguration' and 'StatsConfiguration' reports only. If label is not specified, then it defaults
        /// to the label of the donut or stats report.
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        [NSXTProperty(IsRequired: false, Description: @"Applicable for &apos;DonutConfiguration&apos; and &apos;StatsConfiguration&apos; reports only. If label is not specified, then it defaults to the label of the donut or stats report.")]
        public NSXTLabelType Label { get; set; }
    }
}
