// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTLbHttpsMonitorType : NSXTLbActiveMonitorType
    {
        /// <summary>
        /// The HTTP response status code should be a valid HTTP status code.
        /// </summary>
        [JsonProperty(PropertyName = "response_status_codes")]
        [NSXTProperty(IsRequired: false, Description: @"The HTTP response status code should be a valid HTTP status code.")]
        public int? ResponseStatusCodes { get; set; }
        /// <summary>
        /// A Certificate Revocation List (CRL) can be specified in the server-side
        /// SSL profile binding to disallow compromised server certificates.
        /// </summary>
        [JsonProperty(PropertyName = "server_auth_crl_ids")]
        [NSXTProperty(IsRequired: false, Description: @"A Certificate Revocation List (CRL) can be specified in the server-sideSSL profile binding to disallow compromised server certificates.")]
        public IList<string> ServerAuthCrlIds { get; set; }
        /// <summary>
        /// If server auth type is REQUIRED, server certificate must be signed by
        /// one of the trusted Certificate Authorities (CAs), also referred to as
        /// root CAs, whose self signed certificates are specified.
        /// </summary>
        [JsonProperty(PropertyName = "server_auth_ca_ids")]
        [NSXTProperty(IsRequired: false, Description: @"If server auth type is REQUIRED, server certificate must be signed byone of the trusted Certificate Authorities (CAs), also referred to asroot CAs, whose self signed certificates are specified.")]
        public IList<string> ServerAuthCaIds { get; set; }
        /// <summary>
        /// server authentication mode
        /// </summary>
        [JsonProperty(PropertyName = "server_auth")]
        [NSXTProperty(IsRequired: false, Description: @"server authentication mode")]
        [NSXTDefaultProperty(Default: "IGNORE")]
        public NSXTLbHttpsMonitorServerAuthEnumType? ServerAuth { get; set; }
        /// <summary>
        /// String to send as part of HTTP health check request body. Valid only
        /// for certain HTTP methods like POST.
        /// </summary>
        [JsonProperty(PropertyName = "request_body")]
        [NSXTProperty(IsRequired: false, Description: @"String to send as part of HTTP health check request body. Valid onlyfor certain HTTP methods like POST.")]
        public string? RequestBody { get; set; }
        /// <summary>
        /// If HTTP response body match string (regular expressions not supported)
        /// is specified (using LbHttpMonitor.response_body) then the
        /// healthcheck HTTP response body is matched against the specified string
        /// and server is considered healthy only if there is a match.
        /// If the response body string is not specified, HTTP healthcheck is
        /// considered successful if the HTTP response status code is 2xx, but it
        /// can be configured to accept other status codes as successful.
        /// </summary>
        [JsonProperty(PropertyName = "response_body")]
        [NSXTProperty(IsRequired: false, Description: @"If HTTP response body match string (regular expressions not supported)is specified (using LbHttpMonitor.response_body) then thehealthcheck HTTP response body is matched against the specified stringand server is considered healthy only if there is a match.If the response body string is not specified, HTTP healthcheck isconsidered successful if the HTTP response status code is 2xx, but itcan be configured to accept other status codes as successful.")]
        public string? ResponseBody { get; set; }
        /// <summary>
        /// supported SSL cipher list to servers
        /// </summary>
        [JsonProperty(PropertyName = "ciphers")]
        [NSXTProperty(IsRequired: false, Description: @"supported SSL cipher list to servers")]
        public IList<string> Ciphers { get; set; }
        /// <summary>
        /// Array of HTTP request headers
        /// </summary>
        [JsonProperty(PropertyName = "request_headers")]
        [NSXTProperty(IsRequired: false, Description: @"Array of HTTP request headers")]
        public IList<NSXTLbHttpRequestHeaderType> RequestHeaders { get; set; }
        /// <summary>
        /// client certificate can be specified to support client authentication.
        /// </summary>
        [JsonProperty(PropertyName = "client_certificate_id")]
        [NSXTProperty(IsRequired: false, Description: @"client certificate can be specified to support client authentication.")]
        public string? ClientCertificateId { get; set; }
        /// <summary>
        /// the health check method for HTTP monitor type
        /// </summary>
        [JsonProperty(PropertyName = "request_method")]
        [NSXTProperty(IsRequired: false, Description: @"the health check method for HTTP monitor type")]
        [NSXTDefaultProperty(Default: "GET")]
        public NSXTLbHttpsMonitorRequestMethodEnumType? RequestMethod { get; set; }
        /// <summary>
        /// This flag is set to true when all the ciphers and protocols are FIPS
        /// compliant. It is set to false when one of the ciphers or protocols are
        /// not FIPS compliant..
        /// </summary>
        [JsonProperty(PropertyName = "is_fips")]
        [NSXTProperty(IsRequired: false, Description: @"This flag is set to true when all the ciphers and protocols are FIPScompliant. It is set to false when one of the ciphers or protocols arenot FIPS compliant..")]
        public bool? IsFips { get; set; }
        /// <summary>
        /// authentication depth is used to set the verification depth in the server
        /// certificates chain.
        /// </summary>
        [JsonProperty(PropertyName = "certificate_chain_depth")]
        [NSXTProperty(IsRequired: false, Description: @"authentication depth is used to set the verification depth in the servercertificates chain.")]
        //[System.ComponentModel.DataAnnotations.MinLength(1)]
        //[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
        [NSXTDefaultProperty(Default: "")]
        public long? CertificateChainDepth { get; set; }
        /// <summary>
        /// This flag is set to true when all the ciphers and protocols are secure.
        /// It is set to false when one of the ciphers or protocols is insecure.
        /// </summary>
        [JsonProperty(PropertyName = "is_secure")]
        [NSXTProperty(IsRequired: false, Description: @"This flag is set to true when all the ciphers and protocols are secure.It is set to false when one of the ciphers or protocols is insecure.")]
        public bool? IsSecure { get; set; }
        /// <summary>
        /// URL used for HTTP monitor
        /// </summary>
        [JsonProperty(PropertyName = "request_url")]
        [NSXTProperty(IsRequired: false, Description: @"URL used for HTTP monitor")]
        public string? RequestUrl { get; set; }
        /// <summary>
        /// It is a label of cipher group which is mostly consumed by GUI.
        /// </summary>
        [JsonProperty(PropertyName = "cipher_group_label")]
        [NSXTProperty(IsRequired: false, Description: @"It is a label of cipher group which is mostly consumed by GUI.")]
        public NSXTLbHttpsMonitorCipherGroupLabelEnumType? CipherGroupLabel { get; set; }
        /// <summary>
        /// HTTP request version
        /// </summary>
        [JsonProperty(PropertyName = "request_version")]
        [NSXTProperty(IsRequired: false, Description: @"HTTP request version")]
        [NSXTDefaultProperty(Default: "HTTP_VERSION_1_1")]
        public NSXTLbHttpsMonitorRequestVersionEnumType? RequestVersion { get; set; }
        /// <summary>
        /// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default.
        /// SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.
        /// </summary>
        [JsonProperty(PropertyName = "protocols")]
        [NSXTProperty(IsRequired: false, Description: @"SSL versions TLS1.1 and TLS1.2 are supported and enabled by default.SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.")]
        public IList<string> Protocols { get; set; }
    }
}
