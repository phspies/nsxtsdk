// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTLiveTraceStatusType : NSXTManagedResourceType
    {
        /// <summary>
        /// Packet filter for flows of interest
        /// </summary>
        [JsonProperty(PropertyName = "filter")]
        [NSXTProperty(IsRequired: false, Description: @"Packet filter for flows of interest")]
        public NSXTLiveTraceFilterDataType Filter { get; set; }
        /// <summary>
        /// The operation state of live trace.
        /// IN_PROGRESS - collecting the session results.
        /// FINISHED - session results collect complete.
        /// PARTIAL_FINISHED - some ssession results may be lost.
        /// CANCELED - session cancelled by exception.
        /// TIMEOUT - session result is incomplete until timeout.
        /// </summary>
        [JsonProperty(PropertyName = "operation_state")]
        [NSXTProperty(IsRequired: false, Description: @"The operation state of live trace.IN_PROGRESS - collecting the session results.FINISHED - session results collect complete.PARTIAL_FINISHED - some ssession results may be lost.CANCELED - session cancelled by exception.TIMEOUT - session result is incomplete until timeout.")]
        public NSXTLiveTraceStatusOperationStateEnumType? OperationState { get; set; }
        /// <summary>
        /// Timeout in seconds for livetrace session
        /// </summary>
        [JsonProperty(PropertyName = "timeout")]
        [NSXTProperty(IsRequired: false, Description: @"Timeout in seconds for livetrace session")]
        //[System.ComponentModel.DataAnnotations.MinLength(5)]
        //[System.ComponentModel.DataAnnotations.MaxLength(300)]
        public long? Timeout { get; set; }
        /// <summary>
        /// The source logical port
        /// </summary>
        [JsonProperty(PropertyName = "source_lport")]
        [NSXTProperty(IsRequired: false, Description: @"The source logical port")]
        public string? SourceLport { get; set; }
        /// <summary>
        /// The status of a live trace request.
        /// SUCCESS_DELIVERED - The request is delivered successfully.
        /// LCP_FAILURE - nsx-cfgagent fails to realize the request.
        /// INVALID_FILTER - filter data invalid.
        /// DATAPATH_FAILURE - DP fails to realize the request.
        /// TIMEOUT - The response to the request is not received within timeout.
        /// CONNECTION_ERROR - There is connection error with host component.
        /// UNKNOWN - The status of request cannot be determined.
        /// </summary>
        [JsonProperty(PropertyName = "request_status")]
        [NSXTProperty(IsRequired: false, Description: @"The status of a live trace request.SUCCESS_DELIVERED - The request is delivered successfully.LCP_FAILURE - nsx-cfgagent fails to realize the request.INVALID_FILTER - filter data invalid.DATAPATH_FAILURE - DP fails to realize the request.TIMEOUT - The response to the request is not received within timeout.CONNECTION_ERROR - There is connection error with host component.UNKNOWN - The status of request cannot be determined.")]
        public NSXTLiveTraceStatusRequestStatusEnumType? RequestStatus { get; set; }
        /// <summary>
        /// Action to the filtered packet
        /// </summary>
        [JsonProperty(PropertyName = "actions")]
        [NSXTProperty(IsRequired: false, Description: @"Action to the filtered packet")]
        public NSXTLiveTraceActionConfigType Actions { get; set; }
    }
}
