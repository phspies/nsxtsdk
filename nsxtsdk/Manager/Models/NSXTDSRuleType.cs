// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTDSRuleType : NSXTEmbeddedResourceType
    {
        public NSXTDSRuleType()
        {
            Direction = test
            IpProtocol = test
        }
        /// <summary>
        /// Flag to indicate whether rule is default.
        /// </summary>
        [JsonProperty(PropertyName = "is_default")]
        [NSXTProperty(IsRequired: false, Description: @"Flag to indicate whether rule is default.")]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Rule direction in case of stateless distributed service rules. This will only considered if section level parameter is
        /// set to stateless. Default to IN_OUT if not specified.
        /// </summary>
        [JsonProperty(PropertyName = "direction")]
        [NSXTProperty(IsRequired: false, Description: @"Rule direction in case of stateless distributed service rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified.")]
        public NSXTDsruleDirectionEnumType? Direction { get; set; }
        /// <summary>
        /// User level field which will be printed in CLI and packet logs.
        /// </summary>
        [JsonProperty(PropertyName = "rule_tag")]
        [NSXTProperty(IsRequired: false, Description: @"User level field which will be printed in CLI and packet logs.")]
        public string? RuleTag { get; set; }
        /// <summary>
        /// Type of IP packet that should be matched while enforcing the rule.
        /// </summary>
        [JsonProperty(PropertyName = "ip_protocol")]
        [NSXTProperty(IsRequired: false, Description: @"Type of IP packet that should be matched while enforcing the rule.")]
        public NSXTDsruleIpProtocolEnumType? IpProtocol { get; set; }
        /// <summary>
        /// User notes specific to the rule.
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        [NSXTProperty(IsRequired: false, Description: @"User notes specific to the rule.")]
        public string? Notes { get; set; }
        /// <summary>
        /// List of object where rule will be enforced. The section level field overrides this one. Null will be treated as any.
        /// </summary>
        [JsonProperty(PropertyName = "applied_tos")]
        [NSXTProperty(IsRequired: false, Description: @"List of object where rule will be enforced. The section level field overrides this one. Null will be treated as any.")]
        public IList<NSXTResourceReferenceType> AppliedTos { get; set; }
        /// <summary>
        /// Flag to enable packet logging. Default is disabled.
        /// </summary>
        [JsonProperty(PropertyName = "logged")]
        [NSXTProperty(IsRequired: false, Description: @"Flag to enable packet logging. Default is disabled.")]
        public bool? Logged { get; set; }
        /// <summary>
        /// Flag to disable rule. Disabled will only be persisted but never provisioned/realized.
        /// </summary>
        [JsonProperty(PropertyName = "disabled")]
        [NSXTProperty(IsRequired: false, Description: @"Flag to disable rule. Disabled will only be persisted but never provisioned/realized.")]
        public bool? Disabled { get; set; }
        /// <summary>
        /// List of sources. Null will be treated as any.
        /// </summary>
        [JsonProperty(PropertyName = "sources")]
        [NSXTProperty(IsRequired: false, Description: @"List of sources. Null will be treated as any.")]
        public IList<NSXTResourceReferenceType> Sources { get; set; }
        /// <summary>
        /// Action enforced on the packets which matches the distributed service rule. Currently DS Layer supports below actions.
        /// ALLOW           - Forward any packet when a rule with this action gets a match (Used by Firewall). DROP            -
        /// Drop any packet when a rule with this action gets a match. Packets won't go further(Used by Firewall). REJECT          -
        /// Terminate TCP connection by sending TCP reset for a packet when a rule with this action gets a match (Used by Firewall).
        /// REDIRECT        - Redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service
        /// Insertion). DO_NOT_REDIRECT - Do not redirect any packet to a partner appliance when a rule with this action gets a
        /// match (Used by Service Insertion). DETECT          - Detect IDS Signatures. ALLOW_CONTINUE  - Allows rules to jump from
        /// this rule. Action on matching rules in the destination category will decide next step. Application is default
        /// destination until new categories are supported to jump to. DETECT_PREVENT  - Detect and Prevent IDS Signatures.
        /// </summary>
        [JsonProperty(PropertyName = "action", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Action enforced on the packets which matches the distributed service rule. Currently DS Layer supports below actions. ALLOW           - Forward any packet when a rule with this action gets a match (Used by Firewall). DROP            - Drop any packet when a rule with this action gets a match. Packets won&apos;t go further(Used by Firewall). REJECT          - Terminate TCP connection by sending TCP reset for a packet when a rule with this action gets a match (Used by Firewall). REDIRECT        - Redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion). DO_NOT_REDIRECT - Do not redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion). DETECT          - Detect IDS Signatures. ALLOW_CONTINUE  - Allows rules to jump from this rule. Action on matching rules in the destination category will decide next step. Application is default destination until new categories are supported to jump to. DETECT_PREVENT  - Detect and Prevent IDS Signatures.")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTDsruleActionEnumType Action { get; set; }
        /// <summary>
        /// Priority of the rule.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        [NSXTProperty(IsRequired: false, Description: @"Priority of the rule.")]
        public long? Priority { get; set; }
        /// <summary>
        /// Negation of the source.
        /// </summary>
        [JsonProperty(PropertyName = "sources_excluded")]
        [NSXTProperty(IsRequired: false, Description: @"Negation of the source.")]
        public bool? SourcesExcluded { get; set; }
        /// <summary>
        /// Negation of the destination.
        /// </summary>
        [JsonProperty(PropertyName = "destinations_excluded")]
        [NSXTProperty(IsRequired: false, Description: @"Negation of the destination.")]
        public bool? DestinationsExcluded { get; set; }
        /// <summary>
        /// List of the destinations. Null will be treated as any.
        /// </summary>
        [JsonProperty(PropertyName = "destinations")]
        [NSXTProperty(IsRequired: false, Description: @"List of the destinations. Null will be treated as any.")]
        public IList<NSXTResourceReferenceType> Destinations { get; set; }
    }
}
