// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.ManagerModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTSwitchingToVmcModeParametersType : NSXTNodeModeType
    {
        /// <summary>
        /// Org ID and role of "Enterprise Admin"
        /// </summary>
        [JsonProperty(PropertyName = "sre_org")]
        [NSXTProperty(IsRequired: false, Description: @"Org ID and role of &quot;Enterprise Admin&quot;")]
        public NSXTOrgInfoType SreOrg { get; set; }
        /// <summary>
        /// Org ID of a Client - commonly UUID.
        /// </summary>
        [JsonProperty(PropertyName = "default_org_id")]
        [NSXTProperty(IsRequired: false, Description: @"Org ID of a Client - commonly UUID.")]
        public string? DefaultOrgId { get; set; }
        /// <summary>
        /// Org ID and role of "Site Reliability Engineer"
        /// </summary>
        [JsonProperty(PropertyName = "ea_org")]
        [NSXTProperty(IsRequired: false, Description: @"Org ID and role of &quot;Site Reliability Engineer&quot;")]
        public NSXTOrgInfoType EaOrg { get; set; }
        /// <summary>
        /// Org ID and role of "Global Support Services"
        /// </summary>
        [JsonProperty(PropertyName = "gss_org")]
        [NSXTProperty(IsRequired: false, Description: @"Org ID and role of &quot;Global Support Services&quot;")]
        public NSXTOrgInfoType GssOrg { get; set; }
        /// <summary>
        /// IP/host of PoP (Point-of-Presence) HTTP proxy server
        /// </summary>
        [JsonProperty(PropertyName = "proxy_host")]
        [NSXTProperty(IsRequired: false, Description: @"IP/host of PoP (Point-of-Presence) HTTP proxy server")]
        public string? ProxyHost { get; set; }
        /// <summary>
        /// CSP time drift in milliseconds
        /// </summary>
        [JsonProperty(PropertyName = "csp_time_drift")]
        [NSXTProperty(IsRequired: false, Description: @"CSP time drift in milliseconds")]
        public long? CspTimeDrift { get; set; }
        /// <summary>
        /// SDDC id
        /// </summary>
        [JsonProperty(PropertyName = "sddc_id")]
        [NSXTProperty(IsRequired: false, Description: @"SDDC id")]
        public string? SddcId { get; set; }
        /// <summary>
        /// List of whitelist IPs for basic auth
        /// </summary>
        [JsonProperty(PropertyName = "basic_auth_whitelist_ips")]
        [NSXTProperty(IsRequired: false, Description: @"List of whitelist IPs for basic auth")]
        public IList<string> BasicAuthWhitelistIps { get; set; }
        /// <summary>
        /// Protocol and domain name (or IP address) of a CSP server, like "https://console-stg.cloud.vmware.com".
        /// </summary>
        [JsonProperty(PropertyName = "base_url")]
        [NSXTProperty(IsRequired: false, Description: @"Protocol and domain name (or IP address) of a CSP server, like &quot;https://console-stg.cloud.vmware.com&quot;.")]
        public string? BaseUrl { get; set; }
        /// <summary>
        /// Port of PoP (Point-of-Presence) Http proxy server
        /// </summary>
        [JsonProperty(PropertyName = "proxy_port")]
        [NSXTProperty(IsRequired: false, Description: @"Port of PoP (Point-of-Presence) Http proxy server")]
        //[System.ComponentModel.DataAnnotations.MinLength(1)]
        //[System.ComponentModel.DataAnnotations.MaxLength(65535)]
        public long? ProxyPort { get; set; }
        /// <summary>
        /// Relative path on CSP server to the Org location. Can be "/csp/gateway/am/api/orgs/".
        /// </summary>
        [JsonProperty(PropertyName = "csp_org_uri")]
        [NSXTProperty(IsRequired: false, Description: @"Relative path on CSP server to the Org location. Can be &quot;/csp/gateway/am/api/orgs/&quot;.")]
        public string? CspOrgUri { get; set; }
        /// <summary>
        /// Client's credentials on CSP server
        /// </summary>
        [JsonProperty(PropertyName = "csp_client_credential")]
        [NSXTProperty(IsRequired: false, Description: @"Client&apos;s credentials on CSP server")]
        public NSXTOauth2CredentialsType CspClientCredential { get; set; }
        /// <summary>
        /// Client's credentials.
        /// </summary>
        [JsonProperty(PropertyName = "auth_code")]
        [NSXTProperty(IsRequired: false, Description: @"Client&apos;s credentials.")]
        public NSXTOauth2CredentialsType AuthCode { get; set; }
        /// <summary>
        /// When this parameter is set to true, only a change of the node mode happens without any update to the auth properties.
        /// When this param is not set to true i.e. set to false or not provided, mode change and update to the auth properties will
        /// both happen.
        /// </summary>
        [JsonProperty(PropertyName = "mode_change_only")]
        [NSXTProperty(IsRequired: false, Description: @"When this parameter is set to true, only a change of the node mode happens without any update to the auth properties. When this param is not set to true i.e. set to false or not provided, mode change and update to the auth properties will both happen.")]
        public bool? ModeChangeOnly { get; set; }
        /// <summary>
        /// List of incoming client IDs
        /// </summary>
        [JsonProperty(PropertyName = "csp_client_incoming_credentials")]
        [NSXTProperty(IsRequired: false, Description: @"List of incoming client IDs")]
        public IList<string> CspClientIncomingCredentials { get; set; }
        /// <summary>
        /// Service definition id
        /// </summary>
        [JsonProperty(PropertyName = "service_definition_id")]
        [NSXTProperty(IsRequired: false, Description: @"Service definition id")]
        public string? ServiceDefinitionId { get; set; }
        /// <summary>
        /// Node Mode type
        /// </summary>
        [JsonProperty(PropertyName = "resource_type")]
        [NSXTProperty(IsRequired: false, Description: @"Node Mode type")]
        [NSXTDefaultProperty(Default: "SwitchingToVmcModeParameters")]
        public NSXTSwitchingToVmcModeParametersResourceTypeEnumType? ResourceType { get; set; }
    }
}
