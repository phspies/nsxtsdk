// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using System;
using RestSharp;
using RestSharp.Authenticators;
using RestSharp.Serializers.NewtonsoftJson;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using nsxtsdk;

namespace nsxtapi
{
    public class NSXTClient
    {
        public string EndPoint { get; set; }
        public RestClient restClient { get; set; }
        JsonSerializerSettings defaultSerializationSettings;
        public NSXTClient(string host, string Username, string Password, bool? remoteCertificateValidation = true, JsonSerializerSettings? DefaultSerializationSettings = null)
        {
            if (host.Contains("http"))
            {
                throw new NSXTException("Host string should not include https string");
            }
            restClient = new RestClient(new Uri($"https://{host}/api/v1"));
            if (remoteCertificateValidation == false)
            {
                restClient.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;
            }            
            restClient.Authenticator = new HttpBasicAuthenticator(Username, Password);
            if (DefaultSerializationSettings == null)
            {
                defaultSerializationSettings = new JsonSerializerSettings
                {
                    ContractResolver = new CamelCasePropertyNamesContractResolver(),
                    DefaultValueHandling = DefaultValueHandling.Include,
                    TypeNameHandling = TypeNameHandling.None,
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
                };
            }
            else
            {
                defaultSerializationSettings = DefaultSerializationSettings;
            }
            restClient.UseNewtonsoftJson(defaultSerializationSettings);
        }
        public PolicyEngine PolicyEngine => new PolicyEngine(restClient, defaultSerializationSettings);
        public ManagerEngine ManagerEngine => new ManagerEngine(restClient, defaultSerializationSettings);
    }
}