// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyUrlCategorization
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyUrlCategorization(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategorizationConfigType GlobalPutPolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId, NSXTPolicyUrlCategorizationConfigType PolicyUrlCategorizationConfig)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            if (PolicyUrlCategorizationConfig == null) { throw new System.ArgumentNullException("PolicyUrlCategorizationConfig cannot be null"); }
            NSXTPolicyUrlCategorizationConfigType returnValue = default(NSXTPolicyUrlCategorizationConfigType);
            StringBuilder PutPolicyUrlCategorizationConfigServiceURL = new StringBuilder("/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyUrlCategorizationConfig, defaultSerializationSettings));
            request.Resource = PutPolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategorizationConfigType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeletePolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            
            StringBuilder DeletePolicyUrlCategorizationConfigServiceURL = new StringBuilder("/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategorizationConfigType GlobalGetPolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            NSXTPolicyUrlCategorizationConfigType returnValue = default(NSXTPolicyUrlCategorizationConfigType);
            StringBuilder GetPolicyUrlCategorizationConfigServiceURL = new StringBuilder("/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategorizationConfigType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategorizationConfigType GlobalPatchPolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId, NSXTPolicyUrlCategorizationConfigType PolicyUrlCategorizationConfig)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            if (PolicyUrlCategorizationConfig == null) { throw new System.ArgumentNullException("PolicyUrlCategorizationConfig cannot be null"); }
            NSXTPolicyUrlCategorizationConfigType returnValue = default(NSXTPolicyUrlCategorizationConfigType);
            StringBuilder PatchPolicyUrlCategorizationConfigServiceURL = new StringBuilder("/global-infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyUrlCategorizationConfig, defaultSerializationSettings));
            request.Resource = PatchPolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategorizationConfigType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategorizationConfigType PutPolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId, NSXTPolicyUrlCategorizationConfigType PolicyUrlCategorizationConfig)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            if (PolicyUrlCategorizationConfig == null) { throw new System.ArgumentNullException("PolicyUrlCategorizationConfig cannot be null"); }
            NSXTPolicyUrlCategorizationConfigType returnValue = default(NSXTPolicyUrlCategorizationConfigType);
            StringBuilder PutPolicyUrlCategorizationConfigServiceURL = new StringBuilder("/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            PutPolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyUrlCategorizationConfig, defaultSerializationSettings));
            request.Resource = PutPolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategorizationConfigType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            
            StringBuilder DeletePolicyUrlCategorizationConfigServiceURL = new StringBuilder("/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategorizationConfigType GetPolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            NSXTPolicyUrlCategorizationConfigType returnValue = default(NSXTPolicyUrlCategorizationConfigType);
            StringBuilder GetPolicyUrlCategorizationConfigServiceURL = new StringBuilder("/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategorizationConfigType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategorizationConfigType PatchPolicyUrlCategorizationConfig(string SiteId, string EnforcementPointId, string EdgeClusterId, string UrlCategorizationConfigId, NSXTPolicyUrlCategorizationConfigType PolicyUrlCategorizationConfig)
        {
            if (SiteId == null) { throw new System.ArgumentNullException("SiteId cannot be null"); }
            if (EnforcementPointId == null) { throw new System.ArgumentNullException("EnforcementPointId cannot be null"); }
            if (EdgeClusterId == null) { throw new System.ArgumentNullException("EdgeClusterId cannot be null"); }
            if (UrlCategorizationConfigId == null) { throw new System.ArgumentNullException("UrlCategorizationConfigId cannot be null"); }
            if (PolicyUrlCategorizationConfig == null) { throw new System.ArgumentNullException("PolicyUrlCategorizationConfig cannot be null"); }
            NSXTPolicyUrlCategorizationConfigType returnValue = default(NSXTPolicyUrlCategorizationConfigType);
            StringBuilder PatchPolicyUrlCategorizationConfigServiceURL = new StringBuilder("/infra/sites/{site-id}/enforcement-points/{enforcement-point-id}/edge-clusters/{edge-cluster-id}/url-categorization-configs/{url-categorization-config-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{site-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SiteId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{enforcement-point-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{edge-cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EdgeClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPolicyUrlCategorizationConfigServiceURL.Replace("{url-categorization-config-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UrlCategorizationConfigId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyUrlCategorizationConfig, defaultSerializationSettings));
            request.Resource = PatchPolicyUrlCategorizationConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategorizationConfigType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlReputationSeverityListResultType ListPolicyUrlReputationSeverities(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyUrlReputationSeverityListResultType returnValue = default(NSXTPolicyUrlReputationSeverityListResultType);
            StringBuilder ListPolicyUrlReputationSeveritiesServiceURL = new StringBuilder("/infra/url-reputation-severities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyUrlReputationSeveritiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlReputationSeverityListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategoryListResultType ListPolicyUrlCategories(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyUrlCategoryListResultType returnValue = default(NSXTPolicyUrlCategoryListResultType);
            StringBuilder ListPolicyUrlCategoriesServiceURL = new StringBuilder("/infra/url-categories");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyUrlCategoriesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategoryListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlReputationSeverityListResultType GlobalListPolicyUrlReputationSeverities(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyUrlReputationSeverityListResultType returnValue = default(NSXTPolicyUrlReputationSeverityListResultType);
            StringBuilder ListPolicyUrlReputationSeveritiesServiceURL = new StringBuilder("/global-infra/url-reputation-severities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyUrlReputationSeveritiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlReputationSeverityListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyUrlCategoryListResultType GlobalListPolicyUrlCategories(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyUrlCategoryListResultType returnValue = default(NSXTPolicyUrlCategoryListResultType);
            StringBuilder ListPolicyUrlCategoriesServiceURL = new StringBuilder("/global-infra/url-categories");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyUrlCategoriesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyUrlCategoryListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
