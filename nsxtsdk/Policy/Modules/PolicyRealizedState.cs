// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyRealizedState
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyRealizedState(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedSecurityGroupListResultType ListSecurityGroupRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTRealizedSecurityGroupListResultType returnValue = default(NSXTRealizedSecurityGroupListResultType);
            StringBuilder ListSecurityGroupRealizedStatesServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListSecurityGroupRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListSecurityGroupRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedSecurityGroupListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedFirewallSectionType ReadFirewallSectionRealizedState(string EnforcementPointName, string FirewallSectionId)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (FirewallSectionId == null) { throw new System.ArgumentNullException("FirewallSectionId cannot be null"); }
            NSXTRealizedFirewallSectionType returnValue = default(NSXTRealizedFirewallSectionType);
            StringBuilder ReadFirewallSectionRealizedStateServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections/{firewall-section-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadFirewallSectionRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadFirewallSectionRealizedStateServiceURL.Replace("{firewall-section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadFirewallSectionRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedFirewallSectionType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType ListNsgroupRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListNsgroupRealizedStatesServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListNsgroupRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListNsgroupRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTConsolidatedRealizedStatusType GlobalReadIntentStatus(string IntentPath, bool? IncludeEnforcedStatus = null, string? SitePath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            NSXTConsolidatedRealizedStatusType returnValue = default(NSXTConsolidatedRealizedStatusType);
            StringBuilder ReadIntentStatusServiceURL = new StringBuilder("/global-infra/realized-state/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IncludeEnforcedStatus != null) { request.AddQueryParameter("include_enforced_status", IncludeEnforcedStatus.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (SitePath != null) { request.AddQueryParameter("site_path", SitePath.ToString()); }
            request.Resource = ReadIntentStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTConsolidatedRealizedStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyAlarmResourceListResultType ListAlarms(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyAlarmResourceListResultType returnValue = default(NSXTPolicyAlarmResourceListResultType);
            StringBuilder ListAlarmsServiceURL = new StringBuilder("/infra/realized-state/alarms");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListAlarmsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyAlarmResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalTagVirtualMachineUpdateTags(string EnforcementPointName, NSXTVirtualMachineTagsUpdateType VirtualMachineTagsUpdate)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (VirtualMachineTagsUpdate == null) { throw new System.ArgumentNullException("VirtualMachineTagsUpdate cannot be null"); }
            
            StringBuilder TagVirtualMachineUpdateTagsServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/virtual-machines?action=update_tags");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            TagVirtualMachineUpdateTagsServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(VirtualMachineTagsUpdate, defaultSerializationSettings));
            request.Resource = TagVirtualMachineUpdateTagsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineListResultType GlobalListSystemVms(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, string? Query = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTVirtualMachineListResultType returnValue = default(NSXTVirtualMachineListResultType);
            StringBuilder ListSystemVmsServiceURL = new StringBuilder("/global-infra/realized-state/system-virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Query != null) { request.AddQueryParameter("query", Query.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListSystemVmsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType ReadIpsetRealizedState(string EnforcementPointName, string IpSetName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (IpSetName == null) { throw new System.ArgumentNullException("IpSetName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadIpsetRealizedStateServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt/{ip-set-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpsetRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadIpsetRealizedStateServiceURL.Replace("{ip-set-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpSetName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpsetRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType GlobalReadMacsetRealizedState(string EnforcementPointName, string MacSetName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (MacSetName == null) { throw new System.ArgumentNullException("MacSetName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadMacsetRealizedStateServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt/{mac-set-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadMacsetRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadMacsetRealizedStateServiceURL.Replace("{mac-set-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(MacSetName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadMacsetRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType GlobalListNsserviceRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListNsserviceRealizedStatesServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListNsserviceRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListNsserviceRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSearchResponseType GlobalListVirtualMachinesOnEnforcementPoint(string EnforcementPointName, string? Cursor = null, string? Dsl = null, string? IncludedFields = null, long? PageSize = null, string? Query = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTSearchResponseType returnValue = default(NSXTSearchResponseType);
            StringBuilder ListVirtualMachinesOnEnforcementPointServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListVirtualMachinesOnEnforcementPointServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Dsl != null) { request.AddQueryParameter("dsl", Dsl.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Query != null) { request.AddQueryParameter("query", Query.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListVirtualMachinesOnEnforcementPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTSearchResponseType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedFirewallSectionListResultType GlobalListFirewallSectionRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTRealizedFirewallSectionListResultType returnValue = default(NSXTRealizedFirewallSectionListResultType);
            StringBuilder ListFirewallSectionRealizedStatesServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListFirewallSectionRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallSectionRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedFirewallSectionListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedSecurityGroupType GlobalReadSecurityGroupRealizedState(string EnforcementPointName, string SecuritygroupName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (SecuritygroupName == null) { throw new System.ArgumentNullException("SecuritygroupName cannot be null"); }
            NSXTRealizedSecurityGroupType returnValue = default(NSXTRealizedSecurityGroupType);
            StringBuilder ReadSecurityGroupRealizedStateServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups/{securitygroup-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadSecurityGroupRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadSecurityGroupRealizedStateServiceURL.Replace("{securitygroup-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(SecuritygroupName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadSecurityGroupRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedSecurityGroupType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType ReadNsgroupRealizedState(string EnforcementPointName, string NsgroupName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (NsgroupName == null) { throw new System.ArgumentNullException("NsgroupName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadNsgroupRealizedStateServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups/{nsgroup-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNsgroupRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadNsgroupRealizedStateServiceURL.Replace("{nsgroup-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(NsgroupName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNsgroupRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedEnforcementPointListResultType GlobalListEnforcementPointRealizedStates(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTRealizedEnforcementPointListResultType returnValue = default(NSXTRealizedEnforcementPointListResultType);
            StringBuilder ListEnforcementPointRealizedStatesServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListEnforcementPointRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedEnforcementPointListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedFirewallSectionType GlobalReadFirewallSectionRealizedState(string EnforcementPointName, string FirewallSectionId)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (FirewallSectionId == null) { throw new System.ArgumentNullException("FirewallSectionId cannot be null"); }
            NSXTRealizedFirewallSectionType returnValue = default(NSXTRealizedFirewallSectionType);
            StringBuilder ReadFirewallSectionRealizedStateServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections/{firewall-section-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadFirewallSectionRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadFirewallSectionRealizedStateServiceURL.Replace("{firewall-section-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSectionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadFirewallSectionRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedFirewallSectionType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineListResultType ListSystemVms(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, string? Query = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTVirtualMachineListResultType returnValue = default(NSXTVirtualMachineListResultType);
            StringBuilder ListSystemVmsServiceURL = new StringBuilder("/infra/realized-state/system-virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Query != null) { request.AddQueryParameter("query", Query.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListSystemVmsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType ReadNsserviceRealizedState(string EnforcementPointName, string NsserviceName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (NsserviceName == null) { throw new System.ArgumentNullException("NsserviceName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadNsserviceRealizedStateServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices/{nsservice-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNsserviceRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadNsserviceRealizedStateServiceURL.Replace("{nsservice-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(NsserviceName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNsserviceRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTConsolidatedRealizedStatusType ReadIntentStatus(string IntentPath, bool? IncludeEnforcedStatus = null, string? SitePath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            NSXTConsolidatedRealizedStatusType returnValue = default(NSXTConsolidatedRealizedStatusType);
            StringBuilder ReadIntentStatusServiceURL = new StringBuilder("/infra/realized-state/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IncludeEnforcedStatus != null) { request.AddQueryParameter("include_enforced_status", IncludeEnforcedStatus.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (SitePath != null) { request.AddQueryParameter("site_path", SitePath.ToString()); }
            request.Resource = ReadIntentStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTConsolidatedRealizedStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineListResultType GlobalListAllUnAssociatedVirtualMachines(string? Cursor = null, string? EnforcementPointPath = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTVirtualMachineListResultType returnValue = default(NSXTVirtualMachineListResultType);
            StringBuilder ListAllUnAssociatedVirtualMachinesServiceURL = new StringBuilder("/global-infra/realized-state/unassociated-virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListAllUnAssociatedVirtualMachinesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType GlobalReadNsserviceRealizedState(string EnforcementPointName, string NsserviceName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (NsserviceName == null) { throw new System.ArgumentNullException("NsserviceName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadNsserviceRealizedStateServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices/{nsservice-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNsserviceRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadNsserviceRealizedStateServiceURL.Replace("{nsservice-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(NsserviceName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNsserviceRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineListResultType ListAllUnAssociatedVirtualMachines(string? Cursor = null, string? EnforcementPointPath = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTVirtualMachineListResultType returnValue = default(NSXTVirtualMachineListResultType);
            StringBuilder ListAllUnAssociatedVirtualMachinesServiceURL = new StringBuilder("/infra/realized-state/unassociated-virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListAllUnAssociatedVirtualMachinesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedFirewallSectionListResultType ListFirewallSectionRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTRealizedFirewallSectionListResultType returnValue = default(NSXTRealizedFirewallSectionListResultType);
            StringBuilder ListFirewallSectionRealizedStatesServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/firewalls/firewall-sections");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListFirewallSectionRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallSectionRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedFirewallSectionListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedSecurityGroupType ReadSecurityGroupRealizedState(string EnforcementPointName, string SecuritygroupName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (SecuritygroupName == null) { throw new System.ArgumentNullException("SecuritygroupName cannot be null"); }
            NSXTRealizedSecurityGroupType returnValue = default(NSXTRealizedSecurityGroupType);
            StringBuilder ReadSecurityGroupRealizedStateServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups/{securitygroup-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadSecurityGroupRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadSecurityGroupRealizedStateServiceURL.Replace("{securitygroup-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(SecuritygroupName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadSecurityGroupRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedSecurityGroupType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedEnforcementPointListResultType ListEnforcementPointRealizedStates(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTRealizedEnforcementPointListResultType returnValue = default(NSXTRealizedEnforcementPointListResultType);
            StringBuilder ListEnforcementPointRealizedStatesServiceURL = new StringBuilder("/infra/realized-state/enforcement-points");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListEnforcementPointRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedEnforcementPointListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType GlobalReadIpsetRealizedState(string EnforcementPointName, string IpSetName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (IpSetName == null) { throw new System.ArgumentNullException("IpSetName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadIpsetRealizedStateServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt/{ip-set-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpsetRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadIpsetRealizedStateServiceURL.Replace("{ip-set-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpSetName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpsetRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType ReadRealizedEntity(string RealizedPath)
        {
            if (RealizedPath == null) { throw new System.ArgumentNullException("RealizedPath cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadRealizedEntityServiceURL = new StringBuilder("/infra/realized-state/realized-entity");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (RealizedPath != null) { request.AddQueryParameter("realized_path", RealizedPath.ToString()); }
            request.Resource = ReadRealizedEntityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineListResultType GlobalListAllVirtualMachines(string? Cursor = null, string? EnforcementPointPath = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTVirtualMachineListResultType returnValue = default(NSXTVirtualMachineListResultType);
            StringBuilder ListAllVirtualMachinesServiceURL = new StringBuilder("/global-infra/realized-state/virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListAllVirtualMachinesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyAlarmResourceListResultType GlobalListAlarms(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyAlarmResourceListResultType returnValue = default(NSXTPolicyAlarmResourceListResultType);
            StringBuilder ListAlarmsServiceURL = new StringBuilder("/global-infra/realized-state/alarms");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListAlarmsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyAlarmResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineDetailsType ReadVirtualMachineDetails(string EnforcementPointName, string VirtualMachineId)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (VirtualMachineId == null) { throw new System.ArgumentNullException("VirtualMachineId cannot be null"); }
            NSXTVirtualMachineDetailsType returnValue = default(NSXTVirtualMachineDetailsType);
            StringBuilder ReadVirtualMachineDetailsServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/virtual-machines/{virtual-machine-id}/details");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadVirtualMachineDetailsServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadVirtualMachineDetailsServiceURL.Replace("{virtual-machine-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VirtualMachineId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadVirtualMachineDetailsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineDetailsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType ListIpsetRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListIpsetRealizedStatesServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListIpsetRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpsetRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedEnforcementPointType ReadEnforcementPointRealizedState(string EnforcementPointName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTRealizedEnforcementPointType returnValue = default(NSXTRealizedEnforcementPointType);
            StringBuilder ReadEnforcementPointRealizedStateServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadEnforcementPointRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadEnforcementPointRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedEnforcementPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalRefreshRealizedStateRefresh(string IntentPath, string? EnforcementPointPath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            
            StringBuilder RefreshRealizedStateRefreshServiceURL = new StringBuilder("/global-infra/realized-state/realized-entity?action=refresh");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            request.Resource = RefreshRealizedStateRefreshServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSearchResponseType ListVirtualMachinesOnEnforcementPoint(string EnforcementPointName, string? Cursor = null, string? Dsl = null, string? IncludedFields = null, long? PageSize = null, string? Query = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTSearchResponseType returnValue = default(NSXTSearchResponseType);
            StringBuilder ListVirtualMachinesOnEnforcementPointServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListVirtualMachinesOnEnforcementPointServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Dsl != null) { request.AddQueryParameter("dsl", Dsl.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Query != null) { request.AddQueryParameter("query", Query.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListVirtualMachinesOnEnforcementPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTSearchResponseType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType GlobalListNsgroupRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListNsgroupRealizedStatesServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListNsgroupRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListNsgroupRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedSecurityGroupListResultType GlobalListSecurityGroupRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTRealizedSecurityGroupListResultType returnValue = default(NSXTRealizedSecurityGroupListResultType);
            StringBuilder ListSecurityGroupRealizedStatesServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/groups/securitygroups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListSecurityGroupRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListSecurityGroupRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedSecurityGroupListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void TagVirtualMachineUpdateTags(string EnforcementPointName, NSXTVirtualMachineTagsUpdateType VirtualMachineTagsUpdate)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (VirtualMachineTagsUpdate == null) { throw new System.ArgumentNullException("VirtualMachineTagsUpdate cannot be null"); }
            
            StringBuilder TagVirtualMachineUpdateTagsServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/virtual-machines?action=update_tags");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            TagVirtualMachineUpdateTagsServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(VirtualMachineTagsUpdate, defaultSerializationSettings));
            request.Resource = TagVirtualMachineUpdateTagsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType GlobalListIpsetRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListIpsetRealizedStatesServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/ip-sets/ip-sets-nsxt");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListIpsetRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpsetRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType GlobalReadRealizedEntity(string RealizedPath)
        {
            if (RealizedPath == null) { throw new System.ArgumentNullException("RealizedPath cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadRealizedEntityServiceURL = new StringBuilder("/global-infra/realized-state/realized-entity");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (RealizedPath != null) { request.AddQueryParameter("realized_path", RealizedPath.ToString()); }
            request.Resource = ReadRealizedEntityServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualNetworkInterfaceListResultType GlobalListVifsOnEnforcementPoint(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, string? LportAttachmentId = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTVirtualNetworkInterfaceListResultType returnValue = default(NSXTVirtualNetworkInterfaceListResultType);
            StringBuilder ListVifsOnEnforcementPointServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/vifs");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListVifsOnEnforcementPointServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (LportAttachmentId != null) { request.AddQueryParameter("lport_attachment_id", LportAttachmentId.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListVifsOnEnforcementPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualNetworkInterfaceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType GlobalListMacsetRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListMacsetRealizedStatesServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListMacsetRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListMacsetRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType ListMacsetRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListMacsetRealizedStatesServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListMacsetRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListMacsetRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType GlobalListRealizedEntities(string IntentPath, string? SitePath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListRealizedEntitiesServiceURL = new StringBuilder("/global-infra/realized-state/realized-entities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (SitePath != null) { request.AddQueryParameter("site_path", SitePath.ToString()); }
            request.Resource = ListRealizedEntitiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualNetworkInterfaceListResultType ListVifsOnEnforcementPoint(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, string? LportAttachmentId = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTVirtualNetworkInterfaceListResultType returnValue = default(NSXTVirtualNetworkInterfaceListResultType);
            StringBuilder ListVifsOnEnforcementPointServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/vifs");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListVifsOnEnforcementPointServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (LportAttachmentId != null) { request.AddQueryParameter("lport_attachment_id", LportAttachmentId.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListVifsOnEnforcementPointServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualNetworkInterfaceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineListResultType ListAllVirtualMachines(string? Cursor = null, string? EnforcementPointPath = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTVirtualMachineListResultType returnValue = default(NSXTVirtualMachineListResultType);
            StringBuilder ListAllVirtualMachinesServiceURL = new StringBuilder("/infra/realized-state/virtual-machines");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListAllVirtualMachinesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType ListNsserviceRealizedStates(string EnforcementPointName, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListNsserviceRealizedStatesServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/services/nsservices");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListNsserviceRealizedStatesServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListNsserviceRealizedStatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRealizedEnforcementPointType GlobalReadEnforcementPointRealizedState(string EnforcementPointName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            NSXTRealizedEnforcementPointType returnValue = default(NSXTRealizedEnforcementPointType);
            StringBuilder ReadEnforcementPointRealizedStateServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadEnforcementPointRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadEnforcementPointRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRealizedEnforcementPointType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void RefreshRealizedStateRefresh(string IntentPath, string? EnforcementPointPath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            
            StringBuilder RefreshRealizedStateRefreshServiceURL = new StringBuilder("/infra/realized-state/realized-entity?action=refresh");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            request.Resource = RefreshRealizedStateRefreshServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceListResultType ListRealizedEntities(string IntentPath, string? SitePath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            NSXTGenericPolicyRealizedResourceListResultType returnValue = default(NSXTGenericPolicyRealizedResourceListResultType);
            StringBuilder ListRealizedEntitiesServiceURL = new StringBuilder("/infra/realized-state/realized-entities");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (SitePath != null) { request.AddQueryParameter("site_path", SitePath.ToString()); }
            request.Resource = ListRealizedEntitiesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType GlobalReadNsgroupRealizedState(string EnforcementPointName, string NsgroupName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (NsgroupName == null) { throw new System.ArgumentNullException("NsgroupName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadNsgroupRealizedStateServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/groups/nsgroups/{nsgroup-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadNsgroupRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadNsgroupRealizedStateServiceURL.Replace("{nsgroup-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(NsgroupName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadNsgroupRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVirtualMachineDetailsType GlobalReadVirtualMachineDetails(string EnforcementPointName, string VirtualMachineId)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (VirtualMachineId == null) { throw new System.ArgumentNullException("VirtualMachineId cannot be null"); }
            NSXTVirtualMachineDetailsType returnValue = default(NSXTVirtualMachineDetailsType);
            StringBuilder ReadVirtualMachineDetailsServiceURL = new StringBuilder("/global-infra/realized-state/enforcement-points/{enforcement-point-name}/virtual-machines/{virtual-machine-id}/details");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadVirtualMachineDetailsServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadVirtualMachineDetailsServiceURL.Replace("{virtual-machine-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VirtualMachineId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadVirtualMachineDetailsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVirtualMachineDetailsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGenericPolicyRealizedResourceType ReadMacsetRealizedState(string EnforcementPointName, string MacSetName)
        {
            if (EnforcementPointName == null) { throw new System.ArgumentNullException("EnforcementPointName cannot be null"); }
            if (MacSetName == null) { throw new System.ArgumentNullException("MacSetName cannot be null"); }
            NSXTGenericPolicyRealizedResourceType returnValue = default(NSXTGenericPolicyRealizedResourceType);
            StringBuilder ReadMacsetRealizedStateServiceURL = new StringBuilder("/infra/realized-state/enforcement-points/{enforcement-point-name}/mac-sets/mac-sets-nsxt/{mac-set-name}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadMacsetRealizedStateServiceURL.Replace("{enforcement-point-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(EnforcementPointName, System.Globalization.CultureInfo.InvariantCulture)));
            ReadMacsetRealizedStateServiceURL.Replace("{mac-set-name}", System.Uri.EscapeDataString(Helpers.ConvertToString(MacSetName, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadMacsetRealizedStateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTGenericPolicyRealizedResourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
