// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyFirewallSessionTimerProfile
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyFirewallSessionTimerProfile(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSessionTimerProfileType GlobalGlobalInfraUpdatePolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId, NSXTPolicyFirewallSessionTimerProfileType PolicyFirewallSessionTimerProfile, bool? Override = null)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            if (PolicyFirewallSessionTimerProfile == null) { throw new System.ArgumentNullException("PolicyFirewallSessionTimerProfile cannot be null"); }
            NSXTPolicyFirewallSessionTimerProfileType returnValue = default(NSXTPolicyFirewallSessionTimerProfileType);
            StringBuilder GlobalInfraUpdatePolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            GlobalInfraUpdatePolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallSessionTimerProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = GlobalInfraUpdatePolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + GlobalInfraUpdatePolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSessionTimerProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSessionTimerProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSessionTimerProfileType GlobalGlobalInfraGetPolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            NSXTPolicyFirewallSessionTimerProfileType returnValue = default(NSXTPolicyFirewallSessionTimerProfileType);
            StringBuilder GlobalInfraGetPolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GlobalInfraGetPolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GlobalInfraGetPolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GlobalInfraGetPolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSessionTimerProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSessionTimerProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalGlobalInfraDeletePolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId, bool? Override = null)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            
            StringBuilder GlobalInfraDeletePolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            GlobalInfraDeletePolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = GlobalInfraDeletePolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + GlobalInfraDeletePolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalGlobalInfraPatchPolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId, NSXTPolicyFirewallSessionTimerProfileType PolicyFirewallSessionTimerProfile, bool? Override = null)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            if (PolicyFirewallSessionTimerProfile == null) { throw new System.ArgumentNullException("PolicyFirewallSessionTimerProfile cannot be null"); }
            
            StringBuilder GlobalInfraPatchPolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/global-infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            GlobalInfraPatchPolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallSessionTimerProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = GlobalInfraPatchPolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + GlobalInfraPatchPolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSessionTimerProfileListResultType ListPolicyFirewallSessionTimerProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyFirewallSessionTimerProfileListResultType returnValue = default(NSXTPolicyFirewallSessionTimerProfileListResultType);
            StringBuilder ListPolicyFirewallSessionTimerProfilesServiceURL = new StringBuilder("/infra/firewall-session-timer-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyFirewallSessionTimerProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPolicyFirewallSessionTimerProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSessionTimerProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSessionTimerProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSessionTimerProfileListResultType GlobalGlobalInfraListPolicyFirewallSessionTimerProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyFirewallSessionTimerProfileListResultType returnValue = default(NSXTPolicyFirewallSessionTimerProfileListResultType);
            StringBuilder GlobalInfraListPolicyFirewallSessionTimerProfilesServiceURL = new StringBuilder("/global-infra/firewall-session-timer-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GlobalInfraListPolicyFirewallSessionTimerProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GlobalInfraListPolicyFirewallSessionTimerProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSessionTimerProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSessionTimerProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSessionTimerProfileType UpdatePolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId, NSXTPolicyFirewallSessionTimerProfileType PolicyFirewallSessionTimerProfile, bool? Override = null)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            if (PolicyFirewallSessionTimerProfile == null) { throw new System.ArgumentNullException("PolicyFirewallSessionTimerProfile cannot be null"); }
            NSXTPolicyFirewallSessionTimerProfileType returnValue = default(NSXTPolicyFirewallSessionTimerProfileType);
            StringBuilder UpdatePolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallSessionTimerProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = UpdatePolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSessionTimerProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSessionTimerProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSessionTimerProfileType GetPolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            NSXTPolicyFirewallSessionTimerProfileType returnValue = default(NSXTPolicyFirewallSessionTimerProfileType);
            StringBuilder GetPolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSessionTimerProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSessionTimerProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId, bool? Override = null)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            
            StringBuilder DeletePolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeletePolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchPolicyFirewallSessionTimerProfile(string FirewallSessionTimerProfileId, NSXTPolicyFirewallSessionTimerProfileType PolicyFirewallSessionTimerProfile, bool? Override = null)
        {
            if (FirewallSessionTimerProfileId == null) { throw new System.ArgumentNullException("FirewallSessionTimerProfileId cannot be null"); }
            if (PolicyFirewallSessionTimerProfile == null) { throw new System.ArgumentNullException("PolicyFirewallSessionTimerProfile cannot be null"); }
            
            StringBuilder PatchPolicyFirewallSessionTimerProfileServiceURL = new StringBuilder("/infra/firewall-session-timer-profiles/{firewall-session-timer-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPolicyFirewallSessionTimerProfileServiceURL.Replace("{firewall-session-timer-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSessionTimerProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallSessionTimerProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchPolicyFirewallSessionTimerProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPolicyFirewallSessionTimerProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
    }
}
