// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class LdapIdentitySources
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public LdapIdentitySources(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLdapIdentitySourceType CreateOrUpdateLdapIdentitySource(string LdapIdentitySourceId, NSXTLdapIdentitySourceType LdapIdentitySource)
        {
            if (LdapIdentitySourceId == null) { throw new System.ArgumentNullException("LdapIdentitySourceId cannot be null"); }
            if (LdapIdentitySource == null) { throw new System.ArgumentNullException("LdapIdentitySource cannot be null"); }
            NSXTLdapIdentitySourceType returnValue = default(NSXTLdapIdentitySourceType);
            StringBuilder CreateOrUpdateLdapIdentitySourceServiceURL = new StringBuilder("/aaa/ldap-identity-sources/{ldap-identity-source-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateLdapIdentitySourceServiceURL.Replace("{ldap-identity-source-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapIdentitySourceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LdapIdentitySource, defaultSerializationSettings));
            request.Resource = CreateOrUpdateLdapIdentitySourceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTLdapIdentitySourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLdapIdentitySourceType ReadLdapIdentitySource(string LdapIdentitySourceId)
        {
            if (LdapIdentitySourceId == null) { throw new System.ArgumentNullException("LdapIdentitySourceId cannot be null"); }
            NSXTLdapIdentitySourceType returnValue = default(NSXTLdapIdentitySourceType);
            StringBuilder ReadLdapIdentitySourceServiceURL = new StringBuilder("/aaa/ldap-identity-sources/{ldap-identity-source-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLdapIdentitySourceServiceURL.Replace("{ldap-identity-source-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapIdentitySourceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLdapIdentitySourceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTLdapIdentitySourceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteLdapIdentitySource(string LdapIdentitySourceId)
        {
            if (LdapIdentitySourceId == null) { throw new System.ArgumentNullException("LdapIdentitySourceId cannot be null"); }
            
            StringBuilder DeleteLdapIdentitySourceServiceURL = new StringBuilder("/aaa/ldap-identity-sources/{ldap-identity-source-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLdapIdentitySourceServiceURL.Replace("{ldap-identity-source-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapIdentitySourceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteLdapIdentitySourceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLdapIdentitySourceProbeResultsType ProbeUnconfiguredLdapIdentitySourceProbeIdentitySource(NSXTLdapIdentitySourceType LdapIdentitySource)
        {
            if (LdapIdentitySource == null) { throw new System.ArgumentNullException("LdapIdentitySource cannot be null"); }
            NSXTLdapIdentitySourceProbeResultsType returnValue = default(NSXTLdapIdentitySourceProbeResultsType);
            StringBuilder ProbeUnconfiguredLdapIdentitySourceProbeIdentitySourceServiceURL = new StringBuilder("/aaa/ldap-identity-sources?action=probe_identity_source");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(LdapIdentitySource, defaultSerializationSettings));
            request.Resource = ProbeUnconfiguredLdapIdentitySourceProbeIdentitySourceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTLdapIdentitySourceProbeResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLdapIdentitySourceListResultType ListLdapIdentitySources(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLdapIdentitySourceListResultType returnValue = default(NSXTLdapIdentitySourceListResultType);
            StringBuilder ListLdapIdentitySourcesServiceURL = new StringBuilder("/aaa/ldap-identity-sources");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLdapIdentitySourcesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTLdapIdentitySourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPeerCertificateChainType FetchIdentitySourceLdapServerCertificateFetchCertificate(NSXTIdentitySourceLdapServerEndpointType IdentitySourceLdapServerEndpoint)
        {
            if (IdentitySourceLdapServerEndpoint == null) { throw new System.ArgumentNullException("IdentitySourceLdapServerEndpoint cannot be null"); }
            NSXTPeerCertificateChainType returnValue = default(NSXTPeerCertificateChainType);
            StringBuilder FetchIdentitySourceLdapServerCertificateFetchCertificateServiceURL = new StringBuilder("/aaa/ldap-identity-sources?action=fetch_certificate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(IdentitySourceLdapServerEndpoint, defaultSerializationSettings));
            request.Resource = FetchIdentitySourceLdapServerCertificateFetchCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPeerCertificateChainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdentitySourceLdapServerProbeResultType ProbeIdentitySourceLdapServerProbeLdapServer(NSXTIdentitySourceLdapServerType IdentitySourceLdapServer)
        {
            if (IdentitySourceLdapServer == null) { throw new System.ArgumentNullException("IdentitySourceLdapServer cannot be null"); }
            NSXTIdentitySourceLdapServerProbeResultType returnValue = default(NSXTIdentitySourceLdapServerProbeResultType);
            StringBuilder ProbeIdentitySourceLdapServerProbeLdapServerServiceURL = new StringBuilder("/aaa/ldap-identity-sources?action=probe_ldap_server");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(IdentitySourceLdapServer, defaultSerializationSettings));
            request.Resource = ProbeIdentitySourceLdapServerProbeLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdentitySourceLdapServerProbeResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLdapIdentitySourceProbeResultsType ProbeConfiguredLdapIdentitySourceProbe(string LdapIdentitySourceId)
        {
            if (LdapIdentitySourceId == null) { throw new System.ArgumentNullException("LdapIdentitySourceId cannot be null"); }
            NSXTLdapIdentitySourceProbeResultsType returnValue = default(NSXTLdapIdentitySourceProbeResultsType);
            StringBuilder ProbeConfiguredLdapIdentitySourceProbeServiceURL = new StringBuilder("/aaa/ldap-identity-sources/{ldap-identity-source-id}?action=probe");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            ProbeConfiguredLdapIdentitySourceProbeServiceURL.Replace("{ldap-identity-source-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapIdentitySourceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ProbeConfiguredLdapIdentitySourceProbeServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTLdapIdentitySourceProbeResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLdapIdentitySourceSearchResultListType SearchLdapIdentitySource(string LdapIdentitySourceId, string FilterValue)
        {
            if (LdapIdentitySourceId == null) { throw new System.ArgumentNullException("LdapIdentitySourceId cannot be null"); }
            if (FilterValue == null) { throw new System.ArgumentNullException("FilterValue cannot be null"); }
            NSXTLdapIdentitySourceSearchResultListType returnValue = default(NSXTLdapIdentitySourceSearchResultListType);
            StringBuilder SearchLdapIdentitySourceServiceURL = new StringBuilder("/aaa/ldap-identity-sources/{ldap-identity-source-id}/search");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            SearchLdapIdentitySourceServiceURL.Replace("{ldap-identity-source-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapIdentitySourceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (FilterValue != null) { request.AddQueryParameter("filter_value", FilterValue.ToString()); }
            request.Resource = SearchLdapIdentitySourceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTLdapIdentitySourceSearchResultListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
