// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyFirewallScheduler
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyFirewallScheduler(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSchedulerType GlobalUpdatePolicyFirewallScheduler(string FirewallSchedulerId, NSXTPolicyFirewallSchedulerType PolicyFirewallScheduler)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            if (PolicyFirewallScheduler == null) { throw new System.ArgumentNullException("PolicyFirewallScheduler cannot be null"); }
            NSXTPolicyFirewallSchedulerType returnValue = default(NSXTPolicyFirewallSchedulerType);
            StringBuilder UpdatePolicyFirewallSchedulerServiceURL = new StringBuilder("/global-infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallScheduler, defaultSerializationSettings));
            request.Resource = UpdatePolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSchedulerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSchedulerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSchedulerType GlobalGetPolicyFirewallScheduler(string FirewallSchedulerId)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            NSXTPolicyFirewallSchedulerType returnValue = default(NSXTPolicyFirewallSchedulerType);
            StringBuilder GetPolicyFirewallSchedulerServiceURL = new StringBuilder("/global-infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSchedulerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSchedulerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeletePolicyFirewallScheduler(string FirewallSchedulerId, bool? Force = null)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            
            StringBuilder DeletePolicyFirewallSchedulerServiceURL = new StringBuilder("/global-infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeletePolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchPolicyFirewallScheduler(string FirewallSchedulerId, NSXTPolicyFirewallSchedulerType PolicyFirewallScheduler)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            if (PolicyFirewallScheduler == null) { throw new System.ArgumentNullException("PolicyFirewallScheduler cannot be null"); }
            
            StringBuilder PatchPolicyFirewallSchedulerServiceURL = new StringBuilder("/global-infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallScheduler, defaultSerializationSettings));
            request.Resource = PatchPolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSchedulerType UpdatePolicyFirewallScheduler(string FirewallSchedulerId, NSXTPolicyFirewallSchedulerType PolicyFirewallScheduler)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            if (PolicyFirewallScheduler == null) { throw new System.ArgumentNullException("PolicyFirewallScheduler cannot be null"); }
            NSXTPolicyFirewallSchedulerType returnValue = default(NSXTPolicyFirewallSchedulerType);
            StringBuilder UpdatePolicyFirewallSchedulerServiceURL = new StringBuilder("/infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallScheduler, defaultSerializationSettings));
            request.Resource = UpdatePolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSchedulerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSchedulerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSchedulerType GetPolicyFirewallScheduler(string FirewallSchedulerId)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            NSXTPolicyFirewallSchedulerType returnValue = default(NSXTPolicyFirewallSchedulerType);
            StringBuilder GetPolicyFirewallSchedulerServiceURL = new StringBuilder("/infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSchedulerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSchedulerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePolicyFirewallScheduler(string FirewallSchedulerId, bool? Force = null)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            
            StringBuilder DeletePolicyFirewallSchedulerServiceURL = new StringBuilder("/infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeletePolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchPolicyFirewallScheduler(string FirewallSchedulerId, NSXTPolicyFirewallSchedulerType PolicyFirewallScheduler)
        {
            if (FirewallSchedulerId == null) { throw new System.ArgumentNullException("FirewallSchedulerId cannot be null"); }
            if (PolicyFirewallScheduler == null) { throw new System.ArgumentNullException("PolicyFirewallScheduler cannot be null"); }
            
            StringBuilder PatchPolicyFirewallSchedulerServiceURL = new StringBuilder("/infra/firewall-schedulers/{firewall-scheduler-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPolicyFirewallSchedulerServiceURL.Replace("{firewall-scheduler-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallSchedulerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyFirewallScheduler, defaultSerializationSettings));
            request.Resource = PatchPolicyFirewallSchedulerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPolicyFirewallSchedulerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSchedulerListResultType ListPolicyFirewallSchedulers(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyFirewallSchedulerListResultType returnValue = default(NSXTPolicyFirewallSchedulerListResultType);
            StringBuilder ListPolicyFirewallSchedulersServiceURL = new StringBuilder("/infra/firewall-schedulers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyFirewallSchedulersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPolicyFirewallSchedulersServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSchedulerListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSchedulerListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyFirewallSchedulerListResultType GlobalListPolicyFirewallSchedulers(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTPolicyFirewallSchedulerListResultType returnValue = default(NSXTPolicyFirewallSchedulerListResultType);
            StringBuilder ListPolicyFirewallSchedulersServiceURL = new StringBuilder("/global-infra/firewall-schedulers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyFirewallSchedulersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPolicyFirewallSchedulersServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPolicyFirewallSchedulerListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPolicyFirewallSchedulerListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
