// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyOperations
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyOperations(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringInstanceListResultType GlobalListPortMirroringInstances(string DomainId, string GroupId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTPortMirroringInstanceListResultType returnValue = default(NSXTPortMirroringInstanceListResultType);
            StringBuilder ListPortMirroringInstancesServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListPortMirroringInstancesServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ListPortMirroringInstancesServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPortMirroringInstancesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPortMirroringInstancesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringInstanceListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringInstanceListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXSwitchCollectionInstanceListResultType GlobalListIpfixswitchCollectionInstances(string Tier1Id, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            NSXTIPFIXSwitchCollectionInstanceListResultType returnValue = default(NSXTIPFIXSwitchCollectionInstanceListResultType);
            StringBuilder ListIpfixswitchCollectionInstancesServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListIpfixswitchCollectionInstancesServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixswitchCollectionInstancesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIpfixswitchCollectionInstancesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXSwitchCollectionInstanceListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXSwitchCollectionInstanceListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXSwitchCollectionInstanceListResultType ListIpfixswitchCollectionInstances(string Tier1Id, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            NSXTIPFIXSwitchCollectionInstanceListResultType returnValue = default(NSXTIPFIXSwitchCollectionInstanceListResultType);
            StringBuilder ListIpfixswitchCollectionInstancesServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListIpfixswitchCollectionInstancesServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixswitchCollectionInstancesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIpfixswitchCollectionInstancesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXSwitchCollectionInstanceListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXSwitchCollectionInstanceListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXCollectorProfileType CreateOrReplaceIpfixcollectorProfile(string IpfixCollectorProfileId, NSXTIPFIXCollectorProfileType IpfixcollectorProfile)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            if (IpfixcollectorProfile == null) { throw new System.ArgumentNullException("IpfixcollectorProfile cannot be null"); }
            NSXTIPFIXCollectorProfileType returnValue = default(NSXTIPFIXCollectorProfileType);
            StringBuilder CreateOrReplaceIpfixcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixcollectorProfile, defaultSerializationSettings));
            request.Resource = CreateOrReplaceIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXCollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXCollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpfixcollectorProfile(string IpfixCollectorProfileId)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            
            StringBuilder DeleteIpfixcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXCollectorProfileType ReadIpfixcollectorProfile(string IpfixCollectorProfileId)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            NSXTIPFIXCollectorProfileType returnValue = default(NSXTIPFIXCollectorProfileType);
            StringBuilder ReadIpfixcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXCollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXCollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchIpfixcollectorProfile(string IpfixCollectorProfileId, NSXTIPFIXCollectorProfileType IpfixcollectorProfile)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            if (IpfixcollectorProfile == null) { throw new System.ArgumentNullException("IpfixcollectorProfile cannot be null"); }
            
            StringBuilder PatchIpfixcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixcollectorProfile, defaultSerializationSettings));
            request.Resource = PatchIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXSwitchCollectionInstanceType CreateOrReplaceIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId, NSXTIPFIXSwitchCollectionInstanceType IpfixswitchCollectionInstance)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            if (IpfixswitchCollectionInstance == null) { throw new System.ArgumentNullException("IpfixswitchCollectionInstance cannot be null"); }
            NSXTIPFIXSwitchCollectionInstanceType returnValue = default(NSXTIPFIXSwitchCollectionInstanceType);
            StringBuilder CreateOrReplaceIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixswitchCollectionInstance, defaultSerializationSettings));
            request.Resource = CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXSwitchCollectionInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXSwitchCollectionInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            
            StringBuilder DeleteIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId, NSXTIPFIXSwitchCollectionInstanceType IpfixswitchCollectionInstance)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            if (IpfixswitchCollectionInstance == null) { throw new System.ArgumentNullException("IpfixswitchCollectionInstance cannot be null"); }
            
            StringBuilder PatchIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            PatchIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixswitchCollectionInstance, defaultSerializationSettings));
            request.Resource = PatchIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXSwitchCollectionInstanceType ReadIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            NSXTIPFIXSwitchCollectionInstanceType returnValue = default(NSXTIPFIXSwitchCollectionInstanceType);
            StringBuilder ReadIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            ReadIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXSwitchCollectionInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXSwitchCollectionInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXCollectorProfileListResultType ListIpfixcollectorProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXCollectorProfileListResultType returnValue = default(NSXTIPFIXCollectorProfileListResultType);
            StringBuilder ListIpfixcollectorProfilesServiceURL = new StringBuilder("/infra/ipfix-collector-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixcollectorProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIpfixcollectorProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXCollectorProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXCollectorProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXCollectorProfileListResultType GlobalListIpfixcollectorProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXCollectorProfileListResultType returnValue = default(NSXTIPFIXCollectorProfileListResultType);
            StringBuilder ListIpfixcollectorProfilesServiceURL = new StringBuilder("/global-infra/ipfix-collector-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixcollectorProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIpfixcollectorProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXCollectorProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXCollectorProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXSwitchCollectionInstanceType GlobalCreateOrReplaceIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId, NSXTIPFIXSwitchCollectionInstanceType IpfixswitchCollectionInstance)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            if (IpfixswitchCollectionInstance == null) { throw new System.ArgumentNullException("IpfixswitchCollectionInstance cannot be null"); }
            NSXTIPFIXSwitchCollectionInstanceType returnValue = default(NSXTIPFIXSwitchCollectionInstanceType);
            StringBuilder CreateOrReplaceIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixswitchCollectionInstance, defaultSerializationSettings));
            request.Resource = CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXSwitchCollectionInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXSwitchCollectionInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            
            StringBuilder DeleteIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId, NSXTIPFIXSwitchCollectionInstanceType IpfixswitchCollectionInstance)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            if (IpfixswitchCollectionInstance == null) { throw new System.ArgumentNullException("IpfixswitchCollectionInstance cannot be null"); }
            
            StringBuilder PatchIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            PatchIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixswitchCollectionInstance, defaultSerializationSettings));
            request.Resource = PatchIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXSwitchCollectionInstanceType GlobalReadIpfixswitchCollectionInstance(string Tier1Id, string IpfixSwitchCollectionInstanceId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (IpfixSwitchCollectionInstanceId == null) { throw new System.ArgumentNullException("IpfixSwitchCollectionInstanceId cannot be null"); }
            NSXTIPFIXSwitchCollectionInstanceType returnValue = default(NSXTIPFIXSwitchCollectionInstanceType);
            StringBuilder ReadIpfixswitchCollectionInstanceServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/ipfix-switch-collection-instances/{ipfix-switch-collection-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixswitchCollectionInstanceServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            ReadIpfixswitchCollectionInstanceServiceURL.Replace("{ipfix-switch-collection-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixSwitchCollectionInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixswitchCollectionInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIpfixswitchCollectionInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXSwitchCollectionInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXSwitchCollectionInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXCollectorProfileType GlobalCreateOrReplaceIpfixcollectorProfile(string IpfixCollectorProfileId, NSXTIPFIXCollectorProfileType IpfixcollectorProfile)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            if (IpfixcollectorProfile == null) { throw new System.ArgumentNullException("IpfixcollectorProfile cannot be null"); }
            NSXTIPFIXCollectorProfileType returnValue = default(NSXTIPFIXCollectorProfileType);
            StringBuilder CreateOrReplaceIpfixcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixcollectorProfile, defaultSerializationSettings));
            request.Resource = CreateOrReplaceIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXCollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXCollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteIpfixcollectorProfile(string IpfixCollectorProfileId)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            
            StringBuilder DeleteIpfixcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXCollectorProfileType GlobalReadIpfixcollectorProfile(string IpfixCollectorProfileId)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            NSXTIPFIXCollectorProfileType returnValue = default(NSXTIPFIXCollectorProfileType);
            StringBuilder ReadIpfixcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXCollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXCollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchIpfixcollectorProfile(string IpfixCollectorProfileId, NSXTIPFIXCollectorProfileType IpfixcollectorProfile)
        {
            if (IpfixCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixCollectorProfileId cannot be null"); }
            if (IpfixcollectorProfile == null) { throw new System.ArgumentNullException("IpfixcollectorProfile cannot be null"); }
            
            StringBuilder PatchIpfixcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-collector-profiles/{ipfix-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixcollectorProfileServiceURL.Replace("{ipfix-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixcollectorProfile, defaultSerializationSettings));
            request.Resource = PatchIpfixcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIpfixcollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringInstanceType CreateOrReplacePortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId, NSXTPortMirroringInstanceType PortMirroringInstance)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            if (PortMirroringInstance == null) { throw new System.ArgumentNullException("PortMirroringInstance cannot be null"); }
            NSXTPortMirroringInstanceType returnValue = default(NSXTPortMirroringInstanceType);
            StringBuilder CreateOrReplacePortMirroringInstanceServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplacePortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplacePortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplacePortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortMirroringInstance, defaultSerializationSettings));
            request.Resource = CreateOrReplacePortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplacePortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            
            StringBuilder DeletePortMirroringInstanceServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchPortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId, NSXTPortMirroringInstanceType PortMirroringInstance)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            if (PortMirroringInstance == null) { throw new System.ArgumentNullException("PortMirroringInstance cannot be null"); }
            
            StringBuilder PatchPortMirroringInstanceServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortMirroringInstance, defaultSerializationSettings));
            request.Resource = PatchPortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringInstanceType ReadPortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            NSXTPortMirroringInstanceType returnValue = default(NSXTPortMirroringInstanceType);
            StringBuilder ReadPortMirroringInstanceServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadPortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadPortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadPortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadPortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadPortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringInstanceType GlobalCreateOrReplacePortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId, NSXTPortMirroringInstanceType PortMirroringInstance)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            if (PortMirroringInstance == null) { throw new System.ArgumentNullException("PortMirroringInstance cannot be null"); }
            NSXTPortMirroringInstanceType returnValue = default(NSXTPortMirroringInstanceType);
            StringBuilder CreateOrReplacePortMirroringInstanceServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplacePortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplacePortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplacePortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortMirroringInstance, defaultSerializationSettings));
            request.Resource = CreateOrReplacePortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplacePortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeletePortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            
            StringBuilder DeletePortMirroringInstanceServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchPortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId, NSXTPortMirroringInstanceType PortMirroringInstance)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            if (PortMirroringInstance == null) { throw new System.ArgumentNullException("PortMirroringInstance cannot be null"); }
            
            StringBuilder PatchPortMirroringInstanceServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortMirroringInstance, defaultSerializationSettings));
            request.Resource = PatchPortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringInstanceType GlobalReadPortMirroringInstance(string DomainId, string GroupId, string PortMirroringInstanceId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (PortMirroringInstanceId == null) { throw new System.ArgumentNullException("PortMirroringInstanceId cannot be null"); }
            NSXTPortMirroringInstanceType returnValue = default(NSXTPortMirroringInstanceType);
            StringBuilder ReadPortMirroringInstanceServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances/{port-mirroring-instance-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadPortMirroringInstanceServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadPortMirroringInstanceServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadPortMirroringInstanceServiceURL.Replace("{port-mirroring-instance-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortMirroringInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadPortMirroringInstanceServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadPortMirroringInstanceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringInstanceType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringInstanceType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortMirroringInstanceListResultType ListPortMirroringInstances(string DomainId, string GroupId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTPortMirroringInstanceListResultType returnValue = default(NSXTPortMirroringInstanceListResultType);
            StringBuilder ListPortMirroringInstancesServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/port-mirroring-instances");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListPortMirroringInstancesServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ListPortMirroringInstancesServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPortMirroringInstancesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPortMirroringInstancesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortMirroringInstanceListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortMirroringInstanceListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
