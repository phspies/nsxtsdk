// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class ErrorResolver
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        int retry;
        int timeout;
        CancellationToken cancellationToken;
        public ErrorResolver(RestClient Client, JsonSerializerSettings DefaultSerializationSettings, CancellationToken _cancellationToken, int _timeout, int _retry)

        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
            retry = _retry;
            timeout = _timeout;
            cancellationToken = _cancellationToken;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTErrorResolverInfoType> GetErrorResolverInfo(string ErrorId)
        {
            if (ErrorId == null) { throw new System.ArgumentNullException("ErrorId cannot be null"); }
            NSXTErrorResolverInfoType returnValue = default(NSXTErrorResolverInfoType);
            StringBuilder GetErrorResolverInfoServiceURL = new StringBuilder("/error-resolver/{error_id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetErrorResolverInfoServiceURL.Replace("{error_id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ErrorId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetErrorResolverInfoServiceURL.ToString();
            IRestResponse<NSXTErrorResolverInfoType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTErrorResolverInfoType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetErrorResolverInfoServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTErrorResolverInfoListType> ListErrorResolverInfo()
        {
            NSXTErrorResolverInfoListType returnValue = default(NSXTErrorResolverInfoListType);
            StringBuilder ListErrorResolverInfoServiceURL = new StringBuilder("/error-resolver");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListErrorResolverInfoServiceURL.ToString();
            IRestResponse<NSXTErrorResolverInfoListType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTErrorResolverInfoListType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListErrorResolverInfoServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task ResolveError(NSXTErrorResolverMetadataListType ErrorResolverMetadataList)
        {
            if (ErrorResolverMetadataList == null) { throw new System.ArgumentNullException("ErrorResolverMetadataList cannot be null"); }
            
            StringBuilder ResolveErrorServiceURL = new StringBuilder("/error-resolver?action=resolve_error");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(ErrorResolverMetadataList, defaultSerializationSettings));
            request.Resource = ResolveErrorServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + ResolveErrorServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
    }
}
