// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class AAA
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public AAA(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRecommendedFeaturePermissionListResultType ValidateAndRecommendPermissionsValidate(NSXTFeaturePermissionArrayType FeaturePermissionArray)
        {
            if (FeaturePermissionArray == null) { throw new System.ArgumentNullException("FeaturePermissionArray cannot be null"); }
            NSXTRecommendedFeaturePermissionListResultType returnValue = default(NSXTRecommendedFeaturePermissionListResultType);
            StringBuilder ValidateAndRecommendPermissionsValidateServiceURL = new StringBuilder("/aaa/roles?action=validate");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(FeaturePermissionArray, defaultSerializationSettings));
            request.Resource = ValidateAndRecommendPermissionsValidateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRecommendedFeaturePermissionListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteAllStaleRoleBindingsDeleteStaleBindings()
        {
            
            StringBuilder DeleteAllStaleRoleBindingsDeleteStaleBindingsServiceURL = new StringBuilder("/aaa/role-bindings?action=delete_stale_bindings");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = DeleteAllStaleRoleBindingsDeleteStaleBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleListResultType GetAllRolesInfo()
        {
            NSXTRoleListResultType returnValue = default(NSXTRoleListResultType);
            StringBuilder GetAllRolesInfoServiceURL = new StringBuilder("/aaa/roles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetAllRolesInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVidmInfoListResultType GetUserVidmSearchResult(string SearchString, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (SearchString == null) { throw new System.ArgumentNullException("SearchString cannot be null"); }
            NSXTVidmInfoListResultType returnValue = default(NSXTVidmInfoListResultType);
            StringBuilder GetUserVidmSearchResultServiceURL = new StringBuilder("/aaa/vidm/users");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SearchString != null) { request.AddQueryParameter("search_string", SearchString.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetUserVidmSearchResultServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVidmInfoListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVidmInfoListResultType GetVidmSearchResult(string SearchString, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (SearchString == null) { throw new System.ArgumentNullException("SearchString cannot be null"); }
            NSXTVidmInfoListResultType returnValue = default(NSXTVidmInfoListResultType);
            StringBuilder GetVidmSearchResultServiceURL = new StringBuilder("/aaa/vidm/search");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SearchString != null) { request.AddQueryParameter("search_string", SearchString.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetVidmSearchResultServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVidmInfoListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNewRoleType CloneRoleClone(string Role, NSXTNewRoleType NewRole)
        {
            if (Role == null) { throw new System.ArgumentNullException("Role cannot be null"); }
            if (NewRole == null) { throw new System.ArgumentNullException("NewRole cannot be null"); }
            NSXTNewRoleType returnValue = default(NSXTNewRoleType);
            StringBuilder CloneRoleCloneServiceURL = new StringBuilder("/aaa/roles/{role}?action=clone");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            CloneRoleCloneServiceURL.Replace("{role}", System.Uri.EscapeDataString(Helpers.ConvertToString(Role, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(NewRole, defaultSerializationSettings));
            request.Resource = CloneRoleCloneServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTNewRoleType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleBindingType CreateRoleBinding(NSXTRoleBindingType RoleBinding)
        {
            if (RoleBinding == null) { throw new System.ArgumentNullException("RoleBinding cannot be null"); }
            NSXTRoleBindingType returnValue = default(NSXTRoleBindingType);
            StringBuilder CreateRoleBindingServiceURL = new StringBuilder("/aaa/role-bindings");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(RoleBinding, defaultSerializationSettings));
            request.Resource = CreateRoleBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleBindingType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleBindingListResultType GetAllRoleBindings(string? Cursor = null, string? IdentitySourceId = null, string? IdentitySourceType = null, string? IncludedFields = null, string? Name = null, long? PageSize = null, string? Role = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTRoleBindingListResultType returnValue = default(NSXTRoleBindingListResultType);
            StringBuilder GetAllRoleBindingsServiceURL = new StringBuilder("/aaa/role-bindings");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IdentitySourceId != null) { request.AddQueryParameter("identity_source_id", IdentitySourceId.ToString()); }
            if (IdentitySourceType != null) { request.AddQueryParameter("identity_source_type", IdentitySourceType.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (Name != null) { request.AddQueryParameter("name", Name.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (Role != null) { request.AddQueryParameter("role", Role.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = GetAllRoleBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleBindingListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleWithFeaturesType CreateOrUpdateRole(string Role, NSXTRoleWithFeaturesType RoleWithFeatures)
        {
            if (Role == null) { throw new System.ArgumentNullException("Role cannot be null"); }
            if (RoleWithFeatures == null) { throw new System.ArgumentNullException("RoleWithFeatures cannot be null"); }
            NSXTRoleWithFeaturesType returnValue = default(NSXTRoleWithFeaturesType);
            StringBuilder CreateOrUpdateRoleServiceURL = new StringBuilder("/aaa/roles/{role}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateRoleServiceURL.Replace("{role}", System.Uri.EscapeDataString(Helpers.ConvertToString(Role, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(RoleWithFeatures, defaultSerializationSettings));
            request.Resource = CreateOrUpdateRoleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleWithFeaturesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleWithFeaturesType GetRoleInfo(string Role)
        {
            if (Role == null) { throw new System.ArgumentNullException("Role cannot be null"); }
            NSXTRoleWithFeaturesType returnValue = default(NSXTRoleWithFeaturesType);
            StringBuilder GetRoleInfoServiceURL = new StringBuilder("/aaa/roles/{role}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetRoleInfoServiceURL.Replace("{role}", System.Uri.EscapeDataString(Helpers.ConvertToString(Role, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetRoleInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleWithFeaturesType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteRole(string Role)
        {
            if (Role == null) { throw new System.ArgumentNullException("Role cannot be null"); }
            
            StringBuilder DeleteRoleServiceURL = new StringBuilder("/aaa/roles/{role}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteRoleServiceURL.Replace("{role}", System.Uri.EscapeDataString(Helpers.ConvertToString(Role, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteRoleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTUserInfoType GetCurrentUserInfo()
        {
            NSXTUserInfoType returnValue = default(NSXTUserInfoType);
            StringBuilder GetCurrentUserInfoServiceURL = new StringBuilder("/aaa/user-info");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetCurrentUserInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTUserInfoType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTVidmInfoListResultType GetGroupVidmSearchResult(string SearchString, string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (SearchString == null) { throw new System.ArgumentNullException("SearchString cannot be null"); }
            NSXTVidmInfoListResultType returnValue = default(NSXTVidmInfoListResultType);
            StringBuilder GetGroupVidmSearchResultServiceURL = new StringBuilder("/aaa/vidm/groups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SearchString != null) { request.AddQueryParameter("search_string", SearchString.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetGroupVidmSearchResultServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTVidmInfoListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleBindingType UpdateRoleBinding(string BindingId, NSXTRoleBindingType RoleBinding)
        {
            if (BindingId == null) { throw new System.ArgumentNullException("BindingId cannot be null"); }
            if (RoleBinding == null) { throw new System.ArgumentNullException("RoleBinding cannot be null"); }
            NSXTRoleBindingType returnValue = default(NSXTRoleBindingType);
            StringBuilder UpdateRoleBindingServiceURL = new StringBuilder("/aaa/role-bindings/{binding-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateRoleBindingServiceURL.Replace("{binding-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BindingId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(RoleBinding, defaultSerializationSettings));
            request.Resource = UpdateRoleBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleBindingType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteRoleBinding(string BindingId)
        {
            if (BindingId == null) { throw new System.ArgumentNullException("BindingId cannot be null"); }
            
            StringBuilder DeleteRoleBindingServiceURL = new StringBuilder("/aaa/role-bindings/{binding-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteRoleBindingServiceURL.Replace("{binding-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BindingId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteRoleBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleBindingType GetRoleBinding(string BindingId)
        {
            if (BindingId == null) { throw new System.ArgumentNullException("BindingId cannot be null"); }
            NSXTRoleBindingType returnValue = default(NSXTRoleBindingType);
            StringBuilder GetRoleBindingServiceURL = new StringBuilder("/aaa/role-bindings/{binding-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetRoleBindingServiceURL.Replace("{binding-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(BindingId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetRoleBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleBindingType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTFeaturePermissionListResultType ListFeatures()
        {
            NSXTFeaturePermissionListResultType returnValue = default(NSXTFeaturePermissionListResultType);
            StringBuilder ListFeaturesServiceURL = new StringBuilder("/aaa/features-with-properties");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListFeaturesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTFeaturePermissionListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTRoleWithFeaturesListResultType ListRolesInfo(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTRoleWithFeaturesListResultType returnValue = default(NSXTRoleWithFeaturesListResultType);
            StringBuilder ListRolesInfoServiceURL = new StringBuilder("/aaa/roles-with-feature-permissions");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListRolesInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTRoleWithFeaturesListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
