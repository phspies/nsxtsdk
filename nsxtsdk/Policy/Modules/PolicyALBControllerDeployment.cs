// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyALBControllerDeployment
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyALBControllerDeployment(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeVMClusterConfigType AddAlbcontrollerNodeClusterConfig(NSXTALBControllerNodeVMClusterConfigType AlbcontrollerNodeVmclusterConfig)
        {
            if (AlbcontrollerNodeVmclusterConfig == null) { throw new System.ArgumentNullException("AlbcontrollerNodeVmclusterConfig cannot be null"); }
            NSXTALBControllerNodeVMClusterConfigType returnValue = default(NSXTALBControllerNodeVMClusterConfigType);
            StringBuilder AddAlbcontrollerNodeClusterConfigServiceURL = new StringBuilder("/alb/controller-nodes/clusterconfig");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(AlbcontrollerNodeVmclusterConfig, defaultSerializationSettings));
            request.Resource = AddAlbcontrollerNodeClusterConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + AddAlbcontrollerNodeClusterConfigServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeVMClusterConfigType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeVMClusterConfigType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeVMClusterConfigType ReadAlbcontrollerNodeClusterConfig()
        {
            NSXTALBControllerNodeVMClusterConfigType returnValue = default(NSXTALBControllerNodeVMClusterConfigType);
            StringBuilder ReadAlbcontrollerNodeClusterConfigServiceURL = new StringBuilder("/alb/controller-nodes/clusterconfig");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ReadAlbcontrollerNodeClusterConfigServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadAlbcontrollerNodeClusterConfigServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeVMClusterConfigType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeVMClusterConfigType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeFormFactorsType ListAlbcontrollerFormFactors()
        {
            NSXTALBControllerNodeFormFactorsType returnValue = default(NSXTALBControllerNodeFormFactorsType);
            StringBuilder ListAlbcontrollerFormFactorsServiceURL = new StringBuilder("/alb/controller-nodes/form-factors");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListAlbcontrollerFormFactorsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListAlbcontrollerFormFactorsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeFormFactorsType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeFormFactorsType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeVMDeploymentRequestListType AddAlbcontrollerNodeVM(NSXTAddALBControllerNodeVMInfoType AddAlbcontrollerNodeVminfo)
        {
            if (AddAlbcontrollerNodeVminfo == null) { throw new System.ArgumentNullException("AddAlbcontrollerNodeVminfo cannot be null"); }
            NSXTALBControllerNodeVMDeploymentRequestListType returnValue = default(NSXTALBControllerNodeVMDeploymentRequestListType);
            StringBuilder AddAlbcontrollerNodeVMServiceURL = new StringBuilder("/alb/controller-nodes/deployments");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(AddAlbcontrollerNodeVminfo, defaultSerializationSettings));
            request.Resource = AddAlbcontrollerNodeVMServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + AddAlbcontrollerNodeVMServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeVMDeploymentRequestListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeVMDeploymentRequestListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeVMDeploymentRequestListType ListAlbcontrollerNodeVmdeploymentRequests(string? State = null)
        {
            NSXTALBControllerNodeVMDeploymentRequestListType returnValue = default(NSXTALBControllerNodeVMDeploymentRequestListType);
            StringBuilder ListAlbcontrollerNodeVmdeploymentRequestsServiceURL = new StringBuilder("/alb/controller-nodes/deployments");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (State != null) { request.AddQueryParameter("state", State.ToString()); }
            request.Resource = ListAlbcontrollerNodeVmdeploymentRequestsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListAlbcontrollerNodeVmdeploymentRequestsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeVMDeploymentRequestListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeVMDeploymentRequestListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerClusterTriggerType RetriggerClustering()
        {
            NSXTALBControllerClusterTriggerType returnValue = default(NSXTALBControllerClusterTriggerType);
            StringBuilder RetriggerClusteringServiceURL = new StringBuilder("/alb/controller-nodes/cluster");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = RetriggerClusteringServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + RetriggerClusteringServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerClusterTriggerType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerClusterTriggerType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerClusterInfoType ListAlbcontrollerClusterInfo()
        {
            NSXTALBControllerClusterInfoType returnValue = default(NSXTALBControllerClusterInfoType);
            StringBuilder ListAlbcontrollerClusterInfoServiceURL = new StringBuilder("/alb/controller-nodes/cluster");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ListAlbcontrollerClusterInfoServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListAlbcontrollerClusterInfoServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerClusterInfoType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerClusterInfoType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeVMDeploymentRequestType UpdateAlbcontrollerNodeVmdeploymentRequest(string NodeId, NSXTALBControllerNodeVMDeploymentRequestType AlbcontrollerNodeVmdeploymentRequest, bool? RunningConfig = null)
        {
            if (NodeId == null) { throw new System.ArgumentNullException("NodeId cannot be null"); }
            if (AlbcontrollerNodeVmdeploymentRequest == null) { throw new System.ArgumentNullException("AlbcontrollerNodeVmdeploymentRequest cannot be null"); }
            NSXTALBControllerNodeVMDeploymentRequestType returnValue = default(NSXTALBControllerNodeVMDeploymentRequestType);
            StringBuilder UpdateAlbcontrollerNodeVmdeploymentRequestServiceURL = new StringBuilder("/alb/controller-nodes/deployments/{node-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateAlbcontrollerNodeVmdeploymentRequestServiceURL.Replace("{node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(AlbcontrollerNodeVmdeploymentRequest, defaultSerializationSettings));
            if (RunningConfig != null) { request.AddQueryParameter("running_config", RunningConfig.ToString()); }
            request.Resource = UpdateAlbcontrollerNodeVmdeploymentRequestServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateAlbcontrollerNodeVmdeploymentRequestServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeVMDeploymentRequestType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeVMDeploymentRequestType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeVMDeploymentRequestType ReadAlbcontrollerNodeVmdeploymentRequest(string NodeId)
        {
            if (NodeId == null) { throw new System.ArgumentNullException("NodeId cannot be null"); }
            NSXTALBControllerNodeVMDeploymentRequestType returnValue = default(NSXTALBControllerNodeVMDeploymentRequestType);
            StringBuilder ReadAlbcontrollerNodeVmdeploymentRequestServiceURL = new StringBuilder("/alb/controller-nodes/deployments/{node-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadAlbcontrollerNodeVmdeploymentRequestServiceURL.Replace("{node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadAlbcontrollerNodeVmdeploymentRequestServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadAlbcontrollerNodeVmdeploymentRequestServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeVMDeploymentRequestType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeVMDeploymentRequestType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTALBControllerNodeVMDeploymentStatusReportType ReadAlbcontrollerNodeVmdeploymentStatus(string NodeId)
        {
            if (NodeId == null) { throw new System.ArgumentNullException("NodeId cannot be null"); }
            NSXTALBControllerNodeVMDeploymentStatusReportType returnValue = default(NSXTALBControllerNodeVMDeploymentStatusReportType);
            StringBuilder ReadAlbcontrollerNodeVmdeploymentStatusServiceURL = new StringBuilder("/alb/controller-nodes/deployments/{node-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadAlbcontrollerNodeVmdeploymentStatusServiceURL.Replace("{node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadAlbcontrollerNodeVmdeploymentStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadAlbcontrollerNodeVmdeploymentStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTALBControllerNodeVMDeploymentStatusReportType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTALBControllerNodeVMDeploymentStatusReportType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteAutoDeployedAlbcontrollerNodeVM(string NodeId, bool? ForceDelete = null, string? Inaccessible = null)
        {
            if (NodeId == null) { throw new System.ArgumentNullException("NodeId cannot be null"); }
            
            StringBuilder DeleteAutoDeployedAlbcontrollerNodeVMServiceURL = new StringBuilder("/alb/controller-nodes/deployments/{node-id}?action=delete");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            DeleteAutoDeployedAlbcontrollerNodeVMServiceURL.Replace("{node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(NodeId, System.Globalization.CultureInfo.InvariantCulture)));
            if (ForceDelete != null) { request.AddQueryParameter("force_delete", ForceDelete.ToString()); }
            if (Inaccessible != null) { request.AddQueryParameter("inaccessible", Inaccessible.ToString()); }
            request.Resource = DeleteAutoDeployedAlbcontrollerNodeVMServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + DeleteAutoDeployedAlbcontrollerNodeVMServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
    }
}
