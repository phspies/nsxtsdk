// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyLoadBalancer
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        int retry;
        int timeout;
        CancellationToken cancellationToken;
        public PolicyLoadBalancer(RestClient Client, JsonSerializerSettings DefaultSerializationSettings, CancellationToken _cancellationToken, int _timeout, int _retry)

        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
            retry = _retry;
            timeout = _timeout;
            cancellationToken = _cancellationToken;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBServiceListResultType> ListLbservices(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBServiceListResultType returnValue = default(NSXTLBServiceListResultType);
            StringBuilder ListLbservicesServiceURL = new StringBuilder("/infra/lb-services");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbservicesServiceURL.ToString();
            IRestResponse<NSXTLBServiceListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBServiceListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbservicesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLbSslCipherAndProtocolListResultType> ListSslCiphersAndProtocols(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLbSslCipherAndProtocolListResultType returnValue = default(NSXTLbSslCipherAndProtocolListResultType);
            StringBuilder ListSslCiphersAndProtocolsServiceURL = new StringBuilder("/infra/lb-ssl-ciphers-and-protocols");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListSslCiphersAndProtocolsServiceURL.ToString();
            IRestResponse<NSXTLbSslCipherAndProtocolListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLbSslCipherAndProtocolListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListSslCiphersAndProtocolsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBClientSslProfileType> UpdateLbclientSslProfile(string LbClientSslProfileId, NSXTLBClientSslProfileType LbclientSslProfile)
        {
            if (LbClientSslProfileId == null) { throw new System.ArgumentNullException("LbClientSslProfileId cannot be null"); }
            if (LbclientSslProfile == null) { throw new System.ArgumentNullException("LbclientSslProfile cannot be null"); }
            NSXTLBClientSslProfileType returnValue = default(NSXTLBClientSslProfileType);
            StringBuilder UpdateLbclientSslProfileServiceURL = new StringBuilder("/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbclientSslProfileServiceURL.Replace("{lb-client-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbClientSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbclientSslProfile, defaultSerializationSettings));
            request.Resource = UpdateLbclientSslProfileServiceURL.ToString();
            IRestResponse<NSXTLBClientSslProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBClientSslProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbclientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbclientSslProfile(string LbClientSslProfileId, bool? Force = null)
        {
            if (LbClientSslProfileId == null) { throw new System.ArgumentNullException("LbClientSslProfileId cannot be null"); }
            
            StringBuilder DeleteLbclientSslProfileServiceURL = new StringBuilder("/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbclientSslProfileServiceURL.Replace("{lb-client-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbClientSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbclientSslProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbclientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbclientSslProfile(string LbClientSslProfileId, NSXTLBClientSslProfileType LbclientSslProfile)
        {
            if (LbClientSslProfileId == null) { throw new System.ArgumentNullException("LbClientSslProfileId cannot be null"); }
            if (LbclientSslProfile == null) { throw new System.ArgumentNullException("LbclientSslProfile cannot be null"); }
            
            StringBuilder PatchLbclientSslProfileServiceURL = new StringBuilder("/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbclientSslProfileServiceURL.Replace("{lb-client-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbClientSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbclientSslProfile, defaultSerializationSettings));
            request.Resource = PatchLbclientSslProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbclientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBClientSslProfileType> ReadLbclientSslProfile(string LbClientSslProfileId)
        {
            if (LbClientSslProfileId == null) { throw new System.ArgumentNullException("LbClientSslProfileId cannot be null"); }
            NSXTLBClientSslProfileType returnValue = default(NSXTLBClientSslProfileType);
            StringBuilder ReadLbclientSslProfileServiceURL = new StringBuilder("/infra/lb-client-ssl-profiles/{lb-client-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbclientSslProfileServiceURL.Replace("{lb-client-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbClientSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbclientSslProfileServiceURL.ToString();
            IRestResponse<NSXTLBClientSslProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBClientSslProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbclientSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBServiceType> UpdateLbservice(string LbServiceId, NSXTLBServiceType Lbservice)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            if (Lbservice == null) { throw new System.ArgumentNullException("Lbservice cannot be null"); }
            NSXTLBServiceType returnValue = default(NSXTLBServiceType);
            StringBuilder UpdateLbserviceServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbserviceServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Lbservice, defaultSerializationSettings));
            request.Resource = UpdateLbserviceServiceURL.ToString();
            IRestResponse<NSXTLBServiceType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBServiceType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbserviceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBServiceType> ReadLbservice(string LbServiceId)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            NSXTLBServiceType returnValue = default(NSXTLBServiceType);
            StringBuilder ReadLbserviceServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbserviceServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbserviceServiceURL.ToString();
            IRestResponse<NSXTLBServiceType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBServiceType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbserviceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbservice(string LbServiceId, NSXTLBServiceType Lbservice)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            if (Lbservice == null) { throw new System.ArgumentNullException("Lbservice cannot be null"); }
            
            StringBuilder PatchLbserviceServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbserviceServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Lbservice, defaultSerializationSettings));
            request.Resource = PatchLbserviceServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbserviceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbservice(string LbServiceId, bool? Force = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            
            StringBuilder DeleteLbserviceServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbserviceServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbserviceServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbserviceServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBPersistenceProfileListResultType> ListLbpersistenceProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBPersistenceProfileListResultType returnValue = default(NSXTLBPersistenceProfileListResultType);
            StringBuilder ListLbpersistenceProfilesServiceURL = new StringBuilder("/infra/lb-persistence-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbpersistenceProfilesServiceURL.ToString();
            IRestResponse<NSXTLBPersistenceProfileListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBPersistenceProfileListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbpersistenceProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBClientSslProfileListResultType> ListLbclientSslProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBClientSslProfileListResultType returnValue = default(NSXTLBClientSslProfileListResultType);
            StringBuilder ListLbclientSslProfilesServiceURL = new StringBuilder("/infra/lb-client-ssl-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbclientSslProfilesServiceURL.ToString();
            IRestResponse<NSXTLBClientSslProfileListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBClientSslProfileListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbclientSslProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBServerSslProfileListResultType> ListLbserverSslProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBServerSslProfileListResultType returnValue = default(NSXTLBServerSslProfileListResultType);
            StringBuilder ListLbserverSslProfilesServiceURL = new StringBuilder("/infra/lb-server-ssl-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbserverSslProfilesServiceURL.ToString();
            IRestResponse<NSXTLBServerSslProfileListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBServerSslProfileListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbserverSslProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBMonitorProfileListResultType> ListLbmonitorProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBMonitorProfileListResultType returnValue = default(NSXTLBMonitorProfileListResultType);
            StringBuilder ListLbmonitorProfilesServiceURL = new StringBuilder("/infra/lb-monitor-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbmonitorProfilesServiceURL.ToString();
            IRestResponse<NSXTLBMonitorProfileListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBMonitorProfileListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbmonitorProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBPersistenceProfileType> UpdateLbpersistenceProfile(string LbPersistenceProfileId, NSXTLBPersistenceProfileType LbpersistenceProfile)
        {
            if (LbPersistenceProfileId == null) { throw new System.ArgumentNullException("LbPersistenceProfileId cannot be null"); }
            if (LbpersistenceProfile == null) { throw new System.ArgumentNullException("LbpersistenceProfile cannot be null"); }
            NSXTLBPersistenceProfileType returnValue = default(NSXTLBPersistenceProfileType);
            StringBuilder UpdateLbpersistenceProfileServiceURL = new StringBuilder("/infra/lb-persistence-profiles/{lb-persistence-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbpersistenceProfileServiceURL.Replace("{lb-persistence-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPersistenceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbpersistenceProfile, defaultSerializationSettings));
            request.Resource = UpdateLbpersistenceProfileServiceURL.ToString();
            IRestResponse<NSXTLBPersistenceProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBPersistenceProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbpersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbpersistenceProfile(string LbPersistenceProfileId, NSXTLBPersistenceProfileType LbpersistenceProfile)
        {
            if (LbPersistenceProfileId == null) { throw new System.ArgumentNullException("LbPersistenceProfileId cannot be null"); }
            if (LbpersistenceProfile == null) { throw new System.ArgumentNullException("LbpersistenceProfile cannot be null"); }
            
            StringBuilder PatchLbpersistenceProfileServiceURL = new StringBuilder("/infra/lb-persistence-profiles/{lb-persistence-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbpersistenceProfileServiceURL.Replace("{lb-persistence-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPersistenceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbpersistenceProfile, defaultSerializationSettings));
            request.Resource = PatchLbpersistenceProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbpersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBPersistenceProfileType> ReadLbpersistenceProfile(string LbPersistenceProfileId)
        {
            if (LbPersistenceProfileId == null) { throw new System.ArgumentNullException("LbPersistenceProfileId cannot be null"); }
            NSXTLBPersistenceProfileType returnValue = default(NSXTLBPersistenceProfileType);
            StringBuilder ReadLbpersistenceProfileServiceURL = new StringBuilder("/infra/lb-persistence-profiles/{lb-persistence-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbpersistenceProfileServiceURL.Replace("{lb-persistence-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPersistenceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbpersistenceProfileServiceURL.ToString();
            IRestResponse<NSXTLBPersistenceProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBPersistenceProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbpersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbpersistenceProfile(string LbPersistenceProfileId, bool? Force = null)
        {
            if (LbPersistenceProfileId == null) { throw new System.ArgumentNullException("LbPersistenceProfileId cannot be null"); }
            
            StringBuilder DeleteLbpersistenceProfileServiceURL = new StringBuilder("/infra/lb-persistence-profiles/{lb-persistence-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbpersistenceProfileServiceURL.Replace("{lb-persistence-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPersistenceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbpersistenceProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbpersistenceProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBServerSslProfileType> UpdateLbserverSslProfile(string LbServerSslProfileId, NSXTLBServerSslProfileType LbserverSslProfile)
        {
            if (LbServerSslProfileId == null) { throw new System.ArgumentNullException("LbServerSslProfileId cannot be null"); }
            if (LbserverSslProfile == null) { throw new System.ArgumentNullException("LbserverSslProfile cannot be null"); }
            NSXTLBServerSslProfileType returnValue = default(NSXTLBServerSslProfileType);
            StringBuilder UpdateLbserverSslProfileServiceURL = new StringBuilder("/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbserverSslProfileServiceURL.Replace("{lb-server-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServerSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbserverSslProfile, defaultSerializationSettings));
            request.Resource = UpdateLbserverSslProfileServiceURL.ToString();
            IRestResponse<NSXTLBServerSslProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBServerSslProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbserverSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbserverSslProfile(string LbServerSslProfileId, NSXTLBServerSslProfileType LbserverSslProfile)
        {
            if (LbServerSslProfileId == null) { throw new System.ArgumentNullException("LbServerSslProfileId cannot be null"); }
            if (LbserverSslProfile == null) { throw new System.ArgumentNullException("LbserverSslProfile cannot be null"); }
            
            StringBuilder PatchLbserverSslProfileServiceURL = new StringBuilder("/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbserverSslProfileServiceURL.Replace("{lb-server-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServerSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbserverSslProfile, defaultSerializationSettings));
            request.Resource = PatchLbserverSslProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbserverSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbserverSslProfile(string LbServerSslProfileId, bool? Force = null)
        {
            if (LbServerSslProfileId == null) { throw new System.ArgumentNullException("LbServerSslProfileId cannot be null"); }
            
            StringBuilder DeleteLbserverSslProfileServiceURL = new StringBuilder("/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbserverSslProfileServiceURL.Replace("{lb-server-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServerSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbserverSslProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbserverSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBServerSslProfileType> ReadLbserverSslProfile(string LbServerSslProfileId)
        {
            if (LbServerSslProfileId == null) { throw new System.ArgumentNullException("LbServerSslProfileId cannot be null"); }
            NSXTLBServerSslProfileType returnValue = default(NSXTLBServerSslProfileType);
            StringBuilder ReadLbserverSslProfileServiceURL = new StringBuilder("/infra/lb-server-ssl-profiles/{lb-server-ssl-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbserverSslProfileServiceURL.Replace("{lb-server-ssl-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServerSslProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbserverSslProfileServiceURL.ToString();
            IRestResponse<NSXTLBServerSslProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBServerSslProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbserverSslProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBMonitorProfileType> UpdateLbmonitorProfile(string LbMonitorProfileId, NSXTLBMonitorProfileType LbmonitorProfile)
        {
            if (LbMonitorProfileId == null) { throw new System.ArgumentNullException("LbMonitorProfileId cannot be null"); }
            if (LbmonitorProfile == null) { throw new System.ArgumentNullException("LbmonitorProfile cannot be null"); }
            NSXTLBMonitorProfileType returnValue = default(NSXTLBMonitorProfileType);
            StringBuilder UpdateLbmonitorProfileServiceURL = new StringBuilder("/infra/lb-monitor-profiles/{lb-monitor-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbmonitorProfileServiceURL.Replace("{lb-monitor-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbMonitorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbmonitorProfile, defaultSerializationSettings));
            request.Resource = UpdateLbmonitorProfileServiceURL.ToString();
            IRestResponse<NSXTLBMonitorProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBMonitorProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbmonitorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBMonitorProfileType> ReadLbmonitorProfile(string LbMonitorProfileId)
        {
            if (LbMonitorProfileId == null) { throw new System.ArgumentNullException("LbMonitorProfileId cannot be null"); }
            NSXTLBMonitorProfileType returnValue = default(NSXTLBMonitorProfileType);
            StringBuilder ReadLbmonitorProfileServiceURL = new StringBuilder("/infra/lb-monitor-profiles/{lb-monitor-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbmonitorProfileServiceURL.Replace("{lb-monitor-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbMonitorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbmonitorProfileServiceURL.ToString();
            IRestResponse<NSXTLBMonitorProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBMonitorProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbmonitorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbmonitorProfile(string LbMonitorProfileId, bool? Force = null)
        {
            if (LbMonitorProfileId == null) { throw new System.ArgumentNullException("LbMonitorProfileId cannot be null"); }
            
            StringBuilder DeleteLbmonitorProfileServiceURL = new StringBuilder("/infra/lb-monitor-profiles/{lb-monitor-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbmonitorProfileServiceURL.Replace("{lb-monitor-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbMonitorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbmonitorProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbmonitorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbmonitorProfile(string LbMonitorProfileId, NSXTLBMonitorProfileType LbmonitorProfile)
        {
            if (LbMonitorProfileId == null) { throw new System.ArgumentNullException("LbMonitorProfileId cannot be null"); }
            if (LbmonitorProfile == null) { throw new System.ArgumentNullException("LbmonitorProfile cannot be null"); }
            
            StringBuilder PatchLbmonitorProfileServiceURL = new StringBuilder("/infra/lb-monitor-profiles/{lb-monitor-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbmonitorProfileServiceURL.Replace("{lb-monitor-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbMonitorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbmonitorProfile, defaultSerializationSettings));
            request.Resource = PatchLbmonitorProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbmonitorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBVirtualServerType> UpdateLbvirtualServer(string LbVirtualServerId, NSXTLBVirtualServerType LbvirtualServer)
        {
            if (LbVirtualServerId == null) { throw new System.ArgumentNullException("LbVirtualServerId cannot be null"); }
            if (LbvirtualServer == null) { throw new System.ArgumentNullException("LbvirtualServer cannot be null"); }
            NSXTLBVirtualServerType returnValue = default(NSXTLBVirtualServerType);
            StringBuilder UpdateLbvirtualServerServiceURL = new StringBuilder("/infra/lb-virtual-servers/{lb-virtual-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbvirtualServerServiceURL.Replace("{lb-virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbVirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbvirtualServer, defaultSerializationSettings));
            request.Resource = UpdateLbvirtualServerServiceURL.ToString();
            IRestResponse<NSXTLBVirtualServerType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBVirtualServerType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbvirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbvirtualServer(string LbVirtualServerId, bool? Force = null)
        {
            if (LbVirtualServerId == null) { throw new System.ArgumentNullException("LbVirtualServerId cannot be null"); }
            
            StringBuilder DeleteLbvirtualServerServiceURL = new StringBuilder("/infra/lb-virtual-servers/{lb-virtual-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbvirtualServerServiceURL.Replace("{lb-virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbVirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbvirtualServerServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbvirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbvirtualServer(string LbVirtualServerId, NSXTLBVirtualServerType LbvirtualServer)
        {
            if (LbVirtualServerId == null) { throw new System.ArgumentNullException("LbVirtualServerId cannot be null"); }
            if (LbvirtualServer == null) { throw new System.ArgumentNullException("LbvirtualServer cannot be null"); }
            
            StringBuilder PatchLbvirtualServerServiceURL = new StringBuilder("/infra/lb-virtual-servers/{lb-virtual-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbvirtualServerServiceURL.Replace("{lb-virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbVirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbvirtualServer, defaultSerializationSettings));
            request.Resource = PatchLbvirtualServerServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbvirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBVirtualServerType> ReadLbvirtualServer(string LbVirtualServerId)
        {
            if (LbVirtualServerId == null) { throw new System.ArgumentNullException("LbVirtualServerId cannot be null"); }
            NSXTLBVirtualServerType returnValue = default(NSXTLBVirtualServerType);
            StringBuilder ReadLbvirtualServerServiceURL = new StringBuilder("/infra/lb-virtual-servers/{lb-virtual-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbvirtualServerServiceURL.Replace("{lb-virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbVirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbvirtualServerServiceURL.ToString();
            IRestResponse<NSXTLBVirtualServerType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBVirtualServerType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbvirtualServerServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBAppProfileListResultType> ListLbappProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBAppProfileListResultType returnValue = default(NSXTLBAppProfileListResultType);
            StringBuilder ListLbappProfilesServiceURL = new StringBuilder("/infra/lb-app-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbappProfilesServiceURL.ToString();
            IRestResponse<NSXTLBAppProfileListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBAppProfileListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbappProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBPoolListResultType> ListLbpools(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBPoolListResultType returnValue = default(NSXTLBPoolListResultType);
            StringBuilder ListLbpoolsServiceURL = new StringBuilder("/infra/lb-pools");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbpoolsServiceURL.ToString();
            IRestResponse<NSXTLBPoolListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBPoolListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbpoolsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBPoolType> UpdateLbpool(string LbPoolId, NSXTLBPoolType Lbpool)
        {
            if (LbPoolId == null) { throw new System.ArgumentNullException("LbPoolId cannot be null"); }
            if (Lbpool == null) { throw new System.ArgumentNullException("Lbpool cannot be null"); }
            NSXTLBPoolType returnValue = default(NSXTLBPoolType);
            StringBuilder UpdateLbpoolServiceURL = new StringBuilder("/infra/lb-pools/{lb-pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbpoolServiceURL.Replace("{lb-pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Lbpool, defaultSerializationSettings));
            request.Resource = UpdateLbpoolServiceURL.ToString();
            IRestResponse<NSXTLBPoolType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBPoolType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbpoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBPoolType> ReadLbpool(string LbPoolId)
        {
            if (LbPoolId == null) { throw new System.ArgumentNullException("LbPoolId cannot be null"); }
            NSXTLBPoolType returnValue = default(NSXTLBPoolType);
            StringBuilder ReadLbpoolServiceURL = new StringBuilder("/infra/lb-pools/{lb-pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbpoolServiceURL.Replace("{lb-pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbpoolServiceURL.ToString();
            IRestResponse<NSXTLBPoolType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBPoolType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbpoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbpool(string LbPoolId, NSXTLBPoolType Lbpool)
        {
            if (LbPoolId == null) { throw new System.ArgumentNullException("LbPoolId cannot be null"); }
            if (Lbpool == null) { throw new System.ArgumentNullException("Lbpool cannot be null"); }
            
            StringBuilder PatchLbpoolServiceURL = new StringBuilder("/infra/lb-pools/{lb-pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbpoolServiceURL.Replace("{lb-pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPoolId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Lbpool, defaultSerializationSettings));
            request.Resource = PatchLbpoolServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbpoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbpool(string LbPoolId, bool? Force = null)
        {
            if (LbPoolId == null) { throw new System.ArgumentNullException("LbPoolId cannot be null"); }
            
            StringBuilder DeleteLbpoolServiceURL = new StringBuilder("/infra/lb-pools/{lb-pool-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbpoolServiceURL.Replace("{lb-pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPoolId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbpoolServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbpoolServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBAppProfileType> UpdateLbappProfile(string LbAppProfileId, NSXTLBAppProfileType LbappProfile)
        {
            if (LbAppProfileId == null) { throw new System.ArgumentNullException("LbAppProfileId cannot be null"); }
            if (LbappProfile == null) { throw new System.ArgumentNullException("LbappProfile cannot be null"); }
            NSXTLBAppProfileType returnValue = default(NSXTLBAppProfileType);
            StringBuilder UpdateLbappProfileServiceURL = new StringBuilder("/infra/lb-app-profiles/{lb-app-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateLbappProfileServiceURL.Replace("{lb-app-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbAppProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbappProfile, defaultSerializationSettings));
            request.Resource = UpdateLbappProfileServiceURL.ToString();
            IRestResponse<NSXTLBAppProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBAppProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateLbappProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task PatchLbappProfile(string LbAppProfileId, NSXTLBAppProfileType LbappProfile)
        {
            if (LbAppProfileId == null) { throw new System.ArgumentNullException("LbAppProfileId cannot be null"); }
            if (LbappProfile == null) { throw new System.ArgumentNullException("LbappProfile cannot be null"); }
            
            StringBuilder PatchLbappProfileServiceURL = new StringBuilder("/infra/lb-app-profiles/{lb-app-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchLbappProfileServiceURL.Replace("{lb-app-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbAppProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(LbappProfile, defaultSerializationSettings));
            request.Resource = PatchLbappProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchLbappProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task DeleteLbappProfile(string LbAppProfileId, bool? Force = null)
        {
            if (LbAppProfileId == null) { throw new System.ArgumentNullException("LbAppProfileId cannot be null"); }
            
            StringBuilder DeleteLbappProfileServiceURL = new StringBuilder("/infra/lb-app-profiles/{lb-app-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteLbappProfileServiceURL.Replace("{lb-app-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbAppProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Force != null) { request.AddQueryParameter("force", Force.ToString()); }
            request.Resource = DeleteLbappProfileServiceURL.ToString();
            IRestResponse response = await restClient.ExecuteTaskAsyncWithPolicy(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteLbappProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBAppProfileType> ReadLbappProfile(string LbAppProfileId)
        {
            if (LbAppProfileId == null) { throw new System.ArgumentNullException("LbAppProfileId cannot be null"); }
            NSXTLBAppProfileType returnValue = default(NSXTLBAppProfileType);
            StringBuilder ReadLbappProfileServiceURL = new StringBuilder("/infra/lb-app-profiles/{lb-app-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadLbappProfileServiceURL.Replace("{lb-app-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbAppProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadLbappProfileServiceURL.ToString();
            IRestResponse<NSXTLBAppProfileType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBAppProfileType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadLbappProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTLBVirtualServerListResultType> ListLbvirtualServers(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTLBVirtualServerListResultType returnValue = default(NSXTLBVirtualServerListResultType);
            StringBuilder ListLbvirtualServersServiceURL = new StringBuilder("/infra/lb-virtual-servers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListLbvirtualServersServiceURL.ToString();
            IRestResponse<NSXTLBVirtualServerListResultType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTLBVirtualServerListResultType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListLbvirtualServersServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
    }
}
