// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyIPFIXDFW
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyIPFIXDFW(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWCollectorProfileType GlobalCreateOrReplaceIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId, NSXTIPFIXDFWCollectorProfileType IpfixdfwcollectorProfile, bool? Override = null)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            if (IpfixdfwcollectorProfile == null) { throw new System.ArgumentNullException("IpfixdfwcollectorProfile cannot be null"); }
            NSXTIPFIXDFWCollectorProfileType returnValue = default(NSXTIPFIXDFWCollectorProfileType);
            StringBuilder CreateOrReplaceIpfixdfwcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixdfwcollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWCollectorProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId, NSXTIPFIXDFWCollectorProfileType IpfixdfwcollectorProfile, bool? Override = null)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            if (IpfixdfwcollectorProfile == null) { throw new System.ArgumentNullException("IpfixdfwcollectorProfile cannot be null"); }
            
            StringBuilder PatchIpfixdfwcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixdfwcollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWCollectorProfileType GlobalReadIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            NSXTIPFIXDFWCollectorProfileType returnValue = default(NSXTIPFIXDFWCollectorProfileType);
            StringBuilder ReadIpfixdfwcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWCollectorProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId, bool? Override = null)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            
            StringBuilder DeleteIpfixdfwcollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWProfileType CreateOrReplaceIpfixdfwprofile(string IpfixDfwProfileId, NSXTIPFIXDFWProfileType Ipfixdfwprofile, bool? Override = null)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            if (Ipfixdfwprofile == null) { throw new System.ArgumentNullException("Ipfixdfwprofile cannot be null"); }
            NSXTIPFIXDFWProfileType returnValue = default(NSXTIPFIXDFWProfileType);
            StringBuilder CreateOrReplaceIpfixdfwprofileServiceURL = new StringBuilder("/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Ipfixdfwprofile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpfixdfwprofile(string IpfixDfwProfileId, bool? Override = null)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            
            StringBuilder DeleteIpfixdfwprofileServiceURL = new StringBuilder("/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchIpfixdfwprofile(string IpfixDfwProfileId, NSXTIPFIXDFWProfileType Ipfixdfwprofile, bool? Override = null)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            if (Ipfixdfwprofile == null) { throw new System.ArgumentNullException("Ipfixdfwprofile cannot be null"); }
            
            StringBuilder PatchIpfixdfwprofileServiceURL = new StringBuilder("/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Ipfixdfwprofile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWProfileType ReadIpfixdfwprofile(string IpfixDfwProfileId)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            NSXTIPFIXDFWProfileType returnValue = default(NSXTIPFIXDFWProfileType);
            StringBuilder ReadIpfixdfwprofileServiceURL = new StringBuilder("/infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWProfileListResultType ListIpfixdfwprofiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXDFWProfileListResultType returnValue = default(NSXTIPFIXDFWProfileListResultType);
            StringBuilder ListIpfixdfwprofilesServiceURL = new StringBuilder("/infra/ipfix-dfw-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixdfwprofilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWCollectorProfileListResultType ListIpfixdfwcollectorProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXDFWCollectorProfileListResultType returnValue = default(NSXTIPFIXDFWCollectorProfileListResultType);
            StringBuilder ListIpfixdfwcollectorProfilesServiceURL = new StringBuilder("/infra/ipfix-dfw-collector-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixdfwcollectorProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWCollectorProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWCollectorProfileType CreateOrReplaceIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId, NSXTIPFIXDFWCollectorProfileType IpfixdfwcollectorProfile, bool? Override = null)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            if (IpfixdfwcollectorProfile == null) { throw new System.ArgumentNullException("IpfixdfwcollectorProfile cannot be null"); }
            NSXTIPFIXDFWCollectorProfileType returnValue = default(NSXTIPFIXDFWCollectorProfileType);
            StringBuilder CreateOrReplaceIpfixdfwcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixdfwcollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWCollectorProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId, NSXTIPFIXDFWCollectorProfileType IpfixdfwcollectorProfile, bool? Override = null)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            if (IpfixdfwcollectorProfile == null) { throw new System.ArgumentNullException("IpfixdfwcollectorProfile cannot be null"); }
            
            StringBuilder PatchIpfixdfwcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpfixdfwcollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWCollectorProfileType ReadIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            NSXTIPFIXDFWCollectorProfileType returnValue = default(NSXTIPFIXDFWCollectorProfileType);
            StringBuilder ReadIpfixdfwcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWCollectorProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpfixdfwcollectorProfile(string IpfixDfwCollectorProfileId, bool? Override = null)
        {
            if (IpfixDfwCollectorProfileId == null) { throw new System.ArgumentNullException("IpfixDfwCollectorProfileId cannot be null"); }
            
            StringBuilder DeleteIpfixdfwcollectorProfileServiceURL = new StringBuilder("/infra/ipfix-dfw-collector-profiles/{ipfix-dfw-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixdfwcollectorProfileServiceURL.Replace("{ipfix-dfw-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwCollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIpfixdfwcollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWProfileListResultType GlobalListIpfixdfwprofiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXDFWProfileListResultType returnValue = default(NSXTIPFIXDFWProfileListResultType);
            StringBuilder ListIpfixdfwprofilesServiceURL = new StringBuilder("/global-infra/ipfix-dfw-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixdfwprofilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWProfileType GlobalCreateOrReplaceIpfixdfwprofile(string IpfixDfwProfileId, NSXTIPFIXDFWProfileType Ipfixdfwprofile, bool? Override = null)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            if (Ipfixdfwprofile == null) { throw new System.ArgumentNullException("Ipfixdfwprofile cannot be null"); }
            NSXTIPFIXDFWProfileType returnValue = default(NSXTIPFIXDFWProfileType);
            StringBuilder CreateOrReplaceIpfixdfwprofileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Ipfixdfwprofile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteIpfixdfwprofile(string IpfixDfwProfileId, bool? Override = null)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            
            StringBuilder DeleteIpfixdfwprofileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchIpfixdfwprofile(string IpfixDfwProfileId, NSXTIPFIXDFWProfileType Ipfixdfwprofile, bool? Override = null)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            if (Ipfixdfwprofile == null) { throw new System.ArgumentNullException("Ipfixdfwprofile cannot be null"); }
            
            StringBuilder PatchIpfixdfwprofileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Ipfixdfwprofile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWProfileType GlobalReadIpfixdfwprofile(string IpfixDfwProfileId)
        {
            if (IpfixDfwProfileId == null) { throw new System.ArgumentNullException("IpfixDfwProfileId cannot be null"); }
            NSXTIPFIXDFWProfileType returnValue = default(NSXTIPFIXDFWProfileType);
            StringBuilder ReadIpfixdfwprofileServiceURL = new StringBuilder("/global-infra/ipfix-dfw-profiles/{ipfix-dfw-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIpfixdfwprofileServiceURL.Replace("{ipfix-dfw-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixDfwProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIpfixdfwprofileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXDFWCollectorProfileListResultType GlobalListIpfixdfwcollectorProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXDFWCollectorProfileListResultType returnValue = default(NSXTIPFIXDFWCollectorProfileListResultType);
            StringBuilder ListIpfixdfwcollectorProfilesServiceURL = new StringBuilder("/global-infra/ipfix-dfw-collector-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIpfixdfwcollectorProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPFIXDFWCollectorProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
