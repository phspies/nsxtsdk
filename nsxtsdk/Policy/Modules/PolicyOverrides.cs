// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyOverrides
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyOverrides(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTOverriddenResourceListResultType GlobalListOverriddenResources(string? IntentPath = null, string? SitePath = null)
        {
            NSXTOverriddenResourceListResultType returnValue = default(NSXTOverriddenResourceListResultType);
            StringBuilder ListOverriddenResourcesServiceURL = new StringBuilder("/global-infra/overridden-resources");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (SitePath != null) { request.AddQueryParameter("site_path", SitePath.ToString()); }
            request.Resource = ListOverriddenResourcesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTOverriddenResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTOverriddenResourceListResultType ListOverriddenResources(string? IntentPath = null, string? SitePath = null)
        {
            NSXTOverriddenResourceListResultType returnValue = default(NSXTOverriddenResourceListResultType);
            StringBuilder ListOverriddenResourcesServiceURL = new StringBuilder("/infra/overridden-resources");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            if (SitePath != null) { request.AddQueryParameter("site_path", SitePath.ToString()); }
            request.Resource = ListOverriddenResourcesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTOverriddenResourceListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
