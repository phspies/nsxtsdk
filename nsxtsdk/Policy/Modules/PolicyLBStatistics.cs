// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyLBStatistics
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyLBStatistics(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBServiceStatusType GetLbserviceStatus(string LbServiceId, string? EnforcementPointPath = null, bool? IncludeInstanceDetails = null, string? Source = null, string? TransportNodeIds = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            NSXTAggregateLBServiceStatusType returnValue = default(NSXTAggregateLBServiceStatusType);
            StringBuilder GetLbserviceStatusServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}/detailed-status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLbserviceStatusServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludeInstanceDetails != null) { request.AddQueryParameter("include_instance_details", IncludeInstanceDetails.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            if (TransportNodeIds != null) { request.AddQueryParameter("transport_node_ids", TransportNodeIds.ToString()); }
            request.Resource = GetLbserviceStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbserviceStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBServiceStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBServiceStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLBNodeUsageType GetLbnodeUsage(string NodePath)
        {
            if (NodePath == null) { throw new System.ArgumentNullException("NodePath cannot be null"); }
            NSXTLBNodeUsageType returnValue = default(NSXTLBNodeUsageType);
            StringBuilder GetLbnodeUsageServiceURL = new StringBuilder("/infra/lb-node-usage");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (NodePath != null) { request.AddQueryParameter("node_path", NodePath.ToString()); }
            request.Resource = GetLbnodeUsageServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbnodeUsageServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLBNodeUsageType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLBNodeUsageType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBPoolStatusType GetLbpoolStatus(string LbServiceId, string LbPoolId, string? EnforcementPointPath = null, string? Source = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            if (LbPoolId == null) { throw new System.ArgumentNullException("LbPoolId cannot be null"); }
            NSXTAggregateLBPoolStatusType returnValue = default(NSXTAggregateLBPoolStatusType);
            StringBuilder GetLbpoolStatusServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/detailed-status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLbpoolStatusServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            GetLbpoolStatusServiceURL.Replace("{lb-pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPoolId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetLbpoolStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbpoolStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBPoolStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBPoolStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBServiceStatisticsType GetLbserviceStatistics(string LbServiceId, string? EnforcementPointPath = null, string? Source = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            NSXTAggregateLBServiceStatisticsType returnValue = default(NSXTAggregateLBServiceStatisticsType);
            StringBuilder GetLbserviceStatisticsServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}/statistics");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLbserviceStatisticsServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetLbserviceStatisticsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbserviceStatisticsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBServiceStatisticsType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBServiceStatisticsType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBVirtualServerStatisticsType GetLbvirtualServerStatistics(string LbServiceId, string LbVirtualServerId, string? EnforcementPointPath = null, string? Source = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            if (LbVirtualServerId == null) { throw new System.ArgumentNullException("LbVirtualServerId cannot be null"); }
            NSXTAggregateLBVirtualServerStatisticsType returnValue = default(NSXTAggregateLBVirtualServerStatisticsType);
            StringBuilder GetLbvirtualServerStatisticsServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/statistics");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLbvirtualServerStatisticsServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            GetLbvirtualServerStatisticsServiceURL.Replace("{lb-virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbVirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetLbvirtualServerStatisticsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbvirtualServerStatisticsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBVirtualServerStatisticsType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBVirtualServerStatisticsType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBVirtualServerStatusType GetLbvirtualServerStatus(string LbServiceId, string LbVirtualServerId, string? EnforcementPointPath = null, string? Source = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            if (LbVirtualServerId == null) { throw new System.ArgumentNullException("LbVirtualServerId cannot be null"); }
            NSXTAggregateLBVirtualServerStatusType returnValue = default(NSXTAggregateLBVirtualServerStatusType);
            StringBuilder GetLbvirtualServerStatusServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}/lb-virtual-servers/{lb-virtual-server-id}/detailed-status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLbvirtualServerStatusServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            GetLbvirtualServerStatusServiceURL.Replace("{lb-virtual-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbVirtualServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetLbvirtualServerStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbvirtualServerStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBVirtualServerStatusType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBVirtualServerStatusType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTLBServiceUsageSummaryType GetLbserviceUsageSummary(bool? IncludeUsages = null)
        {
            NSXTLBServiceUsageSummaryType returnValue = default(NSXTLBServiceUsageSummaryType);
            StringBuilder GetLbserviceUsageSummaryServiceURL = new StringBuilder("/infra/lb-service-usage-summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (IncludeUsages != null) { request.AddQueryParameter("include_usages", IncludeUsages.ToString()); }
            request.Resource = GetLbserviceUsageSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbserviceUsageSummaryServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTLBServiceUsageSummaryType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTLBServiceUsageSummaryType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBPoolStatisticsType GetLbpoolStatistics(string LbServiceId, string LbPoolId, string? EnforcementPointPath = null, string? Source = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            if (LbPoolId == null) { throw new System.ArgumentNullException("LbPoolId cannot be null"); }
            NSXTAggregateLBPoolStatisticsType returnValue = default(NSXTAggregateLBPoolStatisticsType);
            StringBuilder GetLbpoolStatisticsServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}/lb-pools/{lb-pool-id}/statistics");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLbpoolStatisticsServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            GetLbpoolStatisticsServiceURL.Replace("{lb-pool-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbPoolId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetLbpoolStatisticsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbpoolStatisticsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBPoolStatisticsType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBPoolStatisticsType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBServiceUsageType GetLbserviceUsage(string LbServiceId, string? EnforcementPointPath = null, string? Source = null)
        {
            if (LbServiceId == null) { throw new System.ArgumentNullException("LbServiceId cannot be null"); }
            NSXTAggregateLBServiceUsageType returnValue = default(NSXTAggregateLBServiceUsageType);
            StringBuilder GetLbserviceUsageServiceURL = new StringBuilder("/infra/lb-services/{lb-service-id}/service-usage");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetLbserviceUsageServiceURL.Replace("{lb-service-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LbServiceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (Source != null) { request.AddQueryParameter("source", Source.ToString()); }
            request.Resource = GetLbserviceUsageServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbserviceUsageServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBServiceUsageType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBServiceUsageType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTAggregateLBNodeUsageSummaryType GetLbnodeUsageSummary(string? EnforcementPointPath = null, bool? IncludeUsages = null)
        {
            NSXTAggregateLBNodeUsageSummaryType returnValue = default(NSXTAggregateLBNodeUsageSummaryType);
            StringBuilder GetLbnodeUsageSummaryServiceURL = new StringBuilder("/infra/lb-node-usage-summary");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludeUsages != null) { request.AddQueryParameter("include_usages", IncludeUsages.ToString()); }
            request.Resource = GetLbnodeUsageSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetLbnodeUsageSummaryServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTAggregateLBNodeUsageSummaryType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTAggregateLBNodeUsageSummaryType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
