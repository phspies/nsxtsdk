// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyIdentity
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyIdentity(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwComputeCollectionStatusType GlobalGetIdfwstatusForAcomputeCollection(string ComputeCollectionId, string? EnforcementPointPath = null)
        {
            if (ComputeCollectionId == null) { throw new System.ArgumentNullException("ComputeCollectionId cannot be null"); }
            NSXTIdfwComputeCollectionStatusType returnValue = default(NSXTIdfwComputeCollectionStatusType);
            StringBuilder GetIdfwstatusForAcomputeCollectionServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetIdfwstatusForAcomputeCollectionServiceURL.Replace("{compute-collection-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetIdfwstatusForAcomputeCollectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwComputeCollectionStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwVirtualMachineStatusListResultType ListVirtualMachineIdfwstatusByTransportNode(string TransportNodeId, string? EnforcementPointPath = null)
        {
            if (TransportNodeId == null) { throw new System.ArgumentNullException("TransportNodeId cannot be null"); }
            NSXTIdfwVirtualMachineStatusListResultType returnValue = default(NSXTIdfwVirtualMachineStatusListResultType);
            StringBuilder ListVirtualMachineIdfwstatusByTransportNodeServiceURL = new StringBuilder("/infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListVirtualMachineIdfwstatusByTransportNodeServiceURL.Replace("{transport-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(TransportNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ListVirtualMachineIdfwstatusByTransportNodeServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwVirtualMachineStatusListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyIdfwGroupVmDetailListResultType GetGroupVmDetails(string GroupPath, string? EnforcementPointPath = null)
        {
            if (GroupPath == null) { throw new System.ArgumentNullException("GroupPath cannot be null"); }
            NSXTPolicyIdfwGroupVmDetailListResultType returnValue = default(NSXTPolicyIdfwGroupVmDetailListResultType);
            StringBuilder GetGroupVmDetailsServiceURL = new StringBuilder("/infra/settings/firewall/idfw/group-vm-details");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (GroupPath != null) { request.AddQueryParameter("group_path", GroupPath.ToString()); }
            request.Resource = GetGroupVmDetailsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyIdfwGroupVmDetailListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerType GlobalCreateOrReplaceFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, NSXTDirectoryLdapServerType DirectoryLdapServer, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            if (DirectoryLdapServer == null) { throw new System.ArgumentNullException("DirectoryLdapServer cannot be null"); }
            NSXTDirectoryLdapServerType returnValue = default(NSXTDirectoryLdapServerType);
            StringBuilder CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryLdapServer, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerType GlobalCreateOrPatchFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, NSXTDirectoryLdapServerType DirectoryLdapServer, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            if (DirectoryLdapServer == null) { throw new System.ArgumentNullException("DirectoryLdapServer cannot be null"); }
            NSXTDirectoryLdapServerType returnValue = default(NSXTDirectoryLdapServerType);
            StringBuilder CreateOrPatchFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrPatchFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryLdapServer, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrPatchFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalTestFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, string Action, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            
            StringBuilder TestFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            TestFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            TestFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = TestFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerType GlobalReadFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            NSXTDirectoryLdapServerType returnValue = default(NSXTDirectoryLdapServerType);
            StringBuilder ReadFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ReadFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            
            StringBuilder DeleteFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = DeleteFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerListResultsType GlobalListFirewallIdentityStoreLdapServers(string FirewallIdentityStoreId, string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            NSXTDirectoryLdapServerListResultsType returnValue = default(NSXTDirectoryLdapServerListResultsType);
            StringBuilder ListFirewallIdentityStoreLdapServersServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListFirewallIdentityStoreLdapServersServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallIdentityStoreLdapServersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwTransportNodeStatusListResultType GlobalListIdfwstatusForAllTransportNodesInAcomputeCollection(string ComputeCollectionId, string? EnforcementPointPath = null)
        {
            if (ComputeCollectionId == null) { throw new System.ArgumentNullException("ComputeCollectionId cannot be null"); }
            NSXTIdfwTransportNodeStatusListResultType returnValue = default(NSXTIdfwTransportNodeStatusListResultType);
            StringBuilder ListIdfwstatusForAllTransportNodesInAcomputeCollectionServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListIdfwstatusForAllTransportNodesInAcomputeCollectionServiceURL.Replace("{compute-collection-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ListIdfwstatusForAllTransportNodesInAcomputeCollectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwTransportNodeStatusListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainSizeType ScanFirewallIdentityStoreSize(NSXTDirectoryDomainType DirectoryDomain, string? EnforcementPointPath = null)
        {
            if (DirectoryDomain == null) { throw new System.ArgumentNullException("DirectoryDomain cannot be null"); }
            NSXTDirectoryDomainSizeType returnValue = default(NSXTDirectoryDomainSizeType);
            StringBuilder ScanFirewallIdentityStoreSizeServiceURL = new StringBuilder("/infra/firewall-identity-store-size");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryDomain, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ScanFirewallIdentityStoreSizeServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainSizeType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryGroupListResultsType SearchFirewallIdentityGroups(string FirewallIdentityStoreId, string FilterValue, string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (FilterValue == null) { throw new System.ArgumentNullException("FilterValue cannot be null"); }
            NSXTDirectoryGroupListResultsType returnValue = default(NSXTDirectoryGroupListResultsType);
            StringBuilder SearchFirewallIdentityGroupsServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/groups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            SearchFirewallIdentityGroupsServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (FilterValue != null) { request.AddQueryParameter("filter_value", FilterValue.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = SearchFirewallIdentityGroupsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryGroupListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainSizeType GlobalScanFirewallIdentityStoreSize(NSXTDirectoryDomainType DirectoryDomain, string? EnforcementPointPath = null)
        {
            if (DirectoryDomain == null) { throw new System.ArgumentNullException("DirectoryDomain cannot be null"); }
            NSXTDirectoryDomainSizeType returnValue = default(NSXTDirectoryDomainSizeType);
            StringBuilder ScanFirewallIdentityStoreSizeServiceURL = new StringBuilder("/global-infra/firewall-identity-store-size");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryDomain, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ScanFirewallIdentityStoreSizeServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainSizeType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerType CreateOrReplaceFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, NSXTDirectoryLdapServerType DirectoryLdapServer, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            if (DirectoryLdapServer == null) { throw new System.ArgumentNullException("DirectoryLdapServer cannot be null"); }
            NSXTDirectoryLdapServerType returnValue = default(NSXTDirectoryLdapServerType);
            StringBuilder CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryLdapServer, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrReplaceFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerType CreateOrPatchFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, NSXTDirectoryLdapServerType DirectoryLdapServer, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            if (DirectoryLdapServer == null) { throw new System.ArgumentNullException("DirectoryLdapServer cannot be null"); }
            NSXTDirectoryLdapServerType returnValue = default(NSXTDirectoryLdapServerType);
            StringBuilder CreateOrPatchFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrPatchFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryLdapServer, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrPatchFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void TestFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, string Action, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            
            StringBuilder TestFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            TestFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            TestFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = TestFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerType ReadFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            NSXTDirectoryLdapServerType returnValue = default(NSXTDirectoryLdapServerType);
            StringBuilder ReadFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ReadFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteFirewallIdentityStoreLdapServer(string FirewallIdentityStoreId, string LdapServerId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (LdapServerId == null) { throw new System.ArgumentNullException("LdapServerId cannot be null"); }
            
            StringBuilder DeleteFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers/{ldap-server-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteFirewallIdentityStoreLdapServerServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteFirewallIdentityStoreLdapServerServiceURL.Replace("{ldap-server-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(LdapServerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = DeleteFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwVmStatsType GetUserLoginEventsForAVM(string VmId, string? EnforcementPointPath = null)
        {
            if (VmId == null) { throw new System.ArgumentNullException("VmId cannot be null"); }
            NSXTIdfwVmStatsType returnValue = default(NSXTIdfwVmStatsType);
            StringBuilder GetUserLoginEventsForAVMServiceURL = new StringBuilder("/infra/settings/firewall/idfw/vm-stats/{vm-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetUserLoginEventsForAVMServiceURL.Replace("{vm-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VmId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetUserLoginEventsForAVMServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwVmStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwUserStatsType GetUserLoginEvents(string UserId, string? EnforcementPointPath = null)
        {
            if (UserId == null) { throw new System.ArgumentNullException("UserId cannot be null"); }
            NSXTIdfwUserStatsType returnValue = default(NSXTIdfwUserStatsType);
            StringBuilder GetUserLoginEventsServiceURL = new StringBuilder("/infra/settings/firewall/idfw/user-stats/{user-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetUserLoginEventsServiceURL.Replace("{user-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UserId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetUserLoginEventsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwUserStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryGroupMemberListResultsType ListFirewallIdentityStoreGroupMemberGroups(string FirewallIdentityStoreId, string GroupId, string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTDirectoryGroupMemberListResultsType returnValue = default(NSXTDirectoryGroupMemberListResultsType);
            StringBuilder ListFirewallIdentityStoreGroupMemberGroupsServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/groups/{group-id}/member-groups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListFirewallIdentityStoreGroupMemberGroupsServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            ListFirewallIdentityStoreGroupMemberGroupsServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallIdentityStoreGroupMemberGroupsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryGroupMemberListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwVirtualMachineStatusListResultType GlobalListVirtualMachineIdfwstatusByTransportNode(string TransportNodeId, string? EnforcementPointPath = null)
        {
            if (TransportNodeId == null) { throw new System.ArgumentNullException("TransportNodeId cannot be null"); }
            NSXTIdfwVirtualMachineStatusListResultType returnValue = default(NSXTIdfwVirtualMachineStatusListResultType);
            StringBuilder ListVirtualMachineIdfwstatusByTransportNodeServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/transport-nodes/{transport-node-id}/vms/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListVirtualMachineIdfwstatusByTransportNodeServiceURL.Replace("{transport-node-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(TransportNodeId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ListVirtualMachineIdfwstatusByTransportNodeServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwVirtualMachineStatusListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwVmStatsType GlobalGetUserLoginEventsForAVM(string VmId, string? EnforcementPointPath = null)
        {
            if (VmId == null) { throw new System.ArgumentNullException("VmId cannot be null"); }
            NSXTIdfwVmStatsType returnValue = default(NSXTIdfwVmStatsType);
            StringBuilder GetUserLoginEventsForAVMServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/vm-stats/{vm-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetUserLoginEventsForAVMServiceURL.Replace("{vm-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(VmId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetUserLoginEventsForAVMServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwVmStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwComputeCollectionStatusType GetIdfwstatusForAcomputeCollection(string ComputeCollectionId, string? EnforcementPointPath = null)
        {
            if (ComputeCollectionId == null) { throw new System.ArgumentNullException("ComputeCollectionId cannot be null"); }
            NSXTIdfwComputeCollectionStatusType returnValue = default(NSXTIdfwComputeCollectionStatusType);
            StringBuilder GetIdfwstatusForAcomputeCollectionServiceURL = new StringBuilder("/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetIdfwstatusForAcomputeCollectionServiceURL.Replace("{compute-collection-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetIdfwstatusForAcomputeCollectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwComputeCollectionStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwSystemStatsType GetIdfwsystemStatisticsData(string? EnforcementPointPath = null)
        {
            NSXTIdfwSystemStatsType returnValue = default(NSXTIdfwSystemStatsType);
            StringBuilder GetIdfwsystemStatisticsDataServiceURL = new StringBuilder("/infra/settings/firewall/idfw/system-stats");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetIdfwsystemStatisticsDataServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwSystemStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainSyncStatsType GetFirewallIdentityStoreSyncStats(string FirewallIdentityStoreId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            NSXTDirectoryDomainSyncStatsType returnValue = default(NSXTDirectoryDomainSyncStatsType);
            StringBuilder GetFirewallIdentityStoreSyncStatsServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetFirewallIdentityStoreSyncStatsServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetFirewallIdentityStoreSyncStatsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainSyncStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainListResultsType ListFirewallIdentityStores(string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTDirectoryDomainListResultsType returnValue = default(NSXTDirectoryDomainListResultsType);
            StringBuilder ListFirewallIdentityStoresServiceURL = new StringBuilder("/infra/firewall-identity-stores");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallIdentityStoresServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerListResultsType ListFirewallIdentityStoreLdapServers(string FirewallIdentityStoreId, string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            NSXTDirectoryLdapServerListResultsType returnValue = default(NSXTDirectoryLdapServerListResultsType);
            StringBuilder ListFirewallIdentityStoreLdapServersServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}/ldap-servers");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListFirewallIdentityStoreLdapServersServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallIdentityStoreLdapServersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwUserStatsType GlobalGetUserLoginEvents(string UserId, string? EnforcementPointPath = null)
        {
            if (UserId == null) { throw new System.ArgumentNullException("UserId cannot be null"); }
            NSXTIdfwUserStatsType returnValue = default(NSXTIdfwUserStatsType);
            StringBuilder GetUserLoginEventsServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/user-stats/{user-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetUserLoginEventsServiceURL.Replace("{user-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(UserId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetUserLoginEventsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwUserStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyIdfwGroupVmDetailListResultType GlobalGetGroupVmDetails(string GroupPath, string? EnforcementPointPath = null)
        {
            if (GroupPath == null) { throw new System.ArgumentNullException("GroupPath cannot be null"); }
            NSXTPolicyIdfwGroupVmDetailListResultType returnValue = default(NSXTPolicyIdfwGroupVmDetailListResultType);
            StringBuilder GetGroupVmDetailsServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/group-vm-details");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (GroupPath != null) { request.AddQueryParameter("group_path", GroupPath.ToString()); }
            request.Resource = GetGroupVmDetailsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyIdfwGroupVmDetailListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwComputeCollectionListResultType GetIdfwstatusForAllComputeCollections(string? EnforcementPointPath = null)
        {
            NSXTIdfwComputeCollectionListResultType returnValue = default(NSXTIdfwComputeCollectionListResultType);
            StringBuilder GetIdfwstatusForAllComputeCollectionsServiceURL = new StringBuilder("/infra/settings/firewall/idfw/compute-collections/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetIdfwstatusForAllComputeCollectionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwComputeCollectionListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainType CreateOrReplaceFirewallIdentityStore(string FirewallIdentityStoreId, NSXTDirectoryDomainType DirectoryDomain, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (DirectoryDomain == null) { throw new System.ArgumentNullException("DirectoryDomain cannot be null"); }
            NSXTDirectoryDomainType returnValue = default(NSXTDirectoryDomainType);
            StringBuilder CreateOrReplaceFirewallIdentityStoreServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryDomain, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrReplaceFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteFirewallIdentityStore(string FirewallIdentityStoreId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            
            StringBuilder DeleteFirewallIdentityStoreServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = DeleteFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void RequestFirewallIdentityStoreSync(string FirewallIdentityStoreId, string Action, long? Delay = null, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            
            StringBuilder RequestFirewallIdentityStoreSyncServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            RequestFirewallIdentityStoreSyncServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            if (Delay != null) { request.AddQueryParameter("delay", Delay.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = RequestFirewallIdentityStoreSyncServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainType ReadFirewallIdentityStore(string FirewallIdentityStoreId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            NSXTDirectoryDomainType returnValue = default(NSXTDirectoryDomainType);
            StringBuilder ReadFirewallIdentityStoreServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ReadFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void CreateOrPatchFirewallIdentityStore(string FirewallIdentityStoreId, NSXTDirectoryDomainType DirectoryDomain, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (DirectoryDomain == null) { throw new System.ArgumentNullException("DirectoryDomain cannot be null"); }
            
            StringBuilder CreateOrPatchFirewallIdentityStoreServiceURL = new StringBuilder("/infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryDomain, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrPatchFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryGroupMemberListResultsType GlobalListFirewallIdentityStoreGroupMemberGroups(string FirewallIdentityStoreId, string GroupId, string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTDirectoryGroupMemberListResultsType returnValue = default(NSXTDirectoryGroupMemberListResultsType);
            StringBuilder ListFirewallIdentityStoreGroupMemberGroupsServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/groups/{group-id}/member-groups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListFirewallIdentityStoreGroupMemberGroupsServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            ListFirewallIdentityStoreGroupMemberGroupsServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallIdentityStoreGroupMemberGroupsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryGroupMemberListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwUserSessionDataAndMappingsType GetUserSessionData(string? EnforcementPointPath = null)
        {
            NSXTIdfwUserSessionDataAndMappingsType returnValue = default(NSXTIdfwUserSessionDataAndMappingsType);
            StringBuilder GetUserSessionDataServiceURL = new StringBuilder("/infra/settings/firewall/idfw/user-session-data");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetUserSessionDataServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwUserSessionDataAndMappingsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainType GlobalCreateOrReplaceFirewallIdentityStore(string FirewallIdentityStoreId, NSXTDirectoryDomainType DirectoryDomain, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (DirectoryDomain == null) { throw new System.ArgumentNullException("DirectoryDomain cannot be null"); }
            NSXTDirectoryDomainType returnValue = default(NSXTDirectoryDomainType);
            StringBuilder CreateOrReplaceFirewallIdentityStoreServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryDomain, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrReplaceFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteFirewallIdentityStore(string FirewallIdentityStoreId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            
            StringBuilder DeleteFirewallIdentityStoreServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = DeleteFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalRequestFirewallIdentityStoreSync(string FirewallIdentityStoreId, string Action, long? Delay = null, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            
            StringBuilder RequestFirewallIdentityStoreSyncServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            RequestFirewallIdentityStoreSyncServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            if (Delay != null) { request.AddQueryParameter("delay", Delay.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = RequestFirewallIdentityStoreSyncServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainType GlobalReadFirewallIdentityStore(string FirewallIdentityStoreId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            NSXTDirectoryDomainType returnValue = default(NSXTDirectoryDomainType);
            StringBuilder ReadFirewallIdentityStoreServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ReadFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalCreateOrPatchFirewallIdentityStore(string FirewallIdentityStoreId, NSXTDirectoryDomainType DirectoryDomain, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (DirectoryDomain == null) { throw new System.ArgumentNullException("DirectoryDomain cannot be null"); }
            
            StringBuilder CreateOrPatchFirewallIdentityStoreServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchFirewallIdentityStoreServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryDomain, defaultSerializationSettings));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = CreateOrPatchFirewallIdentityStoreServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwSystemStatsType GlobalGetIdfwsystemStatisticsData(string? EnforcementPointPath = null)
        {
            NSXTIdfwSystemStatsType returnValue = default(NSXTIdfwSystemStatsType);
            StringBuilder GetIdfwsystemStatisticsDataServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/system-stats");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetIdfwsystemStatisticsDataServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwSystemStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwTransportNodeStatusListResultType ListIdfwstatusForAllTransportNodesInAcomputeCollection(string ComputeCollectionId, string? EnforcementPointPath = null)
        {
            if (ComputeCollectionId == null) { throw new System.ArgumentNullException("ComputeCollectionId cannot be null"); }
            NSXTIdfwTransportNodeStatusListResultType returnValue = default(NSXTIdfwTransportNodeStatusListResultType);
            StringBuilder ListIdfwstatusForAllTransportNodesInAcomputeCollectionServiceURL = new StringBuilder("/infra/settings/firewall/idfw/compute-collections/{compute-collection-id}/transport-nodes/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListIdfwstatusForAllTransportNodesInAcomputeCollectionServiceURL.Replace("{compute-collection-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ComputeCollectionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = ListIdfwstatusForAllTransportNodesInAcomputeCollectionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwTransportNodeStatusListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainListResultsType GlobalListFirewallIdentityStores(string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTDirectoryDomainListResultsType returnValue = default(NSXTDirectoryDomainListResultsType);
            StringBuilder ListFirewallIdentityStoresServiceURL = new StringBuilder("/global-infra/firewall-identity-stores");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListFirewallIdentityStoresServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryDomainSyncStatsType GlobalGetFirewallIdentityStoreSyncStats(string FirewallIdentityStoreId, string? EnforcementPointPath = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            NSXTDirectoryDomainSyncStatsType returnValue = default(NSXTDirectoryDomainSyncStatsType);
            StringBuilder GetFirewallIdentityStoreSyncStatsServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/sync-stats");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetFirewallIdentityStoreSyncStatsServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetFirewallIdentityStoreSyncStatsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryDomainSyncStatsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwComputeCollectionListResultType GlobalGetIdfwstatusForAllComputeCollections(string? EnforcementPointPath = null)
        {
            NSXTIdfwComputeCollectionListResultType returnValue = default(NSXTIdfwComputeCollectionListResultType);
            StringBuilder GetIdfwstatusForAllComputeCollectionsServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/compute-collections/status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetIdfwstatusForAllComputeCollectionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwComputeCollectionListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIdfwUserSessionDataAndMappingsType GlobalGetUserSessionData(string? EnforcementPointPath = null)
        {
            NSXTIdfwUserSessionDataAndMappingsType returnValue = default(NSXTIdfwUserSessionDataAndMappingsType);
            StringBuilder GetUserSessionDataServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/user-session-data");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = GetUserSessionDataServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIdfwUserSessionDataAndMappingsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerStatusType VerifyFirewallIdentityStoreLdapServer(NSXTDirectoryLdapServerType DirectoryLdapServer, string Action, string? EnforcementPointPath = null)
        {
            if (DirectoryLdapServer == null) { throw new System.ArgumentNullException("DirectoryLdapServer cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            NSXTDirectoryLdapServerStatusType returnValue = default(NSXTDirectoryLdapServerStatusType);
            StringBuilder VerifyFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/infra/firewall-identity-store-ldap-server");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryLdapServer, defaultSerializationSettings));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = VerifyFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryLdapServerStatusType GlobalVerifyFirewallIdentityStoreLdapServer(NSXTDirectoryLdapServerType DirectoryLdapServer, string Action, string? EnforcementPointPath = null)
        {
            if (DirectoryLdapServer == null) { throw new System.ArgumentNullException("DirectoryLdapServer cannot be null"); }
            if (Action == null) { throw new System.ArgumentNullException("Action cannot be null"); }
            NSXTDirectoryLdapServerStatusType returnValue = default(NSXTDirectoryLdapServerStatusType);
            StringBuilder VerifyFirewallIdentityStoreLdapServerServiceURL = new StringBuilder("/global-infra/firewall-identity-store-ldap-server");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DirectoryLdapServer, defaultSerializationSettings));
            if (Action != null) { request.AddQueryParameter("action", Action.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            request.Resource = VerifyFirewallIdentityStoreLdapServerServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryLdapServerStatusType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDirectoryGroupListResultsType GlobalSearchFirewallIdentityGroups(string FirewallIdentityStoreId, string FilterValue, string? Cursor = null, string? EnforcementPointPath = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (FirewallIdentityStoreId == null) { throw new System.ArgumentNullException("FirewallIdentityStoreId cannot be null"); }
            if (FilterValue == null) { throw new System.ArgumentNullException("FilterValue cannot be null"); }
            NSXTDirectoryGroupListResultsType returnValue = default(NSXTDirectoryGroupListResultsType);
            StringBuilder SearchFirewallIdentityGroupsServiceURL = new StringBuilder("/global-infra/firewall-identity-stores/{firewall-identity-store-id}/groups");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            SearchFirewallIdentityGroupsServiceURL.Replace("{firewall-identity-store-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(FirewallIdentityStoreId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (FilterValue != null) { request.AddQueryParameter("filter_value", FilterValue.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = SearchFirewallIdentityGroupsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDirectoryGroupListResultsType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
