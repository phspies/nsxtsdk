// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyIpDiscovery
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyIpDiscovery(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPDiscoveryProfileListResultType GlobalGetIpdiscoveryProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPDiscoveryProfileListResultType returnValue = default(NSXTIPDiscoveryProfileListResultType);
            StringBuilder GetIpdiscoveryProfilesServiceURL = new StringBuilder("/global-infra/ip-discovery-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetIpdiscoveryProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPDiscoveryProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPDiscoveryProfileType GlobalUpdateIpdiscoveryProfile(string IpDiscoveryProfileId, NSXTIPDiscoveryProfileType IpdiscoveryProfile, bool? Override = null)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            if (IpdiscoveryProfile == null) { throw new System.ArgumentNullException("IpdiscoveryProfile cannot be null"); }
            NSXTIPDiscoveryProfileType returnValue = default(NSXTIPDiscoveryProfileType);
            StringBuilder UpdateIpdiscoveryProfileServiceURL = new StringBuilder("/global-infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpdiscoveryProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = UpdateIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPDiscoveryProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalCreateIpdiscoveryProfile(string IpDiscoveryProfileId, NSXTIPDiscoveryProfileType IpdiscoveryProfile, bool? Override = null)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            if (IpdiscoveryProfile == null) { throw new System.ArgumentNullException("IpdiscoveryProfile cannot be null"); }
            
            StringBuilder CreateIpdiscoveryProfileServiceURL = new StringBuilder("/global-infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpdiscoveryProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteIpdiscoveryProfile(string IpDiscoveryProfileId, bool? Override = null)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            
            StringBuilder DeleteIpdiscoveryProfileServiceURL = new StringBuilder("/global-infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPDiscoveryProfileType GlobalGetIpdiscoveryProfile(string IpDiscoveryProfileId)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            NSXTIPDiscoveryProfileType returnValue = default(NSXTIPDiscoveryProfileType);
            StringBuilder GetIpdiscoveryProfileServiceURL = new StringBuilder("/global-infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPDiscoveryProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPDiscoveryProfileListResultType GetIpdiscoveryProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPDiscoveryProfileListResultType returnValue = default(NSXTIPDiscoveryProfileListResultType);
            StringBuilder GetIpdiscoveryProfilesServiceURL = new StringBuilder("/infra/ip-discovery-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = GetIpdiscoveryProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPDiscoveryProfileListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPDiscoveryProfileType UpdateIpdiscoveryProfile(string IpDiscoveryProfileId, NSXTIPDiscoveryProfileType IpdiscoveryProfile, bool? Override = null)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            if (IpdiscoveryProfile == null) { throw new System.ArgumentNullException("IpdiscoveryProfile cannot be null"); }
            NSXTIPDiscoveryProfileType returnValue = default(NSXTIPDiscoveryProfileType);
            StringBuilder UpdateIpdiscoveryProfileServiceURL = new StringBuilder("/infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpdiscoveryProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = UpdateIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPDiscoveryProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void CreateIpdiscoveryProfile(string IpDiscoveryProfileId, NSXTIPDiscoveryProfileType IpdiscoveryProfile, bool? Override = null)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            if (IpdiscoveryProfile == null) { throw new System.ArgumentNullException("IpdiscoveryProfile cannot be null"); }
            
            StringBuilder CreateIpdiscoveryProfileServiceURL = new StringBuilder("/infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IpdiscoveryProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIpdiscoveryProfile(string IpDiscoveryProfileId, bool? Override = null)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            
            StringBuilder DeleteIpdiscoveryProfileServiceURL = new StringBuilder("/infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPDiscoveryProfileType GetIpdiscoveryProfile(string IpDiscoveryProfileId)
        {
            if (IpDiscoveryProfileId == null) { throw new System.ArgumentNullException("IpDiscoveryProfileId cannot be null"); }
            NSXTIPDiscoveryProfileType returnValue = default(NSXTIPDiscoveryProfileType);
            StringBuilder GetIpdiscoveryProfileServiceURL = new StringBuilder("/infra/ip-discovery-profiles/{ip-discovery-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetIpdiscoveryProfileServiceURL.Replace("{ip-discovery-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpDiscoveryProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetIpdiscoveryProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTIPDiscoveryProfileType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
