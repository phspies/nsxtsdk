// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyCloudNativeCommonAgent
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        int retry;
        int timeout;
        CancellationToken cancellationToken;
        public PolicyCloudNativeCommonAgent(RestClient Client, JsonSerializerSettings DefaultSerializationSettings, CancellationToken _cancellationToken, int _timeout, int _retry)

        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
            retry = _retry;
            timeout = _timeout;
            cancellationToken = _cancellationToken;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTCommonAgentHostConfigurationInfoType> PatchCommonAgentHostConfiguration(NSXTCommonAgentHostConfigurationInfoType CommonAgentHostConfigurationInfo)
        {
            if (CommonAgentHostConfigurationInfo == null) { throw new System.ArgumentNullException("CommonAgentHostConfigurationInfo cannot be null"); }
            NSXTCommonAgentHostConfigurationInfoType returnValue = default(NSXTCommonAgentHostConfigurationInfoType);
            StringBuilder PatchCommonAgentHostConfigurationServiceURL = new StringBuilder("/infra/napp/common-agent/host-config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(CommonAgentHostConfigurationInfo, defaultSerializationSettings));
            request.Resource = PatchCommonAgentHostConfigurationServiceURL.ToString();
            IRestResponse<NSXTCommonAgentHostConfigurationInfoType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTCommonAgentHostConfigurationInfoType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchCommonAgentHostConfigurationServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTCommonAgentHostConfigurationInfoType> GetCommonAgentHostConfiguration()
        {
            NSXTCommonAgentHostConfigurationInfoType returnValue = default(NSXTCommonAgentHostConfigurationInfoType);
            StringBuilder GetCommonAgentHostConfigurationServiceURL = new StringBuilder("/infra/napp/common-agent/host-config");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetCommonAgentHostConfigurationServiceURL.ToString();
            IRestResponse<NSXTCommonAgentHostConfigurationInfoType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTCommonAgentHostConfigurationInfoType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetCommonAgentHostConfigurationServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public async Task<NSXTCommonAgentHostConfigurationInfoType> ResetCommonAgentHostConfiguration()
        {
            NSXTCommonAgentHostConfigurationInfoType returnValue = default(NSXTCommonAgentHostConfigurationInfoType);
            StringBuilder ResetCommonAgentHostConfigurationServiceURL = new StringBuilder("/infra/napp/common-agent/host-config?action=reset");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = ResetCommonAgentHostConfigurationServiceURL.ToString();
            IRestResponse<NSXTCommonAgentHostConfigurationInfoType> response = await restClient.ExecuteTaskAsyncWithPolicy<NSXTCommonAgentHostConfigurationInfoType>(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + ResetCommonAgentHostConfigurationServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            return response.Data;
        }
    }
}
