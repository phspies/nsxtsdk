// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyDiscoveryProfileBinding
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyDiscoveryProfileBinding(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapListResultType ListInfraSegmentDiscoveryBindings(string InfraSegmentId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapListResultType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapListResultType);
            StringBuilder ListInfraSegmentDiscoveryBindingsServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListInfraSegmentDiscoveryBindingsServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListInfraSegmentDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListInfraSegmentDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGroupDiscoveryProfileBindingMapType UpdateGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId, NSXTGroupDiscoveryProfileBindingMapType GroupDiscoveryProfileBindingMap)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            if (GroupDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("GroupDiscoveryProfileBindingMap cannot be null"); }
            NSXTGroupDiscoveryProfileBindingMapType returnValue = default(NSXTGroupDiscoveryProfileBindingMapType);
            StringBuilder UpdateGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(GroupDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTGroupDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTGroupDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId, NSXTGroupDiscoveryProfileBindingMapType GroupDiscoveryProfileBindingMap)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            if (GroupDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("GroupDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(GroupDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGroupDiscoveryProfileBindingMapType GetGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            NSXTGroupDiscoveryProfileBindingMapType returnValue = default(NSXTGroupDiscoveryProfileBindingMapType);
            StringBuilder GetGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            GetGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            GetGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTGroupDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTGroupDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType UpdateInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder UpdateInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType GetInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder GetInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType UpdateInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder UpdateInfraPortDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchInfraPortDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteInfraPortDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType GetInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder GetInfraPortDiscoveryBindingServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapListResultType GlobalListInfraPortDiscoveryBindings(string InfraSegmentId, string InfraPortId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapListResultType returnValue = default(NSXTPortDiscoveryProfileBindingMapListResultType);
            StringBuilder ListInfraPortDiscoveryBindingsServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListInfraPortDiscoveryBindingsServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            ListInfraPortDiscoveryBindingsServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListInfraPortDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListInfraPortDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapListResultType ListSegmentDiscoveryBindings(string Tier1Id, string SegmentId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapListResultType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapListResultType);
            StringBuilder ListSegmentDiscoveryBindingsServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListSegmentDiscoveryBindingsServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            ListSegmentDiscoveryBindingsServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListSegmentDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListSegmentDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapListResultType ListInfraPortDiscoveryBindings(string InfraSegmentId, string InfraPortId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapListResultType returnValue = default(NSXTPortDiscoveryProfileBindingMapListResultType);
            StringBuilder ListInfraPortDiscoveryBindingsServiceURL = new StringBuilder("/infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListInfraPortDiscoveryBindingsServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            ListInfraPortDiscoveryBindingsServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListInfraPortDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListInfraPortDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapListResultType GlobalListSegmentDiscoveryBindings(string Tier1Id, string SegmentId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapListResultType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapListResultType);
            StringBuilder ListSegmentDiscoveryBindingsServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListSegmentDiscoveryBindingsServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            ListSegmentDiscoveryBindingsServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListSegmentDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListSegmentDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGroupDiscoveryProfileBindingMapListResultType GlobalListGroupDiscoveryProfileBindings(string DomainId, string GroupId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTGroupDiscoveryProfileBindingMapListResultType returnValue = default(NSXTGroupDiscoveryProfileBindingMapListResultType);
            StringBuilder ListGroupDiscoveryProfileBindingsServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListGroupDiscoveryProfileBindingsServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ListGroupDiscoveryProfileBindingsServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListGroupDiscoveryProfileBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListGroupDiscoveryProfileBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTGroupDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTGroupDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGroupDiscoveryProfileBindingMapListResultType ListGroupDiscoveryProfileBindings(string DomainId, string GroupId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            NSXTGroupDiscoveryProfileBindingMapListResultType returnValue = default(NSXTGroupDiscoveryProfileBindingMapListResultType);
            StringBuilder ListGroupDiscoveryProfileBindingsServiceURL = new StringBuilder("/infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListGroupDiscoveryProfileBindingsServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ListGroupDiscoveryProfileBindingsServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListGroupDiscoveryProfileBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListGroupDiscoveryProfileBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTGroupDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTGroupDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType GlobalUpdateInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder UpdateInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType GlobalGetInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder GetInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchInfraSegmentDiscoveryBinding(string InfraSegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchInfraSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchInfraSegmentDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchInfraSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchInfraSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchInfraSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapListResultType GlobalListPortDiscoveryBindings(string Tier1Id, string SegmentId, string PortId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapListResultType returnValue = default(NSXTPortDiscoveryProfileBindingMapListResultType);
            StringBuilder ListPortDiscoveryBindingsServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListPortDiscoveryBindingsServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            ListPortDiscoveryBindingsServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            ListPortDiscoveryBindingsServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPortDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPortDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapListResultType ListPortDiscoveryBindings(string Tier1Id, string SegmentId, string PortId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapListResultType returnValue = default(NSXTPortDiscoveryProfileBindingMapListResultType);
            StringBuilder ListPortDiscoveryBindingsServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListPortDiscoveryBindingsServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            ListPortDiscoveryBindingsServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            ListPortDiscoveryBindingsServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPortDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPortDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGroupDiscoveryProfileBindingMapType GlobalUpdateGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId, NSXTGroupDiscoveryProfileBindingMapType GroupDiscoveryProfileBindingMap)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            if (GroupDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("GroupDiscoveryProfileBindingMap cannot be null"); }
            NSXTGroupDiscoveryProfileBindingMapType returnValue = default(NSXTGroupDiscoveryProfileBindingMapType);
            StringBuilder UpdateGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(GroupDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTGroupDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTGroupDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId, NSXTGroupDiscoveryProfileBindingMapType GroupDiscoveryProfileBindingMap)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            if (GroupDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("GroupDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(GroupDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTGroupDiscoveryProfileBindingMapType GlobalGetGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            NSXTGroupDiscoveryProfileBindingMapType returnValue = default(NSXTGroupDiscoveryProfileBindingMapType);
            StringBuilder GetGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            GetGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            GetGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTGroupDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTGroupDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteGroupDiscoveryProfileBinding(string DomainId, string GroupId, string DiscoveryProfileBindingMapId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (GroupId == null) { throw new System.ArgumentNullException("GroupId cannot be null"); }
            if (DiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("DiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteGroupDiscoveryProfileBindingServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/groups/{group-id}/discovery-profile-binding-maps/{discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteGroupDiscoveryProfileBindingServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteGroupDiscoveryProfileBindingServiceURL.Replace("{group-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(GroupId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteGroupDiscoveryProfileBindingServiceURL.Replace("{discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteGroupDiscoveryProfileBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteGroupDiscoveryProfileBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType GlobalUpdatePortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder UpdatePortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            UpdatePortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdatePortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdatePortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdatePortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType GlobalGetPortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder GetPortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            GetPortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchPortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchPortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeletePortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeletePortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapListResultType GlobalListInfraSegmentDiscoveryBindings(string InfraSegmentId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapListResultType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapListResultType);
            StringBuilder ListInfraSegmentDiscoveryBindingsServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/segment-discovery-profile-binding-maps");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListInfraSegmentDiscoveryBindingsServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListInfraSegmentDiscoveryBindingsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListInfraSegmentDiscoveryBindingsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType GlobalUpdateInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder UpdateInfraPortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchInfraPortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteInfraPortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType GlobalGetInfraPortDiscoveryBinding(string InfraSegmentId, string InfraPortId, string PortDiscoveryProfileBindingMapId)
        {
            if (InfraSegmentId == null) { throw new System.ArgumentNullException("InfraSegmentId cannot be null"); }
            if (InfraPortId == null) { throw new System.ArgumentNullException("InfraPortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder GetInfraPortDiscoveryBindingServiceURL = new StringBuilder("/global-infra/segments/{infra-segment-id}/ports/{infra-port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInfraPortDiscoveryBindingServiceURL.Replace("{infra-segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraSegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInfraPortDiscoveryBindingServiceURL.Replace("{infra-port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(InfraPortId, System.Globalization.CultureInfo.InvariantCulture)));
            GetInfraPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInfraPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetInfraPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType UpdatePortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder UpdatePortDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdatePortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            UpdatePortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdatePortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdatePortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdatePortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdatePortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPortDiscoveryProfileBindingMapType GetPortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            NSXTPortDiscoveryProfileBindingMapType returnValue = default(NSXTPortDiscoveryProfileBindingMapType);
            StringBuilder GetPortDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            GetPortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            GetPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTPortDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTPortDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchPortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId, NSXTPortDiscoveryProfileBindingMapType PortDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            if (PortDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchPortDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchPortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(PortDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchPortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePortDiscoveryBinding(string Tier1Id, string SegmentId, string PortId, string PortDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (PortId == null) { throw new System.ArgumentNullException("PortId cannot be null"); }
            if (PortDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("PortDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeletePortDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/ports/{port-id}/port-discovery-profile-binding-maps/{port-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePortDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortDiscoveryBindingServiceURL.Replace("{port-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortId, System.Globalization.CultureInfo.InvariantCulture)));
            DeletePortDiscoveryBindingServiceURL.Replace("{port-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PortDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeletePortDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePortDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType UpdateSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder UpdateSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType GetSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder GetSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            GetSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchSegmentDiscoveryBindingServiceURL = new StringBuilder("/infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            PatchSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType GlobalUpdateSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder UpdateSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            UpdateSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            UpdateSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = UpdateSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + UpdateSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTSegmentDiscoveryProfileBindingMapType GlobalGetSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            NSXTSegmentDiscoveryProfileBindingMapType returnValue = default(NSXTSegmentDiscoveryProfileBindingMapType);
            StringBuilder GetSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            GetSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            GetSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTSegmentDiscoveryProfileBindingMapType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTSegmentDiscoveryProfileBindingMapType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            
            StringBuilder DeleteSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchSegmentDiscoveryBinding(string Tier1Id, string SegmentId, string SegmentDiscoveryProfileBindingMapId, NSXTSegmentDiscoveryProfileBindingMapType SegmentDiscoveryProfileBindingMap)
        {
            if (Tier1Id == null) { throw new System.ArgumentNullException("Tier1Id cannot be null"); }
            if (SegmentId == null) { throw new System.ArgumentNullException("SegmentId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMapId == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMapId cannot be null"); }
            if (SegmentDiscoveryProfileBindingMap == null) { throw new System.ArgumentNullException("SegmentDiscoveryProfileBindingMap cannot be null"); }
            
            StringBuilder PatchSegmentDiscoveryBindingServiceURL = new StringBuilder("/global-infra/tier-1s/{tier-1-id}/segments/{segment-id}/segment-discovery-profile-binding-maps/{segment-discovery-profile-binding-map-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchSegmentDiscoveryBindingServiceURL.Replace("{tier-1-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(Tier1Id, System.Globalization.CultureInfo.InvariantCulture)));
            PatchSegmentDiscoveryBindingServiceURL.Replace("{segment-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchSegmentDiscoveryBindingServiceURL.Replace("{segment-discovery-profile-binding-map-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(SegmentDiscoveryProfileBindingMapId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(SegmentDiscoveryProfileBindingMap, defaultSerializationSettings));
            request.Resource = PatchSegmentDiscoveryBindingServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchSegmentDiscoveryBindingServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
    }
}
