// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyCertificate
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyCertificate(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlListResultType GlobalListTlsCrls(string? Cursor = null, bool? Details = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTTlsCrlListResultType returnValue = default(NSXTTlsCrlListResultType);
            StringBuilder ListTlsCrlsServiceURL = new StringBuilder("/global-infra/crls");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = ListTlsCrlsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListTlsCrlsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlListResultType ListTlsCrls(string? Cursor = null, bool? Details = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTTlsCrlListResultType returnValue = default(NSXTTlsCrlListResultType);
            StringBuilder ListTlsCrlsServiceURL = new StringBuilder("/infra/crls");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = ListTlsCrlsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListTlsCrlsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlListResultType GlobalCreateTlsCrlImport(string CrlId, NSXTTlsCrlType TlsCrl)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            if (TlsCrl == null) { throw new System.ArgumentNullException("TlsCrl cannot be null"); }
            NSXTTlsCrlListResultType returnValue = default(NSXTTlsCrlListResultType);
            StringBuilder CreateTlsCrlImportServiceURL = new StringBuilder("/global-infra/crls/{crl-id}?action=import");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            CreateTlsCrlImportServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsCrl, defaultSerializationSettings));
            request.Resource = CreateTlsCrlImportServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateTlsCrlImportServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlType GlobalCreateOrUpdateTlsCrl(string CrlId, NSXTTlsCrlType TlsCrl)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            if (TlsCrl == null) { throw new System.ArgumentNullException("TlsCrl cannot be null"); }
            NSXTTlsCrlType returnValue = default(NSXTTlsCrlType);
            StringBuilder CreateOrUpdateTlsCrlServiceURL = new StringBuilder("/global-infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsCrl, defaultSerializationSettings));
            request.Resource = CreateOrUpdateTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteTlsCrl(string CrlId)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            
            StringBuilder DeleteTlsCrlServiceURL = new StringBuilder("/global-infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlType GlobalGetTlsCrl(string CrlId, bool? Details = null)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            NSXTTlsCrlType returnValue = default(NSXTTlsCrlType);
            StringBuilder GetTlsCrlServiceURL = new StringBuilder("/global-infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            request.Resource = GetTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalCreateOrPatchTlsCrl(string CrlId, NSXTTlsCrlType TlsCrl)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            if (TlsCrl == null) { throw new System.ArgumentNullException("TlsCrl cannot be null"); }
            
            StringBuilder CreateOrPatchTlsCrlServiceURL = new StringBuilder("/global-infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsCrl, defaultSerializationSettings));
            request.Resource = CreateOrPatchTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + CreateOrPatchTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCertificateListType GlobalListTlsCertificates(string? Cursor = null, bool? Details = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTTlsCertificateListType returnValue = default(NSXTTlsCertificateListType);
            StringBuilder ListTlsCertificatesServiceURL = new StringBuilder("/global-infra/certificates");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = ListTlsCertificatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListTlsCertificatesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCertificateListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCertificateListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCertificateListType ListTlsCertificates(string? Cursor = null, bool? Details = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null, string? Type = null)
        {
            NSXTTlsCertificateListType returnValue = default(NSXTTlsCertificateListType);
            StringBuilder ListTlsCertificatesServiceURL = new StringBuilder("/infra/certificates");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            if (Type != null) { request.AddQueryParameter("type", Type.ToString()); }
            request.Resource = ListTlsCertificatesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListTlsCertificatesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCertificateListType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCertificateListType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCertificateType AddTlsCertificate(string CertificateId, NSXTTlsTrustDataType TlsTrustData)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            if (TlsTrustData == null) { throw new System.ArgumentNullException("TlsTrustData cannot be null"); }
            NSXTTlsCertificateType returnValue = default(NSXTTlsCertificateType);
            StringBuilder AddTlsCertificateServiceURL = new StringBuilder("/infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            AddTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsTrustData, defaultSerializationSettings));
            request.Resource = AddTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + AddTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCertificateType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCertificateType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCertificateType GetTlsCertificate(string CertificateId, bool? Details = null)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            NSXTTlsCertificateType returnValue = default(NSXTTlsCertificateType);
            StringBuilder GetTlsCertificateServiceURL = new StringBuilder("/infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            request.Resource = GetTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCertificateType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCertificateType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchTlsCertificate(string CertificateId, NSXTTlsTrustDataType TlsTrustData)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            if (TlsTrustData == null) { throw new System.ArgumentNullException("TlsTrustData cannot be null"); }
            
            StringBuilder PatchTlsCertificateServiceURL = new StringBuilder("/infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsTrustData, defaultSerializationSettings));
            request.Resource = PatchTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteTlsCertificate(string CertificateId)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            
            StringBuilder DeleteTlsCertificateServiceURL = new StringBuilder("/infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCertificateType GlobalAddTlsCertificate(string CertificateId, NSXTTlsTrustDataType TlsTrustData)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            if (TlsTrustData == null) { throw new System.ArgumentNullException("TlsTrustData cannot be null"); }
            NSXTTlsCertificateType returnValue = default(NSXTTlsCertificateType);
            StringBuilder AddTlsCertificateServiceURL = new StringBuilder("/global-infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            AddTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsTrustData, defaultSerializationSettings));
            request.Resource = AddTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + AddTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCertificateType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCertificateType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCertificateType GlobalGetTlsCertificate(string CertificateId, bool? Details = null)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            NSXTTlsCertificateType returnValue = default(NSXTTlsCertificateType);
            StringBuilder GetTlsCertificateServiceURL = new StringBuilder("/global-infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            request.Resource = GetTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCertificateType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCertificateType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchTlsCertificate(string CertificateId, NSXTTlsTrustDataType TlsTrustData)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            if (TlsTrustData == null) { throw new System.ArgumentNullException("TlsTrustData cannot be null"); }
            
            StringBuilder PatchTlsCertificateServiceURL = new StringBuilder("/global-infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsTrustData, defaultSerializationSettings));
            request.Resource = PatchTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteTlsCertificate(string CertificateId)
        {
            if (CertificateId == null) { throw new System.ArgumentNullException("CertificateId cannot be null"); }
            
            StringBuilder DeleteTlsCertificateServiceURL = new StringBuilder("/global-infra/certificates/{certificate-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteTlsCertificateServiceURL.Replace("{certificate-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CertificateId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteTlsCertificateServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteTlsCertificateServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlType CreateOrUpdateTlsCrl(string CrlId, NSXTTlsCrlType TlsCrl)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            if (TlsCrl == null) { throw new System.ArgumentNullException("TlsCrl cannot be null"); }
            NSXTTlsCrlType returnValue = default(NSXTTlsCrlType);
            StringBuilder CreateOrUpdateTlsCrlServiceURL = new StringBuilder("/infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsCrl, defaultSerializationSettings));
            request.Resource = CreateOrUpdateTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteTlsCrl(string CrlId)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            
            StringBuilder DeleteTlsCrlServiceURL = new StringBuilder("/infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlType GetTlsCrl(string CrlId, bool? Details = null)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            NSXTTlsCrlType returnValue = default(NSXTTlsCrlType);
            StringBuilder GetTlsCrlServiceURL = new StringBuilder("/infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Details != null) { request.AddQueryParameter("details", Details.ToString()); }
            request.Resource = GetTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void CreateOrPatchTlsCrl(string CrlId, NSXTTlsCrlType TlsCrl)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            if (TlsCrl == null) { throw new System.ArgumentNullException("TlsCrl cannot be null"); }
            
            StringBuilder CreateOrPatchTlsCrlServiceURL = new StringBuilder("/infra/crls/{crl-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchTlsCrlServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsCrl, defaultSerializationSettings));
            request.Resource = CreateOrPatchTlsCrlServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + CreateOrPatchTlsCrlServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTTlsCrlListResultType CreateTlsCrlImport(string CrlId, NSXTTlsCrlType TlsCrl)
        {
            if (CrlId == null) { throw new System.ArgumentNullException("CrlId cannot be null"); }
            if (TlsCrl == null) { throw new System.ArgumentNullException("TlsCrl cannot be null"); }
            NSXTTlsCrlListResultType returnValue = default(NSXTTlsCrlListResultType);
            StringBuilder CreateTlsCrlImportServiceURL = new StringBuilder("/infra/crls/{crl-id}?action=import");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            CreateTlsCrlImportServiceURL.Replace("{crl-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(CrlId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(TlsCrl, defaultSerializationSettings));
            request.Resource = CreateTlsCrlImportServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP POST operation to " + CreateTlsCrlImportServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTTlsCrlListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTTlsCrlListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
