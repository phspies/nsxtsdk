// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyNvdsUpgradeReadinessCheck
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyNvdsUpgradeReadinessCheck(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTUpgradeTopologyType PolicySetTargetVdsTopology(NSXTUpgradeTopologyType UpgradeTopology, string? ClusterId = null, bool? UseRecommendedTopologyConfig = null)
        {
            if (UpgradeTopology == null) { throw new System.ArgumentNullException("UpgradeTopology cannot be null"); }
            NSXTUpgradeTopologyType returnValue = default(NSXTUpgradeTopologyType);
            StringBuilder PolicySetTargetVdsTopologyServiceURL = new StringBuilder("/infra/nvds-urt/topology?action=apply");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(UpgradeTopology, defaultSerializationSettings));
            if (ClusterId != null) { request.AddQueryParameter("cluster_id", ClusterId.ToString()); }
            if (UseRecommendedTopologyConfig != null) { request.AddQueryParameter("use_recommended_topology_config", UseRecommendedTopologyConfig.ToString()); }
            request.Resource = PolicySetTargetVdsTopologyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + PolicySetTargetVdsTopologyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTUpgradeTopologyType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTUpgradeTopologyType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PolicyNvdsUpgradeCleanup()
        {
            
            StringBuilder PolicyNvdsUpgradeCleanupServiceURL = new StringBuilder("/infra/nvds-urt?action=cleanup");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = PolicyNvdsUpgradeCleanupServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + PolicyNvdsUpgradeCleanupServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNvdsUpgradePrecheckIdType PolicyCreateNvdsUpgradePrecheckByClusters(NSXTPrecheckParametersType PrecheckParameters)
        {
            if (PrecheckParameters == null) { throw new System.ArgumentNullException("PrecheckParameters cannot be null"); }
            NSXTNvdsUpgradePrecheckIdType returnValue = default(NSXTNvdsUpgradePrecheckIdType);
            StringBuilder PolicyCreateNvdsUpgradePrecheckByClustersServiceURL = new StringBuilder("/infra/nvds-urt/precheck-by-clusters");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PrecheckParameters, defaultSerializationSettings));
            request.Resource = PolicyCreateNvdsUpgradePrecheckByClustersServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + PolicyCreateNvdsUpgradePrecheckByClustersServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTNvdsUpgradePrecheckIdType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTNvdsUpgradePrecheckIdType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNvdsUpgradePrecheckIdType PolicyCreateNvdsUpgradePrecheck()
        {
            NSXTNvdsUpgradePrecheckIdType returnValue = default(NSXTNvdsUpgradePrecheckIdType);
            StringBuilder PolicyCreateNvdsUpgradePrecheckServiceURL = new StringBuilder("/infra/nvds-urt/precheck");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = PolicyCreateNvdsUpgradePrecheckServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + PolicyCreateNvdsUpgradePrecheckServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTNvdsUpgradePrecheckIdType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTNvdsUpgradePrecheckIdType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNvdsUpgradePrecheckIdType PolicyGetNvdsUpgradePrecheckId()
        {
            NSXTNvdsUpgradePrecheckIdType returnValue = default(NSXTNvdsUpgradePrecheckIdType);
            StringBuilder PolicyGetNvdsUpgradePrecheckIdServiceURL = new StringBuilder("/infra/nvds-urt/precheck");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = PolicyGetNvdsUpgradePrecheckIdServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + PolicyGetNvdsUpgradePrecheckIdServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTNvdsUpgradePrecheckIdType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTNvdsUpgradePrecheckIdType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PolicyIgnoreMigrateStatus()
        {
            
            StringBuilder PolicyIgnoreMigrateStatusServiceURL = new StringBuilder("/infra/nvds-urt?action=ignore_migrate_status");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = PolicyIgnoreMigrateStatusServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + PolicyIgnoreMigrateStatusServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTNvdsUpgradeStatusSummaryType PolicyGetNvdsUpgradeReadinessCheckSummary(string PrecheckId, string? ClusterId = null)
        {
            if (PrecheckId == null) { throw new System.ArgumentNullException("PrecheckId cannot be null"); }
            NSXTNvdsUpgradeStatusSummaryType returnValue = default(NSXTNvdsUpgradeStatusSummaryType);
            StringBuilder PolicyGetNvdsUpgradeReadinessCheckSummaryServiceURL = new StringBuilder("/infra/nvds-urt/status-summary/{precheck-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            PolicyGetNvdsUpgradeReadinessCheckSummaryServiceURL.Replace("{precheck-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PrecheckId, System.Globalization.CultureInfo.InvariantCulture)));
            if (ClusterId != null) { request.AddQueryParameter("cluster_id", ClusterId.ToString()); }
            request.Resource = PolicyGetNvdsUpgradeReadinessCheckSummaryServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + PolicyGetNvdsUpgradeReadinessCheckSummaryServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTNvdsUpgradeStatusSummaryType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTNvdsUpgradeStatusSummaryType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTUpgradeTopologyType PolicyGetRecommendedVdsTopology(string PrecheckId, string? ClusterId = null, string? ComputeManagerId = null, bool? ShowVdsConfig = null)
        {
            if (PrecheckId == null) { throw new System.ArgumentNullException("PrecheckId cannot be null"); }
            NSXTUpgradeTopologyType returnValue = default(NSXTUpgradeTopologyType);
            StringBuilder PolicyGetRecommendedVdsTopologyServiceURL = new StringBuilder("/infra/nvds-urt/topology/{precheck-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            PolicyGetRecommendedVdsTopologyServiceURL.Replace("{precheck-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(PrecheckId, System.Globalization.CultureInfo.InvariantCulture)));
            if (ClusterId != null) { request.AddQueryParameter("cluster_id", ClusterId.ToString()); }
            if (ComputeManagerId != null) { request.AddQueryParameter("compute_manager_id", ComputeManagerId.ToString()); }
            if (ShowVdsConfig != null) { request.AddQueryParameter("show_vds_config", ShowVdsConfig.ToString()); }
            request.Resource = PolicyGetRecommendedVdsTopologyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + PolicyGetRecommendedVdsTopologyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTUpgradeTopologyType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTUpgradeTopologyType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
