// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyStaticMimeContent
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyStaticMimeContent(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStaticMimeContentListResultType ListPolicyStaticMimeContents(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTStaticMimeContentListResultType returnValue = default(NSXTStaticMimeContentListResultType);
            StringBuilder ListPolicyStaticMimeContentsServiceURL = new StringBuilder("/infra/static-mime-contents");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListPolicyStaticMimeContentsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListPolicyStaticMimeContentsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTStaticMimeContentListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTStaticMimeContentListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStaticMimeContentType CreateOrUpdatePolicyStaticMimeContent(string StaticMimeContentId, NSXTStaticMimeContentType StaticMimeContent, bool? Override = null)
        {
            if (StaticMimeContentId == null) { throw new System.ArgumentNullException("StaticMimeContentId cannot be null"); }
            if (StaticMimeContent == null) { throw new System.ArgumentNullException("StaticMimeContent cannot be null"); }
            NSXTStaticMimeContentType returnValue = default(NSXTStaticMimeContentType);
            StringBuilder CreateOrUpdatePolicyStaticMimeContentServiceURL = new StringBuilder("/infra/static-mime-contents/{static-mime-content-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdatePolicyStaticMimeContentServiceURL.Replace("{static-mime-content-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(StaticMimeContentId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(StaticMimeContent, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrUpdatePolicyStaticMimeContentServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdatePolicyStaticMimeContentServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTStaticMimeContentType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTStaticMimeContentType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStaticMimeContentType GetPolicyStaticMimeContent(string StaticMimeContentId)
        {
            if (StaticMimeContentId == null) { throw new System.ArgumentNullException("StaticMimeContentId cannot be null"); }
            NSXTStaticMimeContentType returnValue = default(NSXTStaticMimeContentType);
            StringBuilder GetPolicyStaticMimeContentServiceURL = new StringBuilder("/infra/static-mime-contents/{static-mime-content-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetPolicyStaticMimeContentServiceURL.Replace("{static-mime-content-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(StaticMimeContentId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetPolicyStaticMimeContentServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetPolicyStaticMimeContentServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTStaticMimeContentType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTStaticMimeContentType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStaticMimeContentType PatchPolicyStaticMimeContent(string StaticMimeContentId, NSXTStaticMimeContentType StaticMimeContent, bool? Override = null)
        {
            if (StaticMimeContentId == null) { throw new System.ArgumentNullException("StaticMimeContentId cannot be null"); }
            if (StaticMimeContent == null) { throw new System.ArgumentNullException("StaticMimeContent cannot be null"); }
            NSXTStaticMimeContentType returnValue = default(NSXTStaticMimeContentType);
            StringBuilder PatchPolicyStaticMimeContentServiceURL = new StringBuilder("/infra/static-mime-contents/{static-mime-content-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchPolicyStaticMimeContentServiceURL.Replace("{static-mime-content-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(StaticMimeContentId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(StaticMimeContent, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchPolicyStaticMimeContentServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchPolicyStaticMimeContentServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTStaticMimeContentType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTStaticMimeContentType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeletePolicyStaticMimeContent(string StaticMimeContentId, bool? Override = null)
        {
            if (StaticMimeContentId == null) { throw new System.ArgumentNullException("StaticMimeContentId cannot be null"); }
            
            StringBuilder DeletePolicyStaticMimeContentServiceURL = new StringBuilder("/infra/static-mime-contents/{static-mime-content-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeletePolicyStaticMimeContentServiceURL.Replace("{static-mime-content-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(StaticMimeContentId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeletePolicyStaticMimeContentServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeletePolicyStaticMimeContentServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
    }
}
