// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyIPFIXSwitch
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyIPFIXSwitch(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2ProfileListResultType GlobalListIPFIXL2Profiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXL2ProfileListResultType returnValue = default(NSXTIPFIXL2ProfileListResultType);
            StringBuilder ListIPFIXL2ProfilesServiceURL = new StringBuilder("/global-infra/ipfix-l2-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIPFIXL2ProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIPFIXL2ProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2ProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2ProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2CollectorProfileListResultType GlobalListIPFIXL2CollectorProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXL2CollectorProfileListResultType returnValue = default(NSXTIPFIXL2CollectorProfileListResultType);
            StringBuilder ListIPFIXL2CollectorProfilesServiceURL = new StringBuilder("/global-infra/ipfix-l2-collector-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIPFIXL2CollectorProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIPFIXL2CollectorProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2CollectorProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2CollectorProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2ProfileType CreateOrReplaceIPFIXL2Profile(string IpfixL2ProfileId, NSXTIPFIXL2ProfileType IPFIXL2Profile, bool? Override = null)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            if (IPFIXL2Profile == null) { throw new System.ArgumentNullException("IPFIXL2Profile cannot be null"); }
            NSXTIPFIXL2ProfileType returnValue = default(NSXTIPFIXL2ProfileType);
            StringBuilder CreateOrReplaceIPFIXL2ProfileServiceURL = new StringBuilder("/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2Profile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2ProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2ProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIPFIXL2Profile(string IpfixL2ProfileId, bool? Override = null)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            
            StringBuilder DeleteIPFIXL2ProfileServiceURL = new StringBuilder("/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2ProfileType ReadIPFIXL2Profile(string IpfixL2ProfileId)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            NSXTIPFIXL2ProfileType returnValue = default(NSXTIPFIXL2ProfileType);
            StringBuilder ReadIPFIXL2ProfileServiceURL = new StringBuilder("/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2ProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2ProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchIPFIXL2Profile(string IpfixL2ProfileId, NSXTIPFIXL2ProfileType IPFIXL2Profile, bool? Override = null)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            if (IPFIXL2Profile == null) { throw new System.ArgumentNullException("IPFIXL2Profile cannot be null"); }
            
            StringBuilder PatchIPFIXL2ProfileServiceURL = new StringBuilder("/infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2Profile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2CollectorProfileType CreateOrReplaceIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId, NSXTIPFIXL2CollectorProfileType IPFIXL2CollectorProfile, bool? Override = null)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            if (IPFIXL2CollectorProfile == null) { throw new System.ArgumentNullException("IPFIXL2CollectorProfile cannot be null"); }
            NSXTIPFIXL2CollectorProfileType returnValue = default(NSXTIPFIXL2CollectorProfileType);
            StringBuilder CreateOrReplaceIPFIXL2CollectorProfileServiceURL = new StringBuilder("/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2CollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2CollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2CollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId, NSXTIPFIXL2CollectorProfileType IPFIXL2CollectorProfile, bool? Override = null)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            if (IPFIXL2CollectorProfile == null) { throw new System.ArgumentNullException("IPFIXL2CollectorProfile cannot be null"); }
            
            StringBuilder PatchIPFIXL2CollectorProfileServiceURL = new StringBuilder("/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2CollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId, bool? Override = null)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            
            StringBuilder DeleteIPFIXL2CollectorProfileServiceURL = new StringBuilder("/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2CollectorProfileType ReadIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            NSXTIPFIXL2CollectorProfileType returnValue = default(NSXTIPFIXL2CollectorProfileType);
            StringBuilder ReadIPFIXL2CollectorProfileServiceURL = new StringBuilder("/infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2CollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2CollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2ProfileListResultType ListIPFIXL2Profiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXL2ProfileListResultType returnValue = default(NSXTIPFIXL2ProfileListResultType);
            StringBuilder ListIPFIXL2ProfilesServiceURL = new StringBuilder("/infra/ipfix-l2-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIPFIXL2ProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIPFIXL2ProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2ProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2ProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2ProfileType GlobalCreateOrReplaceIPFIXL2Profile(string IpfixL2ProfileId, NSXTIPFIXL2ProfileType IPFIXL2Profile, bool? Override = null)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            if (IPFIXL2Profile == null) { throw new System.ArgumentNullException("IPFIXL2Profile cannot be null"); }
            NSXTIPFIXL2ProfileType returnValue = default(NSXTIPFIXL2ProfileType);
            StringBuilder CreateOrReplaceIPFIXL2ProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2Profile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2ProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2ProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteIPFIXL2Profile(string IpfixL2ProfileId, bool? Override = null)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            
            StringBuilder DeleteIPFIXL2ProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2ProfileType GlobalReadIPFIXL2Profile(string IpfixL2ProfileId)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            NSXTIPFIXL2ProfileType returnValue = default(NSXTIPFIXL2ProfileType);
            StringBuilder ReadIPFIXL2ProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2ProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2ProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchIPFIXL2Profile(string IpfixL2ProfileId, NSXTIPFIXL2ProfileType IPFIXL2Profile, bool? Override = null)
        {
            if (IpfixL2ProfileId == null) { throw new System.ArgumentNullException("IpfixL2ProfileId cannot be null"); }
            if (IPFIXL2Profile == null) { throw new System.ArgumentNullException("IPFIXL2Profile cannot be null"); }
            
            StringBuilder PatchIPFIXL2ProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-profiles/{ipfix-l2-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIPFIXL2ProfileServiceURL.Replace("{ipfix-l2-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2ProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2Profile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIPFIXL2ProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIPFIXL2ProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2CollectorProfileType GlobalCreateOrReplaceIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId, NSXTIPFIXL2CollectorProfileType IPFIXL2CollectorProfile, bool? Override = null)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            if (IPFIXL2CollectorProfile == null) { throw new System.ArgumentNullException("IPFIXL2CollectorProfile cannot be null"); }
            NSXTIPFIXL2CollectorProfileType returnValue = default(NSXTIPFIXL2CollectorProfileType);
            StringBuilder CreateOrReplaceIPFIXL2CollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrReplaceIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2CollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = CreateOrReplaceIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrReplaceIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2CollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2CollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId, NSXTIPFIXL2CollectorProfileType IPFIXL2CollectorProfile, bool? Override = null)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            if (IPFIXL2CollectorProfile == null) { throw new System.ArgumentNullException("IPFIXL2CollectorProfile cannot be null"); }
            
            StringBuilder PatchIPFIXL2CollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(IPFIXL2CollectorProfile, defaultSerializationSettings));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = PatchIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId, bool? Override = null)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            
            StringBuilder DeleteIPFIXL2CollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Override != null) { request.AddQueryParameter("override", Override.ToString()); }
            request.Resource = DeleteIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2CollectorProfileType GlobalReadIPFIXL2CollectorProfile(string IpfixL2CollectorProfileId)
        {
            if (IpfixL2CollectorProfileId == null) { throw new System.ArgumentNullException("IpfixL2CollectorProfileId cannot be null"); }
            NSXTIPFIXL2CollectorProfileType returnValue = default(NSXTIPFIXL2CollectorProfileType);
            StringBuilder ReadIPFIXL2CollectorProfileServiceURL = new StringBuilder("/global-infra/ipfix-l2-collector-profiles/{ipfix-l2-collector-profile-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadIPFIXL2CollectorProfileServiceURL.Replace("{ipfix-l2-collector-profile-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(IpfixL2CollectorProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadIPFIXL2CollectorProfileServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadIPFIXL2CollectorProfileServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2CollectorProfileType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2CollectorProfileType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTIPFIXL2CollectorProfileListResultType ListIPFIXL2CollectorProfiles(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTIPFIXL2CollectorProfileListResultType returnValue = default(NSXTIPFIXL2CollectorProfileListResultType);
            StringBuilder ListIPFIXL2CollectorProfilesServiceURL = new StringBuilder("/infra/ipfix-l2-collector-profiles");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListIPFIXL2CollectorProfilesServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListIPFIXL2CollectorProfilesServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTIPFIXL2CollectorProfileListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTIPFIXL2CollectorProfileListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
