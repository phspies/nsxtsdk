// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyGuestIntrospection
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyGuestIntrospection(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointPolicyType GlobalCreateOrUpdateEndpointPolicy(string DomainId, string EndpointPolicyId, NSXTEndpointPolicyType EndpointPolicy)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointPolicy == null) { throw new System.ArgumentNullException("EndpointPolicy cannot be null"); }
            NSXTEndpointPolicyType returnValue = default(NSXTEndpointPolicyType);
            StringBuilder CreateOrUpdateEndpointPolicyServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrUpdateEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointPolicy, defaultSerializationSettings));
            request.Resource = CreateOrUpdateEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointPolicyType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointPolicyType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchEndpointPolicy(string DomainId, string EndpointPolicyId, NSXTEndpointPolicyType EndpointPolicy)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointPolicy == null) { throw new System.ArgumentNullException("EndpointPolicy cannot be null"); }
            
            StringBuilder PatchEndpointPolicyServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointPolicy, defaultSerializationSettings));
            request.Resource = PatchEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointPolicyType GlobalReadEndpointPolicy(string DomainId, string EndpointPolicyId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            NSXTEndpointPolicyType returnValue = default(NSXTEndpointPolicyType);
            StringBuilder ReadEndpointPolicyServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointPolicyType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointPolicyType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteEndpointPolicy(string DomainId, string EndpointPolicyId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            
            StringBuilder DeleteEndpointPolicyServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointRuleListResultType ListEndpointRule(string DomainId, string EndpointPolicyId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            NSXTEndpointRuleListResultType returnValue = default(NSXTEndpointRuleListResultType);
            StringBuilder ListEndpointRuleServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ListEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointRuleListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointRuleListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointPolicyType CreateOrUpdateEndpointPolicy(string DomainId, string EndpointPolicyId, NSXTEndpointPolicyType EndpointPolicy)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointPolicy == null) { throw new System.ArgumentNullException("EndpointPolicy cannot be null"); }
            NSXTEndpointPolicyType returnValue = default(NSXTEndpointPolicyType);
            StringBuilder CreateOrUpdateEndpointPolicyServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrUpdateEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointPolicy, defaultSerializationSettings));
            request.Resource = CreateOrUpdateEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointPolicyType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointPolicyType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchEndpointPolicy(string DomainId, string EndpointPolicyId, NSXTEndpointPolicyType EndpointPolicy)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointPolicy == null) { throw new System.ArgumentNullException("EndpointPolicy cannot be null"); }
            
            StringBuilder PatchEndpointPolicyServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointPolicy, defaultSerializationSettings));
            request.Resource = PatchEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointPolicyType ReadEndpointPolicy(string DomainId, string EndpointPolicyId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            NSXTEndpointPolicyType returnValue = default(NSXTEndpointPolicyType);
            StringBuilder ReadEndpointPolicyServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointPolicyType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointPolicyType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteEndpointPolicy(string DomainId, string EndpointPolicyId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            
            StringBuilder DeleteEndpointPolicyServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteEndpointPolicyServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteEndpointPolicyServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteEndpointPolicyServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteEndpointPolicyServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointPolicyListResultType ListEndpointPoliciesAcrossAllDomains(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTEndpointPolicyListResultType returnValue = default(NSXTEndpointPolicyListResultType);
            StringBuilder ListEndpointPoliciesAcrossAllDomainsServiceURL = new StringBuilder("/infra/domains/endpoint-policies");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListEndpointPoliciesAcrossAllDomainsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListEndpointPoliciesAcrossAllDomainsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointPolicyListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointPolicyListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointRuleListResultType GlobalListEndpointRule(string DomainId, string EndpointPolicyId, string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            NSXTEndpointRuleListResultType returnValue = default(NSXTEndpointRuleListResultType);
            StringBuilder ListEndpointRuleServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ListEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ListEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointRuleListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointRuleListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointRuleType CreateOrUpdateEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId, NSXTEndpointRuleType EndpointRule)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            if (EndpointRule == null) { throw new System.ArgumentNullException("EndpointRule cannot be null"); }
            NSXTEndpointRuleType returnValue = default(NSXTEndpointRuleType);
            StringBuilder CreateOrUpdateEndpointRuleServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrUpdateEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrUpdateEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointRule, defaultSerializationSettings));
            request.Resource = CreateOrUpdateEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId, NSXTEndpointRuleType EndpointRule)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            if (EndpointRule == null) { throw new System.ArgumentNullException("EndpointRule cannot be null"); }
            
            StringBuilder PatchEndpointRuleServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointRule, defaultSerializationSettings));
            request.Resource = PatchEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointRuleType ReadEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            NSXTEndpointRuleType returnValue = default(NSXTEndpointRuleType);
            StringBuilder ReadEndpointRuleServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            
            StringBuilder DeleteEndpointRuleServiceURL = new StringBuilder("/infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointPolicyListResultType GlobalListEndpointPoliciesAcrossAllDomains(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTEndpointPolicyListResultType returnValue = default(NSXTEndpointPolicyListResultType);
            StringBuilder ListEndpointPoliciesAcrossAllDomainsServiceURL = new StringBuilder("/global-infra/domains/endpoint-policies");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListEndpointPoliciesAcrossAllDomainsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListEndpointPoliciesAcrossAllDomainsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointPolicyListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointPolicyListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointRuleType GlobalCreateOrUpdateEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId, NSXTEndpointRuleType EndpointRule)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            if (EndpointRule == null) { throw new System.ArgumentNullException("EndpointRule cannot be null"); }
            NSXTEndpointRuleType returnValue = default(NSXTEndpointRuleType);
            StringBuilder CreateOrUpdateEndpointRuleServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrUpdateEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            CreateOrUpdateEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointRule, defaultSerializationSettings));
            request.Resource = CreateOrUpdateEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId, NSXTEndpointRuleType EndpointRule)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            if (EndpointRule == null) { throw new System.ArgumentNullException("EndpointRule cannot be null"); }
            
            StringBuilder PatchEndpointRuleServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            PatchEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(EndpointRule, defaultSerializationSettings));
            request.Resource = PatchEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + PatchEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTEndpointRuleType GlobalReadEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            NSXTEndpointRuleType returnValue = default(NSXTEndpointRuleType);
            StringBuilder ReadEndpointRuleServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            ReadEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            ReadEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = ReadEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ReadEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTEndpointRuleType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTEndpointRuleType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteEndpointRule(string DomainId, string EndpointPolicyId, string EndpointRuleId)
        {
            if (DomainId == null) { throw new System.ArgumentNullException("DomainId cannot be null"); }
            if (EndpointPolicyId == null) { throw new System.ArgumentNullException("EndpointPolicyId cannot be null"); }
            if (EndpointRuleId == null) { throw new System.ArgumentNullException("EndpointRuleId cannot be null"); }
            
            StringBuilder DeleteEndpointRuleServiceURL = new StringBuilder("/global-infra/domains/{domain-id}/endpoint-policies/{endpoint-policy-id}/endpoint-rules/{endpoint-rule-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteEndpointRuleServiceURL.Replace("{domain-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(DomainId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteEndpointRuleServiceURL.Replace("{endpoint-policy-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointPolicyId, System.Globalization.CultureInfo.InvariantCulture)));
            DeleteEndpointRuleServiceURL.Replace("{endpoint-rule-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(EndpointRuleId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteEndpointRuleServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteEndpointRuleServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
    }
}
