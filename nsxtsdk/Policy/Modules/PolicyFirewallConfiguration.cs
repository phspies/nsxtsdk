// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyFirewallConfiguration
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyFirewallConfiguration(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyResourceReferenceType FilterFirewallExcludeListFilter(string IntentPath, bool? DeepCheck = null, string? EnforcementPointPath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            NSXTPolicyResourceReferenceType returnValue = default(NSXTPolicyResourceReferenceType);
            StringBuilder FilterFirewallExcludeListFilterServiceURL = new StringBuilder("/infra/settings/firewall/security/exclude-list?action=filter");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (DeepCheck != null) { request.AddQueryParameter("deep_check", DeepCheck.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            request.Resource = FilterFirewallExcludeListFilterServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyResourceReferenceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDfwFirewallConfigurationType PutDfwFirewallConfiguration(NSXTDfwFirewallConfigurationType DfwFirewallConfiguration)
        {
            if (DfwFirewallConfiguration == null) { throw new System.ArgumentNullException("DfwFirewallConfiguration cannot be null"); }
            NSXTDfwFirewallConfigurationType returnValue = default(NSXTDfwFirewallConfigurationType);
            StringBuilder PutDfwFirewallConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/security");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DfwFirewallConfiguration, defaultSerializationSettings));
            request.Resource = PutDfwFirewallConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDfwFirewallConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchDfwFirewallConfiguration(NSXTDfwFirewallConfigurationType DfwFirewallConfiguration)
        {
            if (DfwFirewallConfiguration == null) { throw new System.ArgumentNullException("DfwFirewallConfiguration cannot be null"); }
            
            StringBuilder PatchDfwFirewallConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/security");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DfwFirewallConfiguration, defaultSerializationSettings));
            request.Resource = PatchDfwFirewallConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDfwFirewallConfigurationType GetDfwFirewallConfiguration()
        {
            NSXTDfwFirewallConfigurationType returnValue = default(NSXTDfwFirewallConfigurationType);
            StringBuilder GetDfwFirewallConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/security");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetDfwFirewallConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDfwFirewallConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStandaloneHostIdfwConfigurationType GlobalPutStandaloneHostIdfwConfiguration(NSXTStandaloneHostIdfwConfigurationType StandaloneHostIdfwConfiguration)
        {
            if (StandaloneHostIdfwConfiguration == null) { throw new System.ArgumentNullException("StandaloneHostIdfwConfiguration cannot be null"); }
            NSXTStandaloneHostIdfwConfigurationType returnValue = default(NSXTStandaloneHostIdfwConfigurationType);
            StringBuilder PutStandaloneHostIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/standalone-host-switch-setting");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(StandaloneHostIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PutStandaloneHostIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTStandaloneHostIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchStandaloneHostIdfwConfiguration(NSXTStandaloneHostIdfwConfigurationType StandaloneHostIdfwConfiguration)
        {
            if (StandaloneHostIdfwConfiguration == null) { throw new System.ArgumentNullException("StandaloneHostIdfwConfiguration cannot be null"); }
            
            StringBuilder PatchStandaloneHostIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/standalone-host-switch-setting");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(StandaloneHostIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PatchStandaloneHostIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStandaloneHostIdfwConfigurationType GlobalGetStandaloneHostIdfwConfiguration()
        {
            NSXTStandaloneHostIdfwConfigurationType returnValue = default(NSXTStandaloneHostIdfwConfigurationType);
            StringBuilder GetStandaloneHostIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/standalone-host-switch-setting");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetStandaloneHostIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTStandaloneHostIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDfwFirewallConfigurationType GlobalPutDfwFirewallConfiguration(NSXTDfwFirewallConfigurationType DfwFirewallConfiguration)
        {
            if (DfwFirewallConfiguration == null) { throw new System.ArgumentNullException("DfwFirewallConfiguration cannot be null"); }
            NSXTDfwFirewallConfigurationType returnValue = default(NSXTDfwFirewallConfigurationType);
            StringBuilder PutDfwFirewallConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/security");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DfwFirewallConfiguration, defaultSerializationSettings));
            request.Resource = PutDfwFirewallConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDfwFirewallConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchDfwFirewallConfiguration(NSXTDfwFirewallConfigurationType DfwFirewallConfiguration)
        {
            if (DfwFirewallConfiguration == null) { throw new System.ArgumentNullException("DfwFirewallConfiguration cannot be null"); }
            
            StringBuilder PatchDfwFirewallConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/security");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(DfwFirewallConfiguration, defaultSerializationSettings));
            request.Resource = PatchDfwFirewallConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTDfwFirewallConfigurationType GlobalGetDfwFirewallConfiguration()
        {
            NSXTDfwFirewallConfigurationType returnValue = default(NSXTDfwFirewallConfigurationType);
            StringBuilder GetDfwFirewallConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/security");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetDfwFirewallConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTDfwFirewallConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyResourceReferenceType GlobalFilterFirewallExcludeListFilter(string IntentPath, bool? DeepCheck = null, string? EnforcementPointPath = null)
        {
            if (IntentPath == null) { throw new System.ArgumentNullException("IntentPath cannot be null"); }
            NSXTPolicyResourceReferenceType returnValue = default(NSXTPolicyResourceReferenceType);
            StringBuilder FilterFirewallExcludeListFilterServiceURL = new StringBuilder("/global-infra/settings/firewall/security/exclude-list?action=filter");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.POST
            };
            request.AddHeader("Content-type", "application/json");
            if (DeepCheck != null) { request.AddQueryParameter("deep_check", DeepCheck.ToString()); }
            if (EnforcementPointPath != null) { request.AddQueryParameter("enforcement_point_path", EnforcementPointPath.ToString()); }
            if (IntentPath != null) { request.AddQueryParameter("intent_path", IntentPath.ToString()); }
            request.Resource = FilterFirewallExcludeListFilterServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyResourceReferenceType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeClusterIdfwConfigurationListResultType GlobalListComputeClusterIdfwConfiguration(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTComputeClusterIdfwConfigurationListResultType returnValue = default(NSXTComputeClusterIdfwConfigurationListResultType);
            StringBuilder ListComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/cluster");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeClusterIdfwConfigurationListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeClusterIdfwConfigurationType PutComputeClusterIdfwConfiguration(string ClusterId, NSXTComputeClusterIdfwConfigurationType ComputeClusterIdfwConfiguration)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            if (ComputeClusterIdfwConfiguration == null) { throw new System.ArgumentNullException("ComputeClusterIdfwConfiguration cannot be null"); }
            NSXTComputeClusterIdfwConfigurationType returnValue = default(NSXTComputeClusterIdfwConfigurationType);
            StringBuilder PutComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            PutComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeClusterIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PutComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeClusterIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeClusterIdfwConfigurationType GetComputeClusterIdfwConfiguration(string ClusterId)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            NSXTComputeClusterIdfwConfigurationType returnValue = default(NSXTComputeClusterIdfwConfigurationType);
            StringBuilder GetComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeClusterIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchComputeClusterIdfwConfiguration(string ClusterId, NSXTComputeClusterIdfwConfigurationType ComputeClusterIdfwConfiguration)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            if (ComputeClusterIdfwConfiguration == null) { throw new System.ArgumentNullException("ComputeClusterIdfwConfiguration cannot be null"); }
            
            StringBuilder PatchComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeClusterIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PatchComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteComputeClusterIdfwConfiguration(string ClusterId)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            
            StringBuilder DeleteComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStandaloneHostIdfwConfigurationType PutStandaloneHostIdfwConfiguration(NSXTStandaloneHostIdfwConfigurationType StandaloneHostIdfwConfiguration)
        {
            if (StandaloneHostIdfwConfiguration == null) { throw new System.ArgumentNullException("StandaloneHostIdfwConfiguration cannot be null"); }
            NSXTStandaloneHostIdfwConfigurationType returnValue = default(NSXTStandaloneHostIdfwConfigurationType);
            StringBuilder PutStandaloneHostIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/standalone-host-switch-setting");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(StandaloneHostIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PutStandaloneHostIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTStandaloneHostIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchStandaloneHostIdfwConfiguration(NSXTStandaloneHostIdfwConfigurationType StandaloneHostIdfwConfiguration)
        {
            if (StandaloneHostIdfwConfiguration == null) { throw new System.ArgumentNullException("StandaloneHostIdfwConfiguration cannot be null"); }
            
            StringBuilder PatchStandaloneHostIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/standalone-host-switch-setting");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(StandaloneHostIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PatchStandaloneHostIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTStandaloneHostIdfwConfigurationType GetStandaloneHostIdfwConfiguration()
        {
            NSXTStandaloneHostIdfwConfigurationType returnValue = default(NSXTStandaloneHostIdfwConfigurationType);
            StringBuilder GetStandaloneHostIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/standalone-host-switch-setting");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetStandaloneHostIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTStandaloneHostIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeClusterIdfwConfigurationListResultType ListComputeClusterIdfwConfiguration(string? Cursor = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTComputeClusterIdfwConfigurationListResultType returnValue = default(NSXTComputeClusterIdfwConfigurationListResultType);
            StringBuilder ListComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/infra/settings/firewall/idfw/cluster");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeClusterIdfwConfigurationListResultType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyExcludeListType GlobalPutExcludeList(NSXTPolicyExcludeListType PolicyExcludeList)
        {
            if (PolicyExcludeList == null) { throw new System.ArgumentNullException("PolicyExcludeList cannot be null"); }
            NSXTPolicyExcludeListType returnValue = default(NSXTPolicyExcludeListType);
            StringBuilder PutExcludeListServiceURL = new StringBuilder("/global-infra/settings/firewall/security/exclude-list");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyExcludeList, defaultSerializationSettings));
            request.Resource = PutExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyExcludeListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchExcludeList(NSXTPolicyExcludeListType PolicyExcludeList)
        {
            if (PolicyExcludeList == null) { throw new System.ArgumentNullException("PolicyExcludeList cannot be null"); }
            
            StringBuilder PatchExcludeListServiceURL = new StringBuilder("/global-infra/settings/firewall/security/exclude-list");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyExcludeList, defaultSerializationSettings));
            request.Resource = PatchExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyExcludeListType GlobalGetFirewallExcludeList()
        {
            NSXTPolicyExcludeListType returnValue = default(NSXTPolicyExcludeListType);
            StringBuilder GetFirewallExcludeListServiceURL = new StringBuilder("/global-infra/settings/firewall/security/exclude-list");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetFirewallExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyExcludeListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeClusterIdfwConfigurationType GlobalPutComputeClusterIdfwConfiguration(string ClusterId, NSXTComputeClusterIdfwConfigurationType ComputeClusterIdfwConfiguration)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            if (ComputeClusterIdfwConfiguration == null) { throw new System.ArgumentNullException("ComputeClusterIdfwConfiguration cannot be null"); }
            NSXTComputeClusterIdfwConfigurationType returnValue = default(NSXTComputeClusterIdfwConfigurationType);
            StringBuilder PutComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            PutComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeClusterIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PutComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeClusterIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTComputeClusterIdfwConfigurationType GlobalGetComputeClusterIdfwConfiguration(string ClusterId)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            NSXTComputeClusterIdfwConfigurationType returnValue = default(NSXTComputeClusterIdfwConfigurationType);
            StringBuilder GetComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTComputeClusterIdfwConfigurationType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalPatchComputeClusterIdfwConfiguration(string ClusterId, NSXTComputeClusterIdfwConfigurationType ComputeClusterIdfwConfiguration)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            if (ComputeClusterIdfwConfiguration == null) { throw new System.ArgumentNullException("ComputeClusterIdfwConfiguration cannot be null"); }
            
            StringBuilder PatchComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            PatchComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(ComputeClusterIdfwConfiguration, defaultSerializationSettings));
            request.Resource = PatchComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteComputeClusterIdfwConfiguration(string ClusterId)
        {
            if (ClusterId == null) { throw new System.ArgumentNullException("ClusterId cannot be null"); }
            
            StringBuilder DeleteComputeClusterIdfwConfigurationServiceURL = new StringBuilder("/global-infra/settings/firewall/idfw/cluster/{cluster-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteComputeClusterIdfwConfigurationServiceURL.Replace("{cluster-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ClusterId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteComputeClusterIdfwConfigurationServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyExcludeListType PutExcludeList(NSXTPolicyExcludeListType PolicyExcludeList)
        {
            if (PolicyExcludeList == null) { throw new System.ArgumentNullException("PolicyExcludeList cannot be null"); }
            NSXTPolicyExcludeListType returnValue = default(NSXTPolicyExcludeListType);
            StringBuilder PutExcludeListServiceURL = new StringBuilder("/infra/settings/firewall/security/exclude-list");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyExcludeList, defaultSerializationSettings));
            request.Resource = PutExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyExcludeListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void PatchExcludeList(NSXTPolicyExcludeListType PolicyExcludeList)
        {
            if (PolicyExcludeList == null) { throw new System.ArgumentNullException("PolicyExcludeList cannot be null"); }
            
            StringBuilder PatchExcludeListServiceURL = new StringBuilder("/infra/settings/firewall/security/exclude-list");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            request.AddJsonBody(JsonConvert.SerializeObject(PolicyExcludeList, defaultSerializationSettings));
            request.Resource = PatchExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTPolicyExcludeListType GetFirewallExcludeList()
        {
            NSXTPolicyExcludeListType returnValue = default(NSXTPolicyExcludeListType);
            StringBuilder GetFirewallExcludeListServiceURL = new StringBuilder("/infra/settings/firewall/security/exclude-list");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            request.Resource = GetFirewallExcludeListServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode == HttpStatusCode.OK)
			{
                returnValue = JsonConvert.DeserializeObject<NSXTPolicyExcludeListType>(response.Content, defaultSerializationSettings);
			}
            else
            {
                throw new NSXTException(response.Content, response.StatusCode.ToString());
            }
            return returnValue;
        }
    }
}
