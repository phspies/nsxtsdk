// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.PolicyModels;

namespace nsxtapi.PolicyModules
{
    public class PolicyReaction
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        public PolicyReaction(RestClient Client, JsonSerializerSettings DefaultSerializationSettings)
        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTReactionListResultType ListInfraReactions(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTReactionListResultType returnValue = default(NSXTReactionListResultType);
            StringBuilder ListInfraReactionsServiceURL = new StringBuilder("/infra/reactions");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListInfraReactionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListInfraReactionsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTReactionListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTReactionListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTReactionListResultType GlobalListInfraReactions(string? Cursor = null, bool? IncludeMarkForDeleteObjects = null, string? IncludedFields = null, long? PageSize = null, bool? SortAscending = null, string? SortBy = null)
        {
            NSXTReactionListResultType returnValue = default(NSXTReactionListResultType);
            StringBuilder ListInfraReactionsServiceURL = new StringBuilder("/global-infra/reactions");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            if (Cursor != null) { request.AddQueryParameter("cursor", Cursor.ToString()); }
            if (IncludeMarkForDeleteObjects != null) { request.AddQueryParameter("include_mark_for_delete_objects", IncludeMarkForDeleteObjects.ToString()); }
            if (IncludedFields != null) { request.AddQueryParameter("included_fields", IncludedFields.ToString()); }
            if (PageSize != null) { request.AddQueryParameter("page_size", PageSize.ToString()); }
            if (SortAscending != null) { request.AddQueryParameter("sort_ascending", SortAscending.ToString()); }
            if (SortBy != null) { request.AddQueryParameter("sort_by", SortBy.ToString()); }
            request.Resource = ListInfraReactionsServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + ListInfraReactionsServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTReactionListResultType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTReactionListResultType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTReactionType GlobalCreateOrUpdateInfraReaction(string ReactionId, NSXTReactionType Reaction)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            if (Reaction == null) { throw new System.ArgumentNullException("Reaction cannot be null"); }
            NSXTReactionType returnValue = default(NSXTReactionType);
            StringBuilder CreateOrUpdateInfraReactionServiceURL = new StringBuilder("/global-infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Reaction, defaultSerializationSettings));
            request.Resource = CreateOrUpdateInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTReactionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTReactionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalCreateOrPatchInfraReaction(string ReactionId, NSXTReactionType Reaction)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            if (Reaction == null) { throw new System.ArgumentNullException("Reaction cannot be null"); }
            
            StringBuilder CreateOrPatchInfraReactionServiceURL = new StringBuilder("/global-infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Reaction, defaultSerializationSettings));
            request.Resource = CreateOrPatchInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + CreateOrPatchInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void GlobalDeleteInfraReaction(string ReactionId)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            
            StringBuilder DeleteInfraReactionServiceURL = new StringBuilder("/global-infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTReactionType GlobalGetInfraReaction(string ReactionId)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            NSXTReactionType returnValue = default(NSXTReactionType);
            StringBuilder GetInfraReactionServiceURL = new StringBuilder("/global-infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTReactionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTReactionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTReactionType CreateOrUpdateInfraReaction(string ReactionId, NSXTReactionType Reaction)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            if (Reaction == null) { throw new System.ArgumentNullException("Reaction cannot be null"); }
            NSXTReactionType returnValue = default(NSXTReactionType);
            StringBuilder CreateOrUpdateInfraReactionServiceURL = new StringBuilder("/infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PUT
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrUpdateInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Reaction, defaultSerializationSettings));
            request.Resource = CreateOrUpdateInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PUT operation to " + CreateOrUpdateInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTReactionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTReactionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void CreateOrPatchInfraReaction(string ReactionId, NSXTReactionType Reaction)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            if (Reaction == null) { throw new System.ArgumentNullException("Reaction cannot be null"); }
            
            StringBuilder CreateOrPatchInfraReactionServiceURL = new StringBuilder("/infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.PATCH
            };
            request.AddHeader("Content-type", "application/json");
            CreateOrPatchInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.AddJsonBody(JsonConvert.SerializeObject(Reaction, defaultSerializationSettings));
            request.Resource = CreateOrPatchInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP PATCH operation to " + CreateOrPatchInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public void DeleteInfraReaction(string ReactionId)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            
            StringBuilder DeleteInfraReactionServiceURL = new StringBuilder("/infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.DELETE
            };
            request.AddHeader("Content-type", "application/json");
            DeleteInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = DeleteInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP DELETE operation to " + DeleteInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            
        }
        /// <summary>
        /// 
        /// </summary>
        [NSXTProperty(Description: @"")]
        public NSXTReactionType GetInfraReaction(string ReactionId)
        {
            if (ReactionId == null) { throw new System.ArgumentNullException("ReactionId cannot be null"); }
            NSXTReactionType returnValue = default(NSXTReactionType);
            StringBuilder GetInfraReactionServiceURL = new StringBuilder("/infra/reactions/{reaction-id}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.GET
            };
            request.AddHeader("Content-type", "application/json");
            GetInfraReactionServiceURL.Replace("{reaction-id}", System.Uri.EscapeDataString(Helpers.ConvertToString(ReactionId, System.Globalization.CultureInfo.InvariantCulture)));
            request.Resource = GetInfraReactionServiceURL.ToString();
            var response = restClient.Execute(request);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP GET operation to " + GetInfraReactionServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            else
			{
				try
				{
					returnValue = JsonConvert.DeserializeObject<NSXTReactionType>(response.Content, defaultSerializationSettings);
				}
				catch (Exception ex)
				{
					var message = "Could not deserialize the response body string as " + typeof(NSXTReactionType).FullName + ".";
					throw new NSXTException(message, (int)response.StatusCode, response.Content, response.Headers, ex.InnerException);
				}
			}
			return returnValue;
        }
    }
}
