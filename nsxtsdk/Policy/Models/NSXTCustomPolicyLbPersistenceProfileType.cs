// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTCustomPolicyLbPersistenceProfileType : NSXTPolicyLbPersistenceProfileType
    {
        /// <summary>
        /// Persistence shared setting indicates that all PolicyLbVirtualServers
        /// that consume this PolicyLbPersistenceProfile should share the same
        /// persistence mechanism when enabled.  Meaning, persistence entries of
        /// a client accessing one virtual server will also affect the same
        /// client's connections to a different virtual server. For example, say
        /// there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to
        /// the same Group g1 consisting of two servers (s11:80 and s12:80). By
        /// default, each virtual server will have its own persistence table or
        /// cookie. So, in the earlier example, there will be two tables
        /// (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client
        /// connects to vip1:80 and later connects to vip1:8080, the second
        /// connection may be sent to a different server than the first.  When
        /// persistence_shared is enabled, then the second connection will always
        /// connect to the same server as the original connection. For COOKIE
        /// persistence type, the same cookie will be shared by multiple virtual
        /// servers. For SOURCE_IP persistenct type, the persistence table will
        /// be shared across virtual servers.
        /// </summary>
        [JsonProperty(PropertyName = "persistence_shared")]
        [NSXTProperty(IsRequired: false, Description: @"Persistence shared setting indicates that all PolicyLbVirtualServersthat consume this PolicyLbPersistenceProfile should share the samepersistence mechanism when enabled.  Meaning, persistence entries ofa client accessing one virtual server will also affect the sameclient&apos;s connections to a different virtual server. For example, saythere are two virtual servers vip-ip1:80 and vip-ip1:8080 bound tothe same Group g1 consisting of two servers (s11:80 and s12:80). Bydefault, each virtual server will have its own persistence table orcookie. So, in the earlier example, there will be two tables(vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a clientconnects to vip1:80 and later connects to vip1:8080, the secondconnection may be sent to a different server than the first.  Whenpersistence_shared is enabled, then the second connection will alwaysconnect to the same server as the original connection. For COOKIEpersistence type, the same cookie will be shared by multiple virtualservers. For SOURCE_IP persistenct type, the persistence table willbe shared across virtual servers.")]
        public bool? PersistenceShared { get; set; }
        /// <summary>
        /// This field indicates the persistence method used for the
        /// PolicyLbVirtualServer.
        /// - COOKIE persistence allows related client connections, identified by
        /// the same cookie in HTTP requests [Refer to HTTP Cookie for details
        /// on HTTP cookies], to be redirected to the same server. Load
        /// balancer does not maintain any persistence table for cookie
        /// persistence. Instead, it encodes the necessary information in the
        /// HTTP cookie value sent to client and relies on the client to store
        /// it and send it back in subsequent related HTTP requests. Hence
        /// there is no limit on the number of cookie persistence entries that
        /// can be supported.
        /// - SOURCE_IP persistence ensures all connections from a client
        /// (identified by IP address) are sent to the same backend server for a
        /// specified period.
        /// - This object is not required and without creation of this object the
        /// virtual server persistence is disabled by default
        /// </summary>
        [JsonProperty(PropertyName = "persistence", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"This field indicates the persistence method used for thePolicyLbVirtualServer.- COOKIE persistence allows related client connections, identified bythe same cookie in HTTP requests [Refer to HTTP Cookie for detailson HTTP cookies], to be redirected to the same server. Loadbalancer does not maintain any persistence table for cookiepersistence. Instead, it encodes the necessary information in theHTTP cookie value sent to client and relies on the client to storeit and send it back in subsequent related HTTP requests. Hencethere is no limit on the number of cookie persistence entries thatcan be supported.- SOURCE_IP persistence ensures all connections from a client(identified by IP address) are sent to the same backend server for aspecified period.- This object is not required and without creation of this object thevirtual server persistence is disabled by default")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTCustomPolicyLbPersistenceProfilePersistenceEnumType Persistence { get; set; }
    }
}
