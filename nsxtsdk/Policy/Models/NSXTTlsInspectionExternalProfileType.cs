// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTTlsInspectionExternalProfileType : NSXTTlsProfileType
    {
        public NSXTTlsInspectionExternalProfileType()
        {
            DecryptionFailAction = test
            TLSECDHERSAWITHAES128GCMSHA256 = test
            TLSECDHERSAWITHAES256GCMSHA384 = test
            TLSECDHERSAWITHAES128CBCSHA = test
            TLSECDHERSAWITHAES256CBCSHA = test
            TLSECDHERSAWITHAES128CBCSHA256 = test
            TLSECDHERSAWITHAES256CBCSHA384 = test
            TLSRSAWITHAES128GCMSHA256 = test
            TLSRSAWITHAES128CBCSHA256 = test
            TLSRSAWITHAES256GCMSHA384 = test
            TLSRSAWITHAES256CBCSHA256 = test
            CryptoEnforcement = test
            TlsConfigSetting = test
            InvalidCertAction = test
            TLSECDHERSAWITHAES128GCMSHA256 = test
            TLSECDHERSAWITHAES256GCMSHA384 = test
            TLSECDHERSAWITHAES128CBCSHA = test
            TLSECDHERSAWITHAES256CBCSHA = test
            TLSECDHERSAWITHAES128CBCSHA256 = test
            TLSECDHERSAWITHAES256CBCSHA384 = test
            TLSRSAWITHAES128GCMSHA256 = test
            TLSRSAWITHAES128CBCSHA256 = test
            TLSRSAWITHAES256GCMSHA384 = test
            TLSRSAWITHAES256CBCSHA256 = test
            ClientMinTlsVersion = test
            ServerMinTlsVersion = test
            ServerMaxTlsVersion = test
            ClientMaxTlsVersion = test
        }
        /// <summary>
        /// Action to take when TLS handshake fails.
        /// </summary>
        [JsonProperty(PropertyName = "decryption_fail_action")]
        [NSXTProperty(IsRequired: false, Description: @"Action to take when TLS handshake fails.")]
        public NSXTTlsInspectionExternalProfileDecryptionFailActionEnumType? DecryptionFailAction { get; set; }
        /// <summary>
        /// Server's list of cipher suites. Required if CryptoEnforcement
        /// is ENFORCE. e.g. TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.
        /// </summary>
        [JsonProperty(PropertyName = "server_cipher_suite")]
        [NSXTProperty(IsRequired: false, Description: @"Server&apos;s list of cipher suites. Required if CryptoEnforcementis ENFORCE. e.g. TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.")]
        public IList<string> ServerCipherSuite { get; set; }
        /// <summary>
        /// Proxy untrusted ca cert and key used to issue invalid ca certificate
        /// </summary>
        [JsonProperty(PropertyName = "proxy_untrusted_ca_cert", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Proxy untrusted ca cert and key used to issue invalid ca certificate")]
        [System.ComponentModel.DataAnnotations.Required]
        public string ProxyUntrustedCaCert { get; set; }
        /// <summary>
        /// If enforced and if TLS protocol Client/Server Hello has none of the
        /// permitted TLS versions or ciphers then the connection is immediately terminated.
        /// </summary>
        [JsonProperty(PropertyName = "crypto_enforcement")]
        [NSXTProperty(IsRequired: false, Description: @"If enforced and if TLS protocol Client/Server Hello has none of thepermitted TLS versions or ciphers then the connection is immediately terminated.")]
        public NSXTTlsInspectionExternalProfileCryptoEnforcementEnumType? CryptoEnforcement { get; set; }
        /// <summary>
        /// Pre-defined config settings. Settings could be one of Balanced, High Fidelity, High Security, Custom
        /// </summary>
        [JsonProperty(PropertyName = "tls_config_setting")]
        [NSXTProperty(IsRequired: false, Description: @"Pre-defined config settings. Settings could be one of Balanced, High Fidelity, High Security, Custom")]
        public NSXTTlsInspectionExternalProfileTlsConfigSettingEnumType? TlsConfigSetting { get; set; }
        /// <summary>
        /// If presented invalid certificates take this action.
        /// </summary>
        [JsonProperty(PropertyName = "invalid_cert_action")]
        [NSXTProperty(IsRequired: false, Description: @"If presented invalid certificates take this action.")]
        public NSXTTlsInspectionExternalProfileInvalidCertActionEnumType? InvalidCertAction { get; set; }
        /// <summary>
        /// Proxy trusted ca cert and key used to issue valid ca certificate.
        /// This is the subordinate CA cert (referred to as Proxy CA) by the Enterprise Issuing CA.
        /// </summary>
        [JsonProperty(PropertyName = "proxy_trusted_ca_cert", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Proxy trusted ca cert and key used to issue valid ca certificate.This is the subordinate CA cert (referred to as Proxy CA) by the Enterprise Issuing CA.")]
        [System.ComponentModel.DataAnnotations.Required]
        public string ProxyTrustedCaCert { get; set; }
        /// <summary>
        /// Client's list of cipher suites. Required if CryptoEnforcement
        /// is ENFORCE. e.g. TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.
        /// </summary>
        [JsonProperty(PropertyName = "client_cipher_suite")]
        [NSXTProperty(IsRequired: false, Description: @"Client&apos;s list of cipher suites. Required if CryptoEnforcementis ENFORCE. e.g. TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.")]
        public IList<string> ClientCipherSuite { get; set; }
        /// <summary>
        /// Client's minimum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported TLS versions are TLS1.1 and
        /// TLS1.2.
        /// </summary>
        [JsonProperty(PropertyName = "client_min_tls_version")]
        [NSXTProperty(IsRequired: false, Description: @"Client&apos;s minimum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported TLS versions are TLS1.1 and TLS1.2.")]
        public NSXTTlsInspectionExternalProfileClientMinTlsVersionEnumType? ClientMinTlsVersion { get; set; }
        /// <summary>
        /// true - enable the ocsp must staple, false - disable it.
        /// </summary>
        [JsonProperty(PropertyName = "ocsp_must_staple")]
        [NSXTProperty(IsRequired: false, Description: @"true - enable the ocsp must staple, false - disable it.")]
        public bool? OcspMustStaple { get; set; }
        /// <summary>
        /// Server's minimum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported versions are TLS1.1 and
        /// TLS1.2.
        /// </summary>
        [JsonProperty(PropertyName = "server_min_tls_version")]
        [NSXTProperty(IsRequired: false, Description: @"Server&apos;s minimum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported versions are TLS1.1 and TLS1.2.")]
        public NSXTTlsInspectionExternalProfileServerMinTlsVersionEnumType? ServerMinTlsVersion { get; set; }
        /// <summary>
        /// Server's maximum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported versions are TLS1.1 and
        /// TLS1.2.
        /// </summary>
        [JsonProperty(PropertyName = "server_max_tls_version")]
        [NSXTProperty(IsRequired: false, Description: @"Server&apos;s maximum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported versions are TLS1.1 and TLS1.2.")]
        public NSXTTlsInspectionExternalProfileServerMaxTlsVersionEnumType? ServerMaxTlsVersion { get; set; }
        /// <summary>
        /// Client's maximum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported TLS versions are TLS1.1 and
        /// TLS1.2.
        /// </summary>
        [JsonProperty(PropertyName = "client_max_tls_version")]
        [NSXTProperty(IsRequired: false, Description: @"Client&apos;s maximum TLS version to enforce. Required if CryptoEnforcement is ENFORCE. Supported TLS versions are TLS1.1 and TLS1.2.")]
        public NSXTTlsInspectionExternalProfileClientMaxTlsVersionEnumType? ClientMaxTlsVersion { get; set; }
    }
}
