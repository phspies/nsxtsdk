// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// Advanced load balancer MetricsRealTimeUpdate object
    /// </summary>
    [NSXTProperty(Description: @"Advanced load balancer MetricsRealTimeUpdate object")]
    public class NSXTALBMetricsRealTimeUpdateType 
    {
        public NSXTALBMetricsRealTimeUpdateType()
        {
            Duration = test
        }
        /// <summary>
        /// Real time metrics collection duration in minutes.
        /// 0 for infinite.
        /// Special values are 0 - 'infinite'.
        /// Unit is MIN.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as 30.
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        [NSXTProperty(IsRequired: false, Description: @"Real time metrics collection duration in minutes.0 for infinite.Special values are 0 - &apos;infinite&apos;.Unit is MIN.Default value when not specified in API or module isinterpreted by ALB Controller as 30.")]
        public long? Duration { get; set; }
        /// <summary>
        /// Enables real time metrics collection.
        /// When deactivated, 6 hour view is the most granular the
        /// system will track.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        [JsonProperty(PropertyName = "enabled", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Enables real time metrics collection.When deactivated, 6 hour view is the most granular thesystem will track.Default value when not specified in API or module isinterpreted by ALB Controller as false.")]
        [System.ComponentModel.DataAnnotations.Required]
        public bool Enabled { get; set; }
    }
}
