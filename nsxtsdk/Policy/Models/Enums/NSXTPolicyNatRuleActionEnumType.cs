// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using System.Runtime.Serialization;
using nsxtsdk.Models;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// Source NAT(SNAT) - translates a source IP address in an outbound packet so thatthe packet appears to originate from a different network. SNAT is only supportedwhen the logical router is running in active-standby mode.Destination NAT(DNAT) - translates the destination IP address of inbound packetsso that packets are delivered to a target address into another network. DNAT isonly supported when the logical router is running in active-standby mode.Reflexive NAT(REFLEXIVE) - IP-Range and CIDR are supported to define the &quot;n&quot;.The number of original networks should be exactly the same as that oftranslated networks. The address translation is deterministic. Reflexive issupported on both Active/Standby and Active/Active LR.NO_SNAT and NO_DNAT - These do not have support for translated_fields, onlysource_network and destination_network fields are supported.NAT64 - translates an external IPv6 address to a internal IPv4 address.
    /// </summary>
    [NSXTProperty(Description: @"Source NAT(SNAT) - translates a source IP address in an outbound packet so thatthe packet appears to originate from a different network. SNAT is only supportedwhen the logical router is running in active-standby mode.Destination NAT(DNAT) - translates the destination IP address of inbound packetsso that packets are delivered to a target address into another network. DNAT isonly supported when the logical router is running in active-standby mode.Reflexive NAT(REFLEXIVE) - IP-Range and CIDR are supported to define the &quot;n&quot;.The number of original networks should be exactly the same as that oftranslated networks. The address translation is deterministic. Reflexive issupported on both Active/Standby and Active/Active LR.NO_SNAT and NO_DNAT - These do not have support for translated_fields, onlysource_network and destination_network fields are supported.NAT64 - translates an external IPv6 address to a internal IPv4 address.")]
    public enum NSXTPolicyNatRuleActionEnumType
    {
        [EnumMember(Value = "SNAT")]
        SNAT = 1,
        [EnumMember(Value = "DNAT")]
        DNAT = 2,
        [EnumMember(Value = "REFLEXIVE")]
        REFLEXIVE = 3,
        [EnumMember(Value = "NO_SNAT")]
        NOSNAT = 4,
        [EnumMember(Value = "NO_DNAT")]
        NODNAT = 5,
        [EnumMember(Value = "NAT64")]
        NAT64 = 6,
    }
}
