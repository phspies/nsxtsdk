// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTALBSSLKeyAndCertificateType : NSXTPolicyConfigResourceType
    {
        public NSXTALBSSLKeyAndCertificateType()
        {
            Status = test
            Format = test
        }
        /// <summary>
        /// Enum options - SSL_CERTIFICATE_FINISHED,
        /// SSL_CERTIFICATE_PENDING.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as SSL_CERTIFICATE_FINISHED.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        [NSXTProperty(IsRequired: false, Description: @"Enum options - SSL_CERTIFICATE_FINISHED,SSL_CERTIFICATE_PENDING.Default value when not specified in API or module isinterpreted by ALB Controller as SSL_CERTIFICATE_FINISHED.")]
        public NSXTAlbsslkeyAndCertificateStatusEnumType? Status { get; set; }
        /// <summary>
        /// Encrypted private key corresponding to the private key
        /// (e.g.
        /// those generated by an HSM such as Thales nShield).
        /// </summary>
        [JsonProperty(PropertyName = "enckey_base64")]
        [NSXTProperty(IsRequired: false, Description: @"Encrypted private key corresponding to the private key(e.g.those generated by an HSM such as Thales nShield).")]
        public string? EnckeyBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "certificate", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTALBSSLCertificateType Certificate { get; set; }
        /// <summary>
        /// Dynamic parameters needed for certificate management
        /// profile.
        /// </summary>
        [JsonProperty(PropertyName = "dynamic_params")]
        [NSXTProperty(IsRequired: false, Description: @"Dynamic parameters needed for certificate managementprofile.")]
        public IList<NSXTALBCustomParamsType> DynamicParams { get; set; }
        /// <summary>
        /// Format of the Key/Certificate file.
        /// Enum options - SSL_PEM, SSL_PKCS12.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as SSL_PEM.
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        [NSXTProperty(IsRequired: false, Description: @"Format of the Key/Certificate file.Enum options - SSL_PEM, SSL_PKCS12.Default value when not specified in API or module isinterpreted by ALB Controller as SSL_PEM.")]
        public NSXTAlbsslkeyAndCertificateFormatEnumType? Format { get; set; }
        /// <summary>
        /// Enables OCSP Stapling.
        /// Allowed in Basic(Allowed values- false) edition,
        /// Essentials(Allowed values- false) edition, Enterprise
        /// edition.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        [JsonProperty(PropertyName = "enable_ocsp_stapling")]
        [NSXTProperty(IsRequired: false, Description: @"Enables OCSP Stapling.Allowed in Basic(Allowed values- false) edition,Essentials(Allowed values- false) edition, Enterpriseedition.Default value when not specified in API or module isinterpreted by ALB Controller as false.")]
        public bool? EnableOcspStapling { get; set; }
        /// <summary>
        /// Name of the encrypted private key (e.g.
        /// those generated by an HSM such as Thales nShield).
        /// </summary>
        [JsonProperty(PropertyName = "enckey_name")]
        [NSXTProperty(IsRequired: false, Description: @"Name of the encrypted private key (e.g.those generated by an HSM such as Thales nShield).")]
        public string? EnckeyName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "ocsp_config")]
        [NSXTProperty(IsRequired: false, Description: @"")]
        public NSXTALBOCSPConfigType OcspConfig { get; set; }
        /// <summary>
        /// List of labels to be used for granular RBAC.
        /// Allowed in Basic edition, Essentials edition, Enterprise
        /// edition.
        /// </summary>
        [JsonProperty(PropertyName = "markers")]
        [NSXTProperty(IsRequired: false, Description: @"List of labels to be used for granular RBAC.Allowed in Basic edition, Essentials edition, Enterpriseedition.")]
        public IList<NSXTALBRoleFilterMatchLabelType> Markers { get; set; }
        /// <summary>
        /// States if the private key is base64 encoded.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        [JsonProperty(PropertyName = "key_base64")]
        [NSXTProperty(IsRequired: false, Description: @"States if the private key is base64 encoded.Default value when not specified in API or module isinterpreted by ALB Controller as false.")]
        public bool? KeyBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "key_params")]
        [NSXTProperty(IsRequired: false, Description: @"")]
        public NSXTALBSSLKeyParamsType KeyParams { get; set; }
        /// <summary>
        /// Passphrase used to encrypt the private key.
        /// </summary>
        [JsonProperty(PropertyName = "key_passphrase")]
        [NSXTProperty(IsRequired: false, Description: @"Passphrase used to encrypt the private key.")]
        public string? KeyPassphrase { get; set; }
        /// <summary>
        /// Creator name.
        /// </summary>
        [JsonProperty(PropertyName = "created_by")]
        [NSXTProperty(IsRequired: false, Description: @"Creator name.")]
        public string? CreatedBy { get; set; }
        /// <summary>
        /// Private key.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        [NSXTProperty(IsRequired: false, Description: @"Private key.")]
        public string? Key { get; set; }
        /// <summary>
        /// States if the certificate is base64 encoded.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        [JsonProperty(PropertyName = "certificate_base64")]
        [NSXTProperty(IsRequired: false, Description: @"States if the certificate is base64 encoded.Default value when not specified in API or module isinterpreted by ALB Controller as false.")]
        public bool? CertificateBase64 { get; set; }
        /// <summary>
        /// CA certificates in certificate chain.
        /// </summary>
        [JsonProperty(PropertyName = "ca_certs")]
        [NSXTProperty(IsRequired: false, Description: @"CA certificates in certificate chain.")]
        public IList<NSXTALBCertificateAuthorityType> CaCerts { get; set; }
        /// <summary>
        /// Enum options - SSL_CERTIFICATE_TYPE_VIRTUALSERVICE,
        /// SSL_CERTIFICATE_TYPE_SYSTEM, SSL_CERTIFICATE_TYPE_CA.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        [NSXTProperty(IsRequired: false, Description: @"Enum options - SSL_CERTIFICATE_TYPE_VIRTUALSERVICE,SSL_CERTIFICATE_TYPE_SYSTEM, SSL_CERTIFICATE_TYPE_CA.")]
        public NSXTAlbsslkeyAndCertificateTypeEnumType? Type { get; set; }
        /// <summary>
        /// It is a reference to an object of type
        /// HardwareSecurityModuleGroup.
        /// </summary>
        [JsonProperty(PropertyName = "hardwaresecuritymodulegroup_path")]
        [NSXTProperty(IsRequired: false, Description: @"It is a reference to an object of typeHardwareSecurityModuleGroup.")]
        public string? HardwaresecuritymodulegroupPath { get; set; }
    }
}
