// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.ComponentModel;
using NJsonSchema.Converters;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTALBSSLKeyAndCertificateType : NSXTPolicyConfigResourceType
    {
        /// <summary>
        /// Enum options - SSL_CERTIFICATE_FINISHED,
        /// SSL_CERTIFICATE_PENDING.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as SSL_CERTIFICATE_FINISHED.
        /// </summary>
        public NSXTAlbsslkeyAndCertificateStatusEnumType? Status { get; set; }
        /// <summary>
        /// Encrypted private key corresponding to the private key
        /// (e.g.
        /// those generated by an HSM such as Thales nShield).
        /// </summary>
        public string? EnckeyBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "certificate", Required = Required.AllowNull)]
        public NSXTALBSSLCertificateType Certificate { get; set; }
        /// <summary>
        /// Dynamic parameters needed for certificate management
        /// profile.
        /// </summary>
        public IList<NSXTALBCustomParamsType> DynamicParams { get; set; }
        /// <summary>
        /// Format of the Key/Certificate file.
        /// Enum options - SSL_PEM, SSL_PKCS12.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as SSL_PEM.
        /// </summary>
        public NSXTAlbsslkeyAndCertificateFormatEnumType? Format { get; set; }
        /// <summary>
        /// Enables OCSP Stapling.
        /// Allowed in Basic(Allowed values- false) edition,
        /// Essentials(Allowed values- false) edition, Enterprise
        /// edition.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        public bool? EnableOcspStapling { get; set; }
        /// <summary>
        /// Name of the encrypted private key (e.g.
        /// those generated by an HSM such as Thales nShield).
        /// </summary>
        public string? EnckeyName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public NSXTALBOCSPConfigType OcspConfig { get; set; }
        /// <summary>
        /// List of labels to be used for granular RBAC.
        /// Allowed in Basic edition, Essentials edition, Enterprise
        /// edition.
        /// </summary>
        public IList<NSXTALBRoleFilterMatchLabelType> Markers { get; set; }
        /// <summary>
        /// States if the private key is base64 encoded.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        public bool? KeyBase64 { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public NSXTALBSSLKeyParamsType KeyParams { get; set; }
        /// <summary>
        /// Passphrase used to encrypt the private key.
        /// </summary>
        public string? KeyPassphrase { get; set; }
        /// <summary>
        /// Creator name.
        /// </summary>
        public string? CreatedBy { get; set; }
        /// <summary>
        /// Private key.
        /// </summary>
        public string? Key { get; set; }
        /// <summary>
        /// States if the certificate is base64 encoded.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        public bool? CertificateBase64 { get; set; }
        /// <summary>
        /// CA certificates in certificate chain.
        /// </summary>
        public IList<NSXTALBCertificateAuthorityType> CaCerts { get; set; }
        /// <summary>
        /// Enum options - SSL_CERTIFICATE_TYPE_VIRTUALSERVICE,
        /// SSL_CERTIFICATE_TYPE_SYSTEM, SSL_CERTIFICATE_TYPE_CA.
        /// </summary>
        public NSXTAlbsslkeyAndCertificateTypeEnumType? Type { get; set; }
        /// <summary>
        /// It is a reference to an object of type
        /// HardwareSecurityModuleGroup.
        /// </summary>
        public string? HardwaresecuritymodulegroupPath { get; set; }
    }
}
