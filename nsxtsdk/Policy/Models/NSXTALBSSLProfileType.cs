// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTALBSSLProfileType : NSXTPolicyConfigResourceType
    {
        /// <summary>
        /// The amount of time in seconds before an SSL session
        /// expires.
        /// Unit is SEC.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as 86400.
        /// </summary>
        [JsonProperty(PropertyName = "ssl_session_timeout")]
        [NSXTProperty(IsRequired: false, Description: @"The amount of time in seconds before an SSL sessionexpires.Unit is SEC.Default value when not specified in API or module isinterpreted by ALB Controller as 86400.")]
        [NSXTDefaultProperty(Default: "")]
        public long? SslSessionTimeout { get; set; }
        /// <summary>
        /// Ciphers suites represented as defined by U(http
        /// //www.openssl.org/docs/apps/ciphers.html).
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as AES:3DES:RC4.
        /// </summary>
        [JsonProperty(PropertyName = "accepted_ciphers")]
        [NSXTProperty(IsRequired: false, Description: @"Ciphers suites represented as defined by U(http//www.openssl.org/docs/apps/ciphers.html).Default value when not specified in API or module isinterpreted by ALB Controller as AES:3DES:RC4.")]
        [NSXTDefaultProperty(Default: "AES:3DES:RC4")]
        public string? AcceptedCiphers { get; set; }
        /// <summary>
        /// Prefer the SSL cipher ordering presented by the client
        /// during the SSL handshake over the one specified in the SSL
        /// Profile.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        [JsonProperty(PropertyName = "prefer_client_cipher_ordering")]
        [NSXTProperty(IsRequired: false, Description: @"Prefer the SSL cipher ordering presented by the clientduring the SSL handshake over the one specified in the SSLProfile.Default value when not specified in API or module isinterpreted by ALB Controller as false.")]
        public bool? PreferClientCipherOrdering { get; set; }
        /// <summary>
        /// Placeholder for description of property tags of obj type
        /// SSLProfile field type str  type array.
        /// </summary>
        [JsonProperty(PropertyName = "avi_tags")]
        [NSXTProperty(IsRequired: false, Description: @"Placeholder for description of property tags of obj typeSSLProfile field type str  type array.")]
        public IList<NSXTALBTagType> AviTags { get; set; }
        /// <summary>
        /// SSL Profile Type.
        /// Enum options - SSL_PROFILE_TYPE_APPLICATION,
        /// SSL_PROFILE_TYPE_SYSTEM.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as
        /// SSL_PROFILE_TYPE_APPLICATION.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        [NSXTProperty(IsRequired: false, Description: @"SSL Profile Type.Enum options - SSL_PROFILE_TYPE_APPLICATION,SSL_PROFILE_TYPE_SYSTEM.Default value when not specified in API or module isinterpreted by ALB Controller asSSL_PROFILE_TYPE_APPLICATION.")]
        [NSXTDefaultProperty(Default: "SSL_PROFILE_TYPE_APPLICATION")]
        public NSXTAlbsslprofileTypeEnumType? Type { get; set; }
        /// <summary>
        /// Set of versions accepted by the server.
        /// Minimum of 1 items required.
        /// </summary>
        [JsonProperty(PropertyName = "accepted_versions", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Set of versions accepted by the server.Minimum of 1 items required.")]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<NSXTALBSSLVersionType> AcceptedVersions { get; set; }
        /// <summary>
        /// Enable SSL session re-use.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as true.
        /// </summary>
        [JsonProperty(PropertyName = "enable_ssl_session_reuse")]
        [NSXTProperty(IsRequired: false, Description: @"Enable SSL session re-use.Default value when not specified in API or module isinterpreted by ALB Controller as true.")]
        [NSXTDefaultProperty(Default: "")]
        public bool? EnableSslSessionReuse { get; set; }
        /// <summary>
        /// Enum options - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
        /// TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
        /// TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
        /// TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
        /// TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
        /// TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
        /// TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
        /// TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
        /// TLS_RSA_WITH_AES_128_GCM_SHA256,
        /// TLS_RSA_WITH_AES_256_GCM_SHA384,
        /// TLS_RSA_WITH_AES_128_CBC_SHA256,
        /// TLS_RSA_WITH_AES_256_CBC_SHA256,
        /// TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
        /// TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
        /// TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
        /// TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
        /// TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA,
        /// TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_AES_256_GCM_SHA384...
        /// </summary>
        [JsonProperty(PropertyName = "cipher_enums")]
        [NSXTProperty(IsRequired: false, Description: @"Enum options - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_AES_256_GCM_SHA384...")]
        public IList<string> CipherEnums { get; set; }
        /// <summary>
        /// Send 'close notify' alert message for a clean shutdown of
        /// the SSL connection.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as true.
        /// </summary>
        [JsonProperty(PropertyName = "send_close_notify")]
        [NSXTProperty(IsRequired: false, Description: @"Send &apos;close notify&apos; alert message for a clean shutdown ofthe SSL connection.Default value when not specified in API or module isinterpreted by ALB Controller as true.")]
        [NSXTDefaultProperty(Default: "")]
        public bool? SendCloseNotify { get; set; }
        /// <summary>
        /// Enable early data processing for TLS1.3 connections.
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as false.
        /// </summary>
        [JsonProperty(PropertyName = "enable_early_data")]
        [NSXTProperty(IsRequired: false, Description: @"Enable early data processing for TLS1.3 connections.Default value when not specified in API or module isinterpreted by ALB Controller as false.")]
        public bool? EnableEarlyData { get; set; }
        /// <summary>
        /// Placeholder for description of property ssl_rating of obj
        /// type SSLProfile field type str  type ref.
        /// </summary>
        [JsonProperty(PropertyName = "ssl_rating")]
        [NSXTProperty(IsRequired: false, Description: @"Placeholder for description of property ssl_rating of objtype SSLProfile field type str  type ref.")]
        public NSXTALBSSLRatingType SslRating { get; set; }
        /// <summary>
        /// TLS 1.3 Ciphers suites represented as defined by U(https
        /// //www.openssl.org/docs/manmaster/man1/ciphers.html).
        /// Default value when not specified in API or module is
        /// interpreted by ALB Controller as
        /// TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256.
        /// </summary>
        [JsonProperty(PropertyName = "ciphersuites")]
        [NSXTProperty(IsRequired: false, Description: @"TLS 1.3 Ciphers suites represented as defined by U(https//www.openssl.org/docs/manmaster/man1/ciphers.html).Default value when not specified in API or module isinterpreted by ALB Controller asTLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256.")]
        [NSXTDefaultProperty(Default: "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256")]
        public string? Ciphersuites { get; set; }
    }
}
