// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTIPFIXL2ProfileType : NSXTPolicyConfigResourceType
    {
        /// <summary>
        /// This priority field is used to resolve conflicts in Segment
        /// Ports which are covered by more than one IPFIX profiles. The IPFIX
        /// exporter will send records to Collectors in highest priority
        /// profile (lowest number) only.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        [NSXTProperty(IsRequired: false, Description: @"This priority field is used to resolve conflicts in SegmentPorts which are covered by more than one IPFIX profiles. The IPFIXexporter will send records to Collectors in highest priorityprofile (lowest number) only.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(32000)]
        [NSXTDefaultProperty(Default: "")]
        public long? Priority { get; set; }
        /// <summary>
        /// The time in seconds after a flow is expired if
        /// no more packets matching this flow are received by the cache.
        /// </summary>
        [JsonProperty(PropertyName = "idle_timeout")]
        [NSXTProperty(IsRequired: false, Description: @"The time in seconds after a flow is expired ifno more packets matching this flow are received by the cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(60)]
        //[System.ComponentModel.DataAnnotations.MaxLength(3600)]
        [NSXTDefaultProperty(Default: "")]
        public long? IdleTimeout { get; set; }
        /// <summary>
        /// Policy path for IPFIX collector profile. User can specify only one IPFIX collector.
        /// </summary>
        [JsonProperty(PropertyName = "ipfix_collector_profile_path", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Policy path for IPFIX collector profile. User can specify only one IPFIX collector.")]
        [System.ComponentModel.DataAnnotations.Required]
        public string IpfixCollectorProfilePath { get; set; }
        /// <summary>
        /// The maximum number of flow entries in
        /// each exporter flow cache.
        /// </summary>
        [JsonProperty(PropertyName = "max_flows")]
        [NSXTProperty(IsRequired: false, Description: @"The maximum number of flow entries ineach exporter flow cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(4294967295)]
        [NSXTDefaultProperty(Default: "")]
        public long? MaxFlows { get; set; }
        /// <summary>
        /// An identifier that is unique to the exporting process and used to
        /// meter the flows.
        /// </summary>
        [JsonProperty(PropertyName = "observation_domain_id")]
        [NSXTProperty(IsRequired: false, Description: @"An identifier that is unique to the exporting process and used tometer the flows.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(4294967295)]
        [NSXTDefaultProperty(Default: "")]
        public long? ObservationDomainId { get; set; }
        /// <summary>
        /// The time in seconds after a flow is expired even if
        /// more packets matching this flow are received by the cache.
        /// </summary>
        [JsonProperty(PropertyName = "active_timeout")]
        [NSXTProperty(IsRequired: false, Description: @"The time in seconds after a flow is expired even ifmore packets matching this flow are received by the cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(60)]
        //[System.ComponentModel.DataAnnotations.MaxLength(3600)]
        [NSXTDefaultProperty(Default: "")]
        public long? ActiveTimeout { get; set; }
        /// <summary>
        /// This property controls whether overlay flow info is included in the
        /// sample result.
        /// </summary>
        [JsonProperty(PropertyName = "export_overlay_flow")]
        [NSXTProperty(IsRequired: false, Description: @"This property controls whether overlay flow info is included in thesample result.")]
        [NSXTDefaultProperty(Default: "")]
        public bool? ExportOverlayFlow { get; set; }
        /// <summary>
        /// The probability in percentage that a packet is sampled,
        /// in range 0-100. The probability is equal for every packet.
        /// </summary>
        [JsonProperty(PropertyName = "packet_sample_probability", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"The probability in percentage that a packet is sampled,in range 0-100. The probability is equal for every packet.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(100)]
        [System.ComponentModel.DataAnnotations.Required]
        [NSXTDefaultProperty(Default: "")]
        public double PacketSampleProbability { get; set; }
    }
}
