// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// Tier-0 vrf configuration.
    /// </summary>
    [NSXTProperty(Description: @"Tier-0 vrf configuration.")]
    public class NSXTTier0VrfConfigType 
    {
        public NSXTTier0VrfConfigType()
        {
        }
        /// <summary>
        /// Route targets.
        /// </summary>
        [JsonProperty(PropertyName = "route_targets")]
        [NSXTProperty(IsRequired: false, Description: @"Route targets.")]
        public IList<NSXTVrfRouteTargetsType> RouteTargets { get; set; }
        /// <summary>
        /// L3 VNI associated with the VRF for overlay traffic of ethernet virtual
        /// private network (EVPN). It must be unique and available from the VNI
        /// pool defined for EVPN service. It is required for VRF to participate
        /// in the EVPN service in INLINE mode.
        /// </summary>
        [JsonProperty(PropertyName = "evpn_transit_vni")]
        [NSXTProperty(IsRequired: false, Description: @"L3 VNI associated with the VRF for overlay traffic of ethernet virtualprivate network (EVPN). It must be unique and available from the VNIpool defined for EVPN service. It is required for VRF to participatein the EVPN service in INLINE mode.")]
        public int? EvpnTransitVni { get; set; }
        /// <summary>
        /// Default tier0 path. Cannot be modified after realization.
        /// </summary>
        [JsonProperty(PropertyName = "tier0_path", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Default tier0 path. Cannot be modified after realization.")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tier0Path { get; set; }
        /// <summary>
        /// Route distinguisher with format in IPAddress:<number> or ASN:<number>.
        /// </summary>
        [JsonProperty(PropertyName = "route_distinguisher")]
        [NSXTProperty(IsRequired: false, Description: @"Route distinguisher with format in IPAddress:&lt;number&gt; or ASN:&lt;number&gt;.")]
        public string? RouteDistinguisher { get; set; }
        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "evpn_l2_vni_config")]
        [NSXTProperty(IsRequired: false, Description: @"")]
        public NSXTVrfEvpnL2VniConfigType EvpnL2VniConfig { get; set; }
    }
}
