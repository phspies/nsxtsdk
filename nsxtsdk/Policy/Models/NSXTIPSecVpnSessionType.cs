// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [JsonConverter(typeof(JsonInheritanceConverter), "resource_type")]
    [JsonInheritanceAttribute("PolicyBasedIPSecVpnSession", typeof(NSXTPolicyBasedIPSecVpnSessionType))]
    [JsonInheritanceAttribute("RouteBasedIPSecVpnSession", typeof(NSXTRouteBasedIPSecVpnSessionType))]
    [NSXTProperty(Description: @"")]
    public class NSXTIPSecVpnSessionType : NSXTPolicyConfigResourceType
    {
        /// <summary>
        /// IPSec Pre-shared key. Maximum length of this field is 128 characters.
        /// </summary>
        [JsonProperty(PropertyName = "psk")]
        [NSXTProperty(IsRequired: false, Description: @"IPSec Pre-shared key. Maximum length of this field is 128 characters.")]
        public string? Psk { get; set; }
        /// <summary>
        /// Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.
        /// </summary>
        [JsonProperty(PropertyName = "dpd_profile_path")]
        [NSXTProperty(IsRequired: false, Description: @"Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.")]
        public string? DpdProfilePath { get; set; }
        /// <summary>
        /// Policy path referencing IKE profile to be used. Default is set according to system default profile.
        /// </summary>
        [JsonProperty(PropertyName = "ike_profile_path")]
        [NSXTProperty(IsRequired: false, Description: @"Policy path referencing IKE profile to be used. Default is set according to system default profile.")]
        public string? IkeProfilePath { get; set; }
        /// <summary>
        /// Enable/Disable IPSec VPN session.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        [NSXTProperty(IsRequired: false, Description: @"Enable/Disable IPSec VPN session.")]
        [NSXTDefaultProperty(Default: "")]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Connection initiation mode used by local endpoint to
        /// establish ike connection with peer site.
        /// INITIATOR - In this mode local endpoint initiates
        /// tunnel setup and will also respond to incoming tunnel
        /// setup requests from peer gateway.
        /// RESPOND_ONLY - In this mode, local endpoint shall only
        /// respond to incoming tunnel setup requests. It shall not
        /// initiate the tunnel setup.
        /// ON_DEMAND - In this mode local endpoint will initiate
        /// tunnel creation once first packet matching the policy
        /// rule is received and will also respond to incoming
        /// initiation request.
        /// </summary>
        [JsonProperty(PropertyName = "connection_initiation_mode")]
        [NSXTProperty(IsRequired: false, Description: @"Connection initiation mode used by local endpoint toestablish ike connection with peer site.INITIATOR - In this mode local endpoint initiatestunnel setup and will also respond to incoming tunnelsetup requests from peer gateway.RESPOND_ONLY - In this mode, local endpoint shall onlyrespond to incoming tunnel setup requests. It shall notinitiate the tunnel setup.ON_DEMAND - In this mode local endpoint will initiatetunnel creation once first packet matching the policyrule is received and will also respond to incominginitiation request.")]
        [NSXTDefaultProperty(Default: "INITIATOR")]
        public NSXTIpsecVpnSessionConnectionInitiationModeEnumType? ConnectionInitiationMode { get; set; }
        /// <summary>
        /// Policy path referencing Local endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "local_endpoint_path", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Policy path referencing Local endpoint.")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LocalEndpointPath { get; set; }
        /// <summary>
        /// Policy path referencing Tunnel profile to be used. Default is set to system default profile.
        /// </summary>
        [JsonProperty(PropertyName = "tunnel_profile_path")]
        [NSXTProperty(IsRequired: false, Description: @"Policy path referencing Tunnel profile to be used. Default is set to system default profile.")]
        public string? TunnelProfilePath { get; set; }
        /// <summary>
        /// Compliance suite.
        /// </summary>
        [JsonProperty(PropertyName = "compliance_suite")]
        [NSXTProperty(IsRequired: false, Description: @"Compliance suite.")]
        public NSXTIpsecVpnSessionComplianceSuiteEnumType? ComplianceSuite { get; set; }
        /// <summary>
        /// TCP Maximum Segment Size Clamping Direction and Value.
        /// </summary>
        [JsonProperty(PropertyName = "tcp_mss_clamping")]
        [NSXTProperty(IsRequired: false, Description: @"TCP Maximum Segment Size Clamping Direction and Value.")]
        public NSXTTcpMaximumSegmentSizeClampingType TcpMssClamping { get; set; }
        /// <summary>
        /// Peer authentication mode.
        /// PSK - In this mode a secret key shared between local and
        /// peer sites is to be used for authentication. The secret
        /// key can be a string with a maximum length of 128 characters.
        /// CERTIFICATE - In this mode a certificate defined at the
        /// global level is to be used for authentication.
        /// </summary>
        [JsonProperty(PropertyName = "authentication_mode")]
        [NSXTProperty(IsRequired: false, Description: @"Peer authentication mode.PSK - In this mode a secret key shared between local andpeer sites is to be used for authentication. The secretkey can be a string with a maximum length of 128 characters.CERTIFICATE - In this mode a certificate defined at theglobal level is to be used for authentication.")]
        [NSXTDefaultProperty(Default: "PSK")]
        public NSXTIpsecVpnSessionAuthenticationModeEnumType? AuthenticationMode { get; set; }
        /// <summary>
        /// Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the
        /// VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
        /// </summary>
        [JsonProperty(PropertyName = "peer_id", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PeerId { get; set; }
        /// <summary>
        /// Public IPV4 address of the remote device terminating the VPN connection.
        /// </summary>
        [JsonProperty(PropertyName = "peer_address", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Public IPV4 address of the remote device terminating the VPN connection.")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PeerAddress { get; set; }
        /// <summary>
        /// A Policy Based VPN requires to define protect rules that match
        /// local and peer subnets. IPSec security associations is
        /// negotiated for each pair of local and peer subnet.
        /// A Route Based VPN is more flexible, more powerful and recommended over
        /// policy based VPN. IP Tunnel port is created and all traffic routed via
        /// tunnel port is protected. Routes can be configured statically
        /// or can be learned through BGP. A route based VPN is must for establishing
        /// redundant VPN session to remote site.
        /// </summary>
        [JsonProperty(PropertyName = "resource_type", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"A Policy Based VPN requires to define protect rules that match  local and peer subnets. IPSec security associations is  negotiated for each pair of local and peer subnet.A Route Based VPN is more flexible, more powerful and recommended over  policy based VPN. IP Tunnel port is created and all traffic routed via  tunnel port is protected. Routes can be configured statically  or can be learned through BGP. A route based VPN is must for establishing  redundant VPN session to remote site.")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTIpsecVpnSessionResourceTypeEnumType ResourceType { get; set; }
    }
}
