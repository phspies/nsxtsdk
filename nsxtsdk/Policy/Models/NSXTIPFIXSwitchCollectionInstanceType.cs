// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTIPFIXSwitchCollectionInstanceType : NSXTPolicyConfigResourceType
    {
        /// <summary>
        /// Policy path for IPFIX collector profiles. IPFIX data from
        /// these logical segments will be sent to all specified IPFIX
        /// collectors.
        /// </summary>
        [JsonProperty(PropertyName = "ipfix_collector_profile_paths", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Policy path for IPFIX collector profiles. IPFIX data fromthese logical segments will be sent to all specified IPFIXcollectors.")]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<string> IpfixCollectorProfilePaths { get; set; }
        /// <summary>
        /// The time in seconds after a Flow is expired if
        /// no more packets matching this Flow are received by the cache.
        /// </summary>
        [JsonProperty(PropertyName = "idle_timeout", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"The time in seconds after a Flow is expired ifno more packets matching this Flow are received by the cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(60)]
        //[System.ComponentModel.DataAnnotations.MaxLength(3600)]
        [System.ComponentModel.DataAnnotations.Required]
        [NSXTDefaultProperty(Default: "")]
        public long IdleTimeout { get; set; }
        /// <summary>
        /// Policy path for source tier-1 segment. IPFIX data from
        /// these logical segments will be sent IPFIX collector.
        /// </summary>
        [JsonProperty(PropertyName = "source_logical_segment_paths", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Policy path for source tier-1 segment. IPFIX data fromthese logical segments will be sent IPFIX collector.")]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<string> SourceLogicalSegmentPaths { get; set; }
        /// <summary>
        /// The maximum number of flow entries in
        /// each exporter flow cache.
        /// </summary>
        [JsonProperty(PropertyName = "max_flows")]
        [NSXTProperty(IsRequired: false, Description: @"The maximum number of flow entries ineach exporter flow cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(4294967295)]
        [NSXTDefaultProperty(Default: "")]
        public long? MaxFlows { get; set; }
        /// <summary>
        /// An identifier that is unique to the exporting process and used to
        /// meter the Flows.
        /// </summary>
        [JsonProperty(PropertyName = "observation_domain_id")]
        [NSXTProperty(IsRequired: false, Description: @"An identifier that is unique to the exporting process and used tometer the Flows.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(4294967295)]
        [NSXTDefaultProperty(Default: "")]
        public long? ObservationDomainId { get; set; }
        /// <summary>
        /// The time in seconds after a flow is expired even if
        /// more packets matching this flow are received by the cache.
        /// </summary>
        [JsonProperty(PropertyName = "active_timeout", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"The time in seconds after a flow is expired even ifmore packets matching this flow are received by the cache.")]
        //[System.ComponentModel.DataAnnotations.MinLength(60)]
        //[System.ComponentModel.DataAnnotations.MaxLength(3600)]
        [System.ComponentModel.DataAnnotations.Required]
        [NSXTDefaultProperty(Default: "")]
        public long ActiveTimeout { get; set; }
        /// <summary>
        /// The probability in percentage that a packet is sampled,
        /// in range 0-100. The probability is equal for every packet.
        /// </summary>
        [JsonProperty(PropertyName = "packet_sample_probability", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"The probability in percentage that a packet is sampled,in range 0-100. The probability is equal for every packet.")]
        //[System.ComponentModel.DataAnnotations.MinLength(0)]
        //[System.ComponentModel.DataAnnotations.MaxLength(100)]
        [System.ComponentModel.DataAnnotations.Required]
        public double PacketSampleProbability { get; set; }
    }
}
