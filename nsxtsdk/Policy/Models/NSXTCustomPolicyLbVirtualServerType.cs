// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// 
    /// </summary>
    [NSXTProperty(Description: @"")]
    public class NSXTCustomPolicyLbVirtualServerType : NSXTHttpPolicyLbVirtualServerType
    {
        /// <summary>
        /// The setting is used when load balancer acts as an SSL
        /// server and terminating the client SSL connection.  A default
        /// certificate should be specified which will be used if the server does
        /// not host multiple hostnames on the same IP address or if the client
        /// does not support SNI extension.
        /// </summary>
        [JsonProperty(PropertyName = "default_client_ssl_certificate_id")]
        [NSXTProperty(IsRequired: false, Description: @"The setting is used when load balancer acts as an SSLserver and terminating the client SSL connection.  A defaultcertificate should be specified which will be used if the server doesnot host multiple hostnames on the same IP address or if the clientdoes not support SNI extension.")]
        public string? DefaultClientSslCertificateId { get; set; }
        /// <summary>
        /// As the custom type allows for more complex settings than the simplified
        /// PolicyLbVirtualServer types, also specify the desired protocol for
        /// receiving all client connections.
        /// </summary>
        [JsonProperty(PropertyName = "app_protocol", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"As the custom type allows for more complex settings than the simplifiedPolicyLbVirtualServer types, also specify the desired protocol forreceiving all client connections.")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTCustomPolicyLbVirtualServerAppProtocolEnumType AppProtocol { get; set; }
        /// <summary>
        /// Security settings representing various security settings
        /// when the VirtualServer acts as an SSL server
        /// - BASE_SECURE_111317
        /// - MODERATE_SECURE_111317
        /// - HIGH_SECURE_111317
        /// </summary>
        [JsonProperty(PropertyName = "client_ssl_settings")]
        [NSXTProperty(IsRequired: false, Description: @"Security settings representing various security settingswhen the VirtualServer acts as an SSL server- BASE_SECURE_111317- MODERATE_SECURE_111317- HIGH_SECURE_111317")]
        [NSXTDefaultProperty(Default: "HIGH_SECURE_111317")]
        public NSXTCustomPolicyLbVirtualServerClientSslSettingsEnumType? ClientSslSettings { get; set; }
        /// <summary>
        /// To support client authentication (load balancer acting as
        /// a client authenticating to the backend server),
        /// server_ssl_certificate_id can be specified.  When supplied, the
        /// backend server certificate must be signed by one of the trusted
        /// Certificate Authorities (CAs), also referred to as root CAs, whose
        /// self signed certificates are specified. This setting is only applicable
        /// for L7 protocols and will be rejected in combination with TCP or UDP.
        /// </summary>
        [JsonProperty(PropertyName = "server_auth_ca_certificate_ids")]
        [NSXTProperty(IsRequired: false, Description: @"To support client authentication (load balancer acting asa client authenticating to the backend server),server_ssl_certificate_id can be specified.  When supplied, thebackend server certificate must be signed by one of the trustedCertificate Authorities (CAs), also referred to as root CAs, whoseself signed certificates are specified. This setting is only applicablefor L7 protocols and will be rejected in combination with TCP or UDP.")]
        public IList<string> ServerAuthCaCertificateIds { get; set; }
        /// <summary>
        /// Client-side SSL profile binding allows multiple
        /// certificates, for different hostnames, to be bound to the same virtual
        /// server. The setting is used when load balancer acts as an SSL server
        /// and terminating the client SSL connection
        /// </summary>
        [JsonProperty(PropertyName = "client_ssl_certificate_ids")]
        [NSXTProperty(IsRequired: false, Description: @"Client-side SSL profile binding allows multiplecertificates, for different hostnames, to be bound to the same virtualserver. The setting is used when load balancer acts as an SSL serverand terminating the client SSL connection")]
        public IList<string> ClientSslCertificateIds { get; set; }
        /// <summary>
        /// Indicates whether to enable server side SSL.  Server side SSL will be
        /// enabled when a specific security setting is selected. The selected
        /// security setting or profile represents various configurations related
        /// to SSL when the VirtualServer acts as a client connecting over SSL
        /// to the backend server.  This setting is only applicable for L7 protocols
        /// and will be rejected in combination with TCP or UDP.
        /// - BASE_SECURE_111317
        /// - MODERATE_SECURE_111317
        /// - HIGH_SECURE_111317
        /// - DISABLED
        /// </summary>
        [JsonProperty(PropertyName = "server_ssl_settings")]
        [NSXTProperty(IsRequired: false, Description: @"Indicates whether to enable server side SSL.  Server side SSL will beenabled when a specific security setting is selected. The selectedsecurity setting or profile represents various configurations relatedto SSL when the VirtualServer acts as a client connecting over SSLto the backend server.  This setting is only applicable for L7 protocolsand will be rejected in combination with TCP or UDP.- BASE_SECURE_111317- MODERATE_SECURE_111317- HIGH_SECURE_111317- DISABLED")]
        [NSXTDefaultProperty(Default: "DISABLED")]
        public NSXTCustomPolicyLbVirtualServerServerSslSettingsEnumType? ServerSslSettings { get; set; }
    }
}
