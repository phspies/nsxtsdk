// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using nsxtsdk.Models;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using NJsonSchema.Converters;
using System.ComponentModel;

namespace nsxtsdk.PolicyModels
{
    /// <summary>
    /// Policy Attributes data holder
    /// </summary>
    [NSXTProperty(Description: @"Policy Attributes data holder")]
    public class NSXTPolicyAttributesType 
    {
        public NSXTPolicyAttributesType()
        {
            AttributeSource = test
        }
        /// <summary>
        /// Reference to sub attributes for the attribute
        /// </summary>
        [JsonProperty(PropertyName = "sub_attributes")]
        [NSXTProperty(IsRequired: false, Description: @"Reference to sub attributes for the attribute")]
        public IList<NSXTPolicySubAttributesType> SubAttributes { get; set; }
        /// <summary>
        /// Source of attribute value i.e whether system defined or custom value
        /// </summary>
        [JsonProperty(PropertyName = "attribute_source")]
        [NSXTProperty(IsRequired: false, Description: @"Source of attribute value i.e whether system defined or custom value")]
        public NSXTPolicyAttributesAttributeSourceEnumType? AttributeSource { get; set; }
        /// <summary>
        /// Description for attribute value
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        [NSXTProperty(IsRequired: false, Description: @"Description for attribute value")]
        public string? Description { get; set; }
        /// <summary>
        /// URL_Reputation is currently not available. Please do not use it in Attribute Key while creating context profile
        /// </summary>
        [JsonProperty(PropertyName = "key", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"URL_Reputation is currently not available. Please do not use it in Attribute Key while creating context profile")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTPolicyAttributesKeyEnumType Key { get; set; }
        /// <summary>
        /// Datatype for attribute
        /// </summary>
        [JsonProperty(PropertyName = "datatype", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Datatype for attribute")]
        [System.ComponentModel.DataAnnotations.Required]
        public NSXTPolicyAttributesDatatypeEnumType Datatype { get; set; }
        /// <summary>
        /// Describes whether the APP_ID value is ALG type or not.
        /// </summary>
        [JsonProperty(PropertyName = "isALGType")]
        [NSXTProperty(IsRequired: false, Description: @"Describes whether the APP_ID value is ALG type or not.")]
        public bool? IsALGType { get; set; }
        /// <summary>
        /// Multiple attribute values can be specified as elements of array.
        /// </summary>
        [JsonProperty(PropertyName = "value", Required = Required.AllowNull)]
        [NSXTProperty(IsRequired: true, Description: @"Multiple attribute values can be specified as elements of array.")]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<string> Value { get; set; }
        /// <summary>
        /// This is optional part that can hold additional data about the attribute key/values.
        /// Example - For URL CATEGORY key , it specified super category for url category value.
        /// This is generic array and can hold multiple meta information about key/values in future
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        [NSXTProperty(IsRequired: false, Description: @"This is optional part that can hold additional data about the attribute key/values.Example - For URL CATEGORY key , it specified super category for url category value.This is generic array and can hold multiple meta information about key/values in future")]
        public IList<NSXTContextProfileAttributesMetadataType> Metadata { get; set; }
    }
}
