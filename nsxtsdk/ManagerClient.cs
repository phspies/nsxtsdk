// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using System;
using RestSharp;
using RestSharp.Authenticators;
using RestSharp.Serializers.NewtonsoftJson;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using nsxtapi.ManagerModules;
using nsxtsdk;
using System.Threading;

namespace nsxtapi
{
    public class ManagerEngine
    {
        JsonSerializerSettings defaultSerializationSettings;
        RestClient restClient;
        private CancellationToken cancellationToken;
        private int timeout;
        private int retry;
        public ManagerEngine(RestClient RestClient, CancellationToken _cancellationToken = default(CancellationToken), int Port = 443, int _timeout = 5, int _retry = 2)
        {
            cancellationToken = _cancellationToken;
            timeout = _timeout;
            retry = _retry;
            restClient = RestClient;
        }
        public ServiceInsertion ServiceInsertionModule => new ServiceInsertion(restClient, cancellationToken, timeout, retry);
        public ServiceInsertionRules ServiceInsertionRulesModule => new ServiceInsertionRules(restClient, cancellationToken, timeout, retry);
        public NodeInstallUpgradeService NodeInstallUpgradeServiceModule => new NodeInstallUpgradeService(restClient, cancellationToken, timeout, retry);
        public AggSvcLogicalSwitch AggSvcLogicalSwitchModule => new AggSvcLogicalSwitch(restClient, cancellationToken, timeout, retry);
        public IdentityFirewall IdentityFirewallModule => new IdentityFirewall(restClient, cancellationToken, timeout, retry);
        public MACSet MACSetModule => new MACSet(restClient, cancellationToken, timeout, retry);
        public Dhcp DhcpModule => new Dhcp(restClient, cancellationToken, timeout, retry);
        public EULA EULAModule => new EULA(restClient, cancellationToken, timeout, retry);
        public IPSecVPN IPSecVPNModule => new IPSecVPN(restClient, cancellationToken, timeout, retry);
        public Routing RoutingModule => new Routing(restClient, cancellationToken, timeout, retry);
        public ApplianceStats ApplianceStatsModule => new ApplianceStats(restClient, cancellationToken, timeout, retry);
        public NodeSyslogExporters NodeSyslogExportersModule => new NodeSyslogExporters(restClient, cancellationToken, timeout, retry);
        public NodePlatformClientService NodePlatformClientServiceModule => new NodePlatformClientService(restClient, cancellationToken, timeout, retry);
        public Upgrade UpgradeModule => new Upgrade(restClient, cancellationToken, timeout, retry);
        public Traceflow TraceflowModule => new Traceflow(restClient, cancellationToken, timeout, retry);
        public L2VPNStatistics L2VPNStatisticsModule => new L2VPNStatistics(restClient, cancellationToken, timeout, retry);
        public NodeCminventoryService NodeCminventoryServiceModule => new NodeCminventoryService(restClient, cancellationToken, timeout, retry);
        public LogicalRouter LogicalRouterModule => new LogicalRouter(restClient, cancellationToken, timeout, retry);
        public AggSvcLogicalRouter AggSvcLogicalRouterModule => new AggSvcLogicalRouter(restClient, cancellationToken, timeout, retry);
        public ClusterCertificate ClusterCertificateModule => new ClusterCertificate(restClient, cancellationToken, timeout, retry);
        public ClusterRestore ClusterRestoreModule => new ClusterRestore(restClient, cancellationToken, timeout, retry);
        public NodeNetworkModule NodeNetworkModuleModule => new NodeNetworkModule(restClient, cancellationToken, timeout, retry);
        public ClusterManagement ClusterManagementModule => new ClusterManagement(restClient, cancellationToken, timeout, retry);
        public SiteManagerModule SiteManagerModuleModule => new SiteManagerModule(restClient, cancellationToken, timeout, retry);
        public DnsForwarder DnsForwarderModule => new DnsForwarder(restClient, cancellationToken, timeout, retry);
        public NvdsUpgradeReadinessCheck NvdsUpgradeReadinessCheckModule => new NvdsUpgradeReadinessCheck(restClient, cancellationToken, timeout, retry);
        public Firewall FirewallModule => new Firewall(restClient, cancellationToken, timeout, retry);
        public VtepLabel VtepLabelModule => new VtepLabel(restClient, cancellationToken, timeout, retry);
        public NodeSearchService NodeSearchServiceModule => new NodeSearchService(restClient, cancellationToken, timeout, retry);
        public NodePolicyService NodePolicyServiceModule => new NodePolicyService(restClient, cancellationToken, timeout, retry);
        public Migration MigrationModule => new Migration(restClient, cancellationToken, timeout, retry);
        public PhysicalServer PhysicalServerModule => new PhysicalServer(restClient, cancellationToken, timeout, retry);
        public NSService NSServiceModule => new NSService(restClient, cancellationToken, timeout, retry);
        public AAA AAAModule => new AAA(restClient, cancellationToken, timeout, retry);
        public NsxDashboard NsxDashboardModule => new NsxDashboard(restClient, cancellationToken, timeout, retry);
        public FileStoreModule FileStoreModuleModule => new FileStoreModule(restClient, cancellationToken, timeout, retry);
        public AggSvcDnsForwarder AggSvcDnsForwarderModule => new AggSvcDnsForwarder(restClient, cancellationToken, timeout, retry);
        public TransportZone TransportZoneModule => new TransportZone(restClient, cancellationToken, timeout, retry);
        public ServiceInsertionExcludeList ServiceInsertionExcludeListModule => new ServiceInsertionExcludeList(restClient, cancellationToken, timeout, retry);
        public Vnim VnimModule => new Vnim(restClient, cancellationToken, timeout, retry);
        public CertificateManager CertificateManagerModule => new CertificateManager(restClient, cancellationToken, timeout, retry);
        public Heatmap HeatmapModule => new Heatmap(restClient, cancellationToken, timeout, retry);
        public NodeNsxUpgradeAgent NodeNsxUpgradeAgentModule => new NodeNsxUpgradeAgent(restClient, cancellationToken, timeout, retry);
        public NodeAsyncReplicatorService NodeAsyncReplicatorServiceModule => new NodeAsyncReplicatorService(restClient, cancellationToken, timeout, retry);
        public LoadBalancer LoadBalancerModule => new LoadBalancer(restClient, cancellationToken, timeout, retry);
        public NodeNTPService NodeNTPServiceModule => new NodeNTPService(restClient, cancellationToken, timeout, retry);
        public NodeProtonService NodeProtonServiceModule => new NodeProtonService(restClient, cancellationToken, timeout, retry);
        public NodeSNMPService NodeSNMPServiceModule => new NodeSNMPService(restClient, cancellationToken, timeout, retry);
        public MACAM MACAMModule => new MACAM(restClient, cancellationToken, timeout, retry);
        public ServiceInsertionVMDeployment ServiceInsertionVMDeploymentModule => new ServiceInsertionVMDeployment(restClient, cancellationToken, timeout, retry);
        public ClusterNodeBackupRestore ClusterNodeBackupRestoreModule => new ClusterNodeBackupRestore(restClient, cancellationToken, timeout, retry);
        public NodeNSXMessagingManagerService NodeNSXMessagingManagerServiceModule => new NodeNSXMessagingManagerService(restClient, cancellationToken, timeout, retry);
        public ClusterModule ClusterModuleModule => new ClusterModule(restClient, cancellationToken, timeout, retry);
        public AggSvcInterSite AggSvcInterSiteModule => new AggSvcInterSite(restClient, cancellationToken, timeout, retry);
        public FileUploadFramework FileUploadFrameworkModule => new FileUploadFramework(restClient, cancellationToken, timeout, retry);
        public SystemHealthPlugin SystemHealthPluginModule => new SystemHealthPlugin(restClient, cancellationToken, timeout, retry);
        public NodeClusterBootManagerService NodeClusterBootManagerServiceModule => new NodeClusterBootManagerService(restClient, cancellationToken, timeout, retry);
        public Normalization NormalizationModule => new Normalization(restClient, cancellationToken, timeout, retry);
        public InventoryVmTag InventoryVmTagModule => new InventoryVmTag(restClient, cancellationToken, timeout, retry);
        public FirewallStatus FirewallStatusModule => new FirewallStatus(restClient, cancellationToken, timeout, retry);
        public Ipfix IpfixModule => new Ipfix(restClient, cancellationToken, timeout, retry);
        public VersionWhitelist VersionWhitelistModule => new VersionWhitelist(restClient, cancellationToken, timeout, retry);
        public NodeLiagentService NodeLiagentServiceModule => new NodeLiagentService(restClient, cancellationToken, timeout, retry);
        public MPPolicyMigration MPPolicyMigrationModule => new MPPolicyMigration(restClient, cancellationToken, timeout, retry);
        public NfwConfig NfwConfigModule => new NfwConfig(restClient, cancellationToken, timeout, retry);
        public ClusterNodeVMDeployment ClusterNodeVMDeploymentModule => new ClusterNodeVMDeployment(restClient, cancellationToken, timeout, retry);
        public Nat NatModule => new Nat(restClient, cancellationToken, timeout, retry);
        public NodeProxyService NodeProxyServiceModule => new NodeProxyService(restClient, cancellationToken, timeout, retry);
        public AggSvcDhcp AggSvcDhcpModule => new AggSvcDhcp(restClient, cancellationToken, timeout, retry);
        public Lldp LldpModule => new Lldp(restClient, cancellationToken, timeout, retry);
        public NodeSSHService NodeSSHServiceModule => new NodeSSHService(restClient, cancellationToken, timeout, retry);
        public IPSet IPSetModule => new IPSet(restClient, cancellationToken, timeout, retry);
        public NodeApplProxy NodeApplProxyModule => new NodeApplProxy(restClient, cancellationToken, timeout, retry);
        public HealthCheck HealthCheckModule => new HealthCheck(restClient, cancellationToken, timeout, retry);
        public TransportNode TransportNodeModule => new TransportNode(restClient, cancellationToken, timeout, retry);
        public InventoryContainerObj InventoryContainerObjModule => new InventoryContainerObj(restClient, cancellationToken, timeout, retry);
        public InventoryCmObj InventoryCmObjModule => new InventoryCmObj(restClient, cancellationToken, timeout, retry);
        public UpgradeEULA UpgradeEULAModule => new UpgradeEULA(restClient, cancellationToken, timeout, retry);
        public TransportNodeCollection TransportNodeCollectionModule => new TransportNodeCollection(restClient, cancellationToken, timeout, retry);
        public FirewallSummary FirewallSummaryModule => new FirewallSummary(restClient, cancellationToken, timeout, retry);
        public TransportNodeLcm TransportNodeLcmModule => new TransportNodeLcm(restClient, cancellationToken, timeout, retry);
        public DirectoryService DirectoryServiceModule => new DirectoryService(restClient, cancellationToken, timeout, retry);
        public NodeSupportBundle NodeSupportBundleModule => new NodeSupportBundle(restClient, cancellationToken, timeout, retry);
        public BaseSwitchingProfile BaseSwitchingProfileModule => new BaseSwitchingProfile(restClient, cancellationToken, timeout, retry);
        public TelemetryConfig TelemetryConfigModule => new TelemetryConfig(restClient, cancellationToken, timeout, retry);
        public VPNStatistics VPNStatisticsModule => new VPNStatistics(restClient, cancellationToken, timeout, retry);
        public NsxIntelligenceDeployment NsxIntelligenceDeploymentModule => new NsxIntelligenceDeployment(restClient, cancellationToken, timeout, retry);
        public TransportNodeProfile TransportNodeProfileModule => new TransportNodeProfile(restClient, cancellationToken, timeout, retry);
        public NodeNodeStatsService NodeNodeStatsServiceModule => new NodeNodeStatsService(restClient, cancellationToken, timeout, retry);
        public BridgeEndpoint BridgeEndpointModule => new BridgeEndpoint(restClient, cancellationToken, timeout, retry);
        public NodeMigrationCoordinatorService NodeMigrationCoordinatorServiceModule => new NodeMigrationCoordinatorService(restClient, cancellationToken, timeout, retry);
        public EdgeClusters EdgeClustersModule => new EdgeClusters(restClient, cancellationToken, timeout, retry);
        public LogicalSwitch LogicalSwitchModule => new LogicalSwitch(restClient, cancellationToken, timeout, retry);
        public NodeNetworkDnsModule NodeNetworkDnsModuleModule => new NodeNetworkDnsModule(restClient, cancellationToken, timeout, retry);
        public CentralConfig CentralConfigModule => new CentralConfig(restClient, cancellationToken, timeout, retry);
        public BaseHostSwitchProfile BaseHostSwitchProfileModule => new BaseHostSwitchProfile(restClient, cancellationToken, timeout, retry);
        public IdpsReportingService IdpsReportingServiceModule => new IdpsReportingService(restClient, cancellationToken, timeout, retry);
        public DhcpRelay DhcpRelayModule => new DhcpRelay(restClient, cancellationToken, timeout, retry);
        public L2VPN L2VPNModule => new L2VPN(restClient, cancellationToken, timeout, retry);
        public Node NodeModule => new Node(restClient, cancellationToken, timeout, retry);
        public NetworkInterfaceModule NetworkInterfaceModuleModule => new NetworkInterfaceModule(restClient, cancellationToken, timeout, retry);
        public NodeLogs NodeLogsModule => new NodeLogs(restClient, cancellationToken, timeout, retry);
        public ApplianceManagementTaskModule ApplianceManagementTaskModuleModule => new ApplianceManagementTaskModule(restClient, cancellationToken, timeout, retry);
        public License LicenseModule => new License(restClient, cancellationToken, timeout, retry);
        public LogicalPort LogicalPortModule => new LogicalPort(restClient, cancellationToken, timeout, retry);
        public LogicalRouterPorts LogicalRouterPortsModule => new LogicalRouterPorts(restClient, cancellationToken, timeout, retry);
        public BackupConfiguration BackupConfigurationModule => new BackupConfiguration(restClient, cancellationToken, timeout, retry);
        public NSGroup NSGroupModule => new NSGroup(restClient, cancellationToken, timeout, retry);
        public NodePhonehomeCoordinatorService NodePhonehomeCoordinatorServiceModule => new NodePhonehomeCoordinatorService(restClient, cancellationToken, timeout, retry);
        public IDSMetrics IDSMetricsModule => new IDSMetrics(restClient, cancellationToken, timeout, retry);
        public Search SearchModule => new Search(restClient, cancellationToken, timeout, retry);
        public ClusterVirtualIp ClusterVirtualIpModule => new ClusterVirtualIp(restClient, cancellationToken, timeout, retry);
        public NSServiceGroup NSServiceGroupModule => new NSServiceGroup(restClient, cancellationToken, timeout, retry);
        public ServiceConfig ServiceConfigModule => new ServiceConfig(restClient, cancellationToken, timeout, retry);
        public LiveTrace LiveTraceModule => new LiveTrace(restClient, cancellationToken, timeout, retry);
        public ApplianceModes ApplianceModesModule => new ApplianceModes(restClient, cancellationToken, timeout, retry);
        public PacketCapture PacketCaptureModule => new PacketCapture(restClient, cancellationToken, timeout, retry);
        public ShaApplianceMonitor ShaApplianceMonitorModule => new ShaApplianceMonitor(restClient, cancellationToken, timeout, retry);
        public NodeUiServiceService NodeUiServiceServiceModule => new NodeUiServiceService(restClient, cancellationToken, timeout, retry);
        public NodeUsers NodeUsersModule => new NodeUsers(restClient, cancellationToken, timeout, retry);
        public UpmIpfixCollector UpmIpfixCollectorModule => new UpmIpfixCollector(restClient, cancellationToken, timeout, retry);
        public TnContainerStatus TnContainerStatusModule => new TnContainerStatus(restClient, cancellationToken, timeout, retry);
        public NodeAuditLog NodeAuditLogModule => new NodeAuditLog(restClient, cancellationToken, timeout, retry);
        public FirewallProfile FirewallProfileModule => new FirewallProfile(restClient, cancellationToken, timeout, retry);
        public NodeUsersManagerNodeType NodeUsersManagerNodeTypeModule => new NodeUsersManagerNodeType(restClient, cancellationToken, timeout, retry);
        public NodeNSXMessageBusService NodeNSXMessageBusServiceModule => new NodeNSXMessageBusService(restClient, cancellationToken, timeout, retry);
        public CoreDumpModule CoreDumpModuleModule => new CoreDumpModule(restClient, cancellationToken, timeout, retry);
        public RealizationStateBarrier RealizationStateBarrierModule => new RealizationStateBarrier(restClient, cancellationToken, timeout, retry);
        public ClusterProfile ClusterProfileModule => new ClusterProfile(restClient, cancellationToken, timeout, retry);
        public Tunnel TunnelModule => new Tunnel(restClient, cancellationToken, timeout, retry);
        public Ipam IpamModule => new Ipam(restClient, cancellationToken, timeout, retry);
        public ExcludeList ExcludeListModule => new ExcludeList(restClient, cancellationToken, timeout, retry);
        public Inventory InventoryModule => new Inventory(restClient, cancellationToken, timeout, retry);
        public SystemHealthAgent SystemHealthAgentModule => new SystemHealthAgent(restClient, cancellationToken, timeout, retry);
        public NsxIntelligenceHostConfiguration NsxIntelligenceHostConfigurationModule => new NsxIntelligenceHostConfiguration(restClient, cancellationToken, timeout, retry);
        public Association AssociationModule => new Association(restClient, cancellationToken, timeout, retry);
        public AggSvcBridging AggSvcBridgingModule => new AggSvcBridging(restClient, cancellationToken, timeout, retry);
        public Nxgi NxgiModule => new Nxgi(restClient, cancellationToken, timeout, retry);
        public ComputeCollectionDeployment ComputeCollectionDeploymentModule => new ComputeCollectionDeployment(restClient, cancellationToken, timeout, retry);
        public HostPrepServiceFabric HostPrepServiceFabricModule => new HostPrepServiceFabric(restClient, cancellationToken, timeout, retry);
        public BridgeEndpointProfile BridgeEndpointProfileModule => new BridgeEndpointProfile(restClient, cancellationToken, timeout, retry);
        public ClusterApiServiceModule ClusterApiServiceModuleModule => new ClusterApiServiceModule(restClient, cancellationToken, timeout, retry);
        public Monitoring MonitoringModule => new Monitoring(restClient, cancellationToken, timeout, retry);
        public AggSvcL2Forwarder AggSvcL2ForwarderModule => new AggSvcL2Forwarder(restClient, cancellationToken, timeout, retry);
        public UpgradeNodeActions UpgradeNodeActionsModule => new UpgradeNodeActions(restClient, cancellationToken, timeout, retry);
        public NodeApplianceManagementService NodeApplianceManagementServiceModule => new NodeApplianceManagementService(restClient, cancellationToken, timeout, retry);
        public ProxyConfig ProxyConfigModule => new ProxyConfig(restClient, cancellationToken, timeout, retry);
        public ErrorResolver ErrorResolverModule => new ErrorResolver(restClient, cancellationToken, timeout, retry);
        public GlobalConfigs GlobalConfigsModule => new GlobalConfigs(restClient, cancellationToken, timeout, retry);
        public MetadataProxy MetadataProxyModule => new MetadataProxy(restClient, cancellationToken, timeout, retry);
        public AggSvcEdgeCluster AggSvcEdgeClusterModule => new AggSvcEdgeCluster(restClient, cancellationToken, timeout, retry);
        public NodeControllerServerService NodeControllerServerServiceModule => new NodeControllerServerService(restClient, cancellationToken, timeout, retry);
        public AggSvcLb AggSvcLbModule => new AggSvcLb(restClient, cancellationToken, timeout, retry);
        public ProtonCapacityDashboard ProtonCapacityDashboardModule => new ProtonCapacityDashboard(restClient, cancellationToken, timeout, retry);
        public AggSvcLogicalRouterPort AggSvcLogicalRouterPortModule => new AggSvcLogicalRouterPort(restClient, cancellationToken, timeout, retry);
        public NodeStatus NodeStatusModule => new NodeStatus(restClient, cancellationToken, timeout, retry);
        public PortMirroring PortMirroringModule => new PortMirroring(restClient, cancellationToken, timeout, retry);
        public NodeStatusReport NodeStatusReportModule => new NodeStatusReport(restClient, cancellationToken, timeout, retry);
        public FirewallStatsRule FirewallStatsRuleModule => new FirewallStatsRule(restClient, cancellationToken, timeout, retry);
        public Latency LatencyModule => new Latency(restClient, cancellationToken, timeout, retry);
        public AuthenticationPolicyModule AuthenticationPolicyModuleModule => new AuthenticationPolicyModule(restClient, cancellationToken, timeout, retry);
        public UpmIpfix UpmIpfixModule => new UpmIpfix(restClient, cancellationToken, timeout, retry);
        public ControllerProfilerModule ControllerProfilerModuleModule => new ControllerProfilerModule(restClient, cancellationToken, timeout, retry);
        public NSProfile NSProfileModule => new NSProfile(restClient, cancellationToken, timeout, retry);
        public MPAConfigModule MPAConfigModuleModule => new MPAConfigModule(restClient, cancellationToken, timeout, retry);
        public Tasks TasksModule => new Tasks(restClient, cancellationToken, timeout, retry);
        public ServiceInsertionStatus ServiceInsertionStatusModule => new ServiceInsertionStatus(restClient, cancellationToken, timeout, retry);
        public AggSvcLogicalPort AggSvcLogicalPortModule => new AggSvcLogicalPort(restClient, cancellationToken, timeout, retry);
        public FailureDomain FailureDomainModule => new FailureDomain(restClient, cancellationToken, timeout, retry);
        public IDSProfile IDSProfileModule => new IDSProfile(restClient, cancellationToken, timeout, retry);
        public NodeSyslogService NodeSyslogServiceModule => new NodeSyslogService(restClient, cancellationToken, timeout, retry);
        public CentralApiModule CentralApiModuleModule => new CentralApiModule(restClient, cancellationToken, timeout, retry);
        public ManagementPlaneModule ManagementPlaneModuleModule => new ManagementPlaneModule(restClient, cancellationToken, timeout, retry);
        public AggSvcMetadataProxy AggSvcMetadataProxyModule => new AggSvcMetadataProxy(restClient, cancellationToken, timeout, retry);
        public NodeVersion NodeVersionModule => new NodeVersion(restClient, cancellationToken, timeout, retry);
        public Batch BatchModule => new Batch(restClient, cancellationToken, timeout, retry);
        public NodeProcesses NodeProcessesModule => new NodeProcesses(restClient, cancellationToken, timeout, retry);
        public GroupingObjectsProviders GroupingObjectsProvidersModule => new GroupingObjectsProviders(restClient, cancellationToken, timeout, retry);
        public NodeNetworkRoutesModule NodeNetworkRoutesModuleModule => new NodeNetworkRoutesModule(restClient, cancellationToken, timeout, retry);
        public UpgradeCoordinatorModule UpgradeCoordinatorModuleModule => new UpgradeCoordinatorModule(restClient, cancellationToken, timeout, retry);
        public PortConnection PortConnectionModule => new PortConnection(restClient, cancellationToken, timeout, retry);
        public NodeMandatoryAccessControlModule NodeMandatoryAccessControlModuleModule => new NodeMandatoryAccessControlModule(restClient, cancellationToken, timeout, retry);
        public RegistrationTokenEndPoint RegistrationTokenEndPointModule => new RegistrationTokenEndPoint(restClient, cancellationToken, timeout, retry);
        public IntelligenceNodeFormFactors IntelligenceNodeFormFactorsModule => new IntelligenceNodeFormFactors(restClient, cancellationToken, timeout, retry);
        public NodeAuthProviderVidm NodeAuthProviderVidmModule => new NodeAuthProviderVidm(restClient, cancellationToken, timeout, retry);
        public ConfigManagement ConfigManagementModule => new ConfigManagement(restClient, cancellationToken, timeout, retry);
        public NodeServices NodeServicesModule => new NodeServices(restClient, cancellationToken, timeout, retry);
        public InventoryCloudObj InventoryCloudObjModule => new InventoryCloudObj(restClient, cancellationToken, timeout, retry);
        public TransportZoneProfile TransportZoneProfileModule => new TransportZoneProfile(restClient, cancellationToken, timeout, retry);
        public ControllerServerCertificateModule ControllerServerCertificateModuleModule => new ControllerServerCertificateModule(restClient, cancellationToken, timeout, retry);
        public VmToolsInfo VmToolsInfoModule => new VmToolsInfo(restClient, cancellationToken, timeout, retry);
    }
}