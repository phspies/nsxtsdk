// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json;
using System.Net;
using nsxtsdk;
using nsxtsdk.Models;
using nsxtsdk.{{rootmodule}}Models;

namespace nsxtapi.{{rootmodule}}Modules
{
    public class {{module}}
    {
        RestClient restClient;
        JsonSerializerSettings defaultSerializationSettings;
        int retry;
        int timeout;
        CancellationToken cancellationToken;
        public {{module}}(RestClient Client, JsonSerializerSettings DefaultSerializationSettings, CancellationToken _cancellationToken, int _timeout, int _retry)

        {
            restClient = Client;
            defaultSerializationSettings = DefaultSerializationSettings;
            retry = _retry;
            timeout = _timeout;
            cancellationToken = _cancellationToken;
        }
        {{#operations}}
        {{#each value}}
        /// <summary>
        /// {{ToXmlDoc description "wrap"}}
        /// </summary>
        [NSXTProperty(Description: @"{{ToXmlDoc description}}")]
        public async {{GetOperationReturnType . "full"}} {{GetMethodName . operations.Current}}({{GetOperationPathParams .}})
        {
            {{#value.parameters}}
            {{#isRequired}}
            if ({{GetParameterPascalCase name}} == null) { throw new System.ArgumentNullException("{{GetParameterPascalCase name}} cannot be null"); }
            {{/isRequired}}
            {{/value.parameters}}
            {{GetOperationReturnType . "init"}}
            StringBuilder {{GetMethodName .}}ServiceURL = new StringBuilder("{{ GetServiceUrl operations.Current }}");
            var request = new RestRequest
            {              
                RequestFormat = DataFormat.Json,
                Method = Method.{{GetOperationHttpMethod key}}
            };
            request.AddHeader("Content-type", "application/json");
            {{#value.parameters}}
            {{GetOperationPathInjectionCode .  }}
            {{/value.parameters}}
            request.Resource = {{GetMethodName .}}ServiceURL.ToString();
            IRestResponse{{GetOperationReturnType . "bare"}} response = await restClient.ExecuteTaskAsyncWithPolicy{{GetOperationReturnType . "bare"}}(request, cancellationToken, timeout, retry);
            if (response.StatusCode != HttpStatusCode.OK)
			{
                var message = "HTTP {{GetOperationHttpMethod key}} operation to " + {{GetMethodName .}}ServiceURL.ToString() + " did not complete successfull";
                throw new NSXTException(message, (int)response.StatusCode, response.Content,  response.Headers, null);
			}
            {{GetOperationReturnType . "return"}}
        }
        {{/each}}
        {{/operations}}
    }
}
